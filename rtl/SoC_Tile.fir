circuit SoC_Tile :
  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip cmd : UInt<3>, flip in : UInt<32>, out : UInt<32>, flip pc : UInt<32>, flip addr : UInt<32>, flip inst : UInt<32>, flip illegal : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, flip pc_check : UInt<1>, expt : UInt<1>, evec : UInt<32>, epc : UInt<32>, irq : { flip uart_irq : UInt<1>, flip spi_irq : UInt<1>, flip m1_irq : UInt<1>, flip m2_irq : UInt<1>, flip m3_irq : UInt<1>}, flip br_taken : UInt<1>}

    node csr_addr = bits(io.inst, 31, 20) @[csr.scala 108:27]
    node rs1_addr = bits(io.inst, 19, 15) @[csr.scala 109:27]
    reg time : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 112:27]
    reg timeh : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 113:27]
    reg cycle : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 114:27]
    reg cycleh : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 115:27]
    reg instret : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 116:27]
    reg instreth : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 117:27]
    reg mstatus : { sd : UInt<1>, wpri0 : UInt<6>, prv : UInt<2>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, wpri1 : UInt<2>, spp : UInt<1>, mpie : UInt<1>, wpri2 : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, wpri3 : UInt<1>, sie : UInt<1>, uie : UInt<1>}, clock with :
      reset => (UInt<1>("h0"), mstatus) @[csr.scala 131:23]
    reg mie : { wpri4 : UInt<11>, motor3ie : UInt<1>, motor2ie : UInt<1>, motor1ie : UInt<1>, spiie : UInt<1>, uartie : UInt<1>, wpri3 : UInt<4>, meie : UInt<1>, wpri2 : UInt<1>, seie : UInt<1>, ueie : UInt<1>, mtie : UInt<1>, wpri1 : UInt<1>, stie : UInt<1>, utie : UInt<1>, msie : UInt<1>, wpri0 : UInt<1>, ssie : UInt<1>, usie : UInt<1>}, clock with :
      reset => (UInt<1>("h0"), mie) @[csr.scala 132:23]
    reg mip_reg : { wpri4 : UInt<11>, motor1ip : UInt<1>, motor2ip : UInt<1>, motor3ip : UInt<1>, spiip : UInt<1>, uartip : UInt<1>, wpri3 : UInt<4>, meip : UInt<1>, wpri2 : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, wpri1 : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, wpri0 : UInt<1>, ssip : UInt<1>, usip : UInt<1>}, clock with :
      reset => (UInt<1>("h0"), mip_reg) @[csr.scala 133:23]
    reg mip : { wpri4 : UInt<11>, motor1ip : UInt<1>, motor2ip : UInt<1>, motor3ip : UInt<1>, spiip : UInt<1>, uartip : UInt<1>, wpri3 : UInt<4>, meip : UInt<1>, wpri2 : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, wpri1 : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, wpri0 : UInt<1>, ssip : UInt<1>, usip : UInt<1>}, clock with :
      reset => (reset, mip_reg) @[csr.scala 134:27]
    reg mtvec : UInt<32>, clock with :
      reset => (reset, UInt<32>("h9")) @[csr.scala 138:27]
    reg mscratch : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mscratch) @[csr.scala 141:23]
    reg mepc : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mepc) @[csr.scala 142:23]
    reg mcause : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mcause) @[csr.scala 143:23]
    reg mtval : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mtval) @[csr.scala 144:23]
    node _T = asUInt(reset) @[csr.scala 147:14]
    when _T : @[csr.scala 148:3]
      mie.motor3ie <= UInt<1>("h0") @[csr.scala 149:19]
      mie.motor2ie <= UInt<1>("h1") @[csr.scala 150:19]
      mie.motor1ie <= UInt<1>("h1") @[csr.scala 151:19]
      mie.spiie <= UInt<1>("h0") @[csr.scala 152:18]
      mie.uartie <= UInt<1>("h1") @[csr.scala 153:18]
      mstatus.mie <= UInt<1>("h1") @[csr.scala 154:18]
      mstatus.prv <= UInt<2>("h3") @[csr.scala 155:18]
      mstatus.mpp <= UInt<2>("h3") @[csr.scala 156:18]
    node lo_lo_lo = cat(mie.ssie, mie.usie) @[csr.scala 168:34]
    node lo_lo_hi = cat(mie.msie, mie.wpri0) @[csr.scala 168:34]
    node lo_lo = cat(lo_lo_hi, lo_lo_lo) @[csr.scala 168:34]
    node lo_hi_lo = cat(mie.stie, mie.utie) @[csr.scala 168:34]
    node lo_hi_hi_hi = cat(mie.ueie, mie.mtie) @[csr.scala 168:34]
    node lo_hi_hi = cat(lo_hi_hi_hi, mie.wpri1) @[csr.scala 168:34]
    node lo_hi = cat(lo_hi_hi, lo_hi_lo) @[csr.scala 168:34]
    node lo = cat(lo_hi, lo_lo) @[csr.scala 168:34]
    node hi_lo_lo = cat(mie.wpri2, mie.seie) @[csr.scala 168:34]
    node hi_lo_hi_hi = cat(mie.uartie, mie.wpri3) @[csr.scala 168:34]
    node hi_lo_hi = cat(hi_lo_hi_hi, mie.meie) @[csr.scala 168:34]
    node hi_lo = cat(hi_lo_hi, hi_lo_lo) @[csr.scala 168:34]
    node hi_hi_lo = cat(mie.motor1ie, mie.spiie) @[csr.scala 168:34]
    node hi_hi_hi_hi = cat(mie.wpri4, mie.motor3ie) @[csr.scala 168:34]
    node hi_hi_hi = cat(hi_hi_hi_hi, mie.motor2ie) @[csr.scala 168:34]
    node hi_hi = cat(hi_hi_hi, hi_hi_lo) @[csr.scala 168:34]
    node hi = cat(hi_hi, hi_lo) @[csr.scala 168:34]
    node _T_1 = cat(hi, lo) @[csr.scala 168:34]
    node lo_lo_lo_1 = cat(mip.ssip, mip.usip) @[csr.scala 173:34]
    node lo_lo_hi_1 = cat(mip.msip, mip.wpri0) @[csr.scala 173:34]
    node lo_lo_1 = cat(lo_lo_hi_1, lo_lo_lo_1) @[csr.scala 173:34]
    node lo_hi_lo_1 = cat(mip.stip, mip.utip) @[csr.scala 173:34]
    node lo_hi_hi_hi_1 = cat(mip.ueip, mip.mtip) @[csr.scala 173:34]
    node lo_hi_hi_1 = cat(lo_hi_hi_hi_1, mip.wpri1) @[csr.scala 173:34]
    node lo_hi_1 = cat(lo_hi_hi_1, lo_hi_lo_1) @[csr.scala 173:34]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[csr.scala 173:34]
    node hi_lo_lo_1 = cat(mip.wpri2, mip.seip) @[csr.scala 173:34]
    node hi_lo_hi_hi_1 = cat(mip.uartip, mip.wpri3) @[csr.scala 173:34]
    node hi_lo_hi_1 = cat(hi_lo_hi_hi_1, mip.meip) @[csr.scala 173:34]
    node hi_lo_1 = cat(hi_lo_hi_1, hi_lo_lo_1) @[csr.scala 173:34]
    node hi_hi_lo_1 = cat(mip.motor3ip, mip.spiip) @[csr.scala 173:34]
    node hi_hi_hi_hi_1 = cat(mip.wpri4, mip.motor1ip) @[csr.scala 173:34]
    node hi_hi_hi_1 = cat(hi_hi_hi_hi_1, mip.motor2ip) @[csr.scala 173:34]
    node hi_hi_1 = cat(hi_hi_hi_1, hi_hi_lo_1) @[csr.scala 173:34]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[csr.scala 173:34]
    node _T_2 = cat(hi_1, lo_1) @[csr.scala 173:34]
    node lo_lo_lo_2 = cat(mstatus.sie, mstatus.uie) @[csr.scala 174:38]
    node lo_lo_hi_hi = cat(mstatus.upie, mstatus.mie) @[csr.scala 174:38]
    node lo_lo_hi_2 = cat(lo_lo_hi_hi, mstatus.wpri3) @[csr.scala 174:38]
    node lo_lo_2 = cat(lo_lo_hi_2, lo_lo_lo_2) @[csr.scala 174:38]
    node lo_hi_lo_hi = cat(mstatus.mpie, mstatus.wpri2) @[csr.scala 174:38]
    node lo_hi_lo_2 = cat(lo_hi_lo_hi, mstatus.spie) @[csr.scala 174:38]
    node lo_hi_hi_hi_2 = cat(mstatus.mpp, mstatus.wpri1) @[csr.scala 174:38]
    node lo_hi_hi_2 = cat(lo_hi_hi_hi_2, mstatus.spp) @[csr.scala 174:38]
    node lo_hi_2 = cat(lo_hi_hi_2, lo_hi_lo_2) @[csr.scala 174:38]
    node lo_2 = cat(lo_hi_2, lo_lo_2) @[csr.scala 174:38]
    node hi_lo_lo_2 = cat(mstatus.xs, mstatus.fs) @[csr.scala 174:38]
    node hi_lo_hi_hi_2 = cat(mstatus.mxr, mstatus.sum) @[csr.scala 174:38]
    node hi_lo_hi_2 = cat(hi_lo_hi_hi_2, mstatus.mprv) @[csr.scala 174:38]
    node hi_lo_2 = cat(hi_lo_hi_2, hi_lo_lo_2) @[csr.scala 174:38]
    node hi_hi_lo_hi = cat(mstatus.tsr, mstatus.tw) @[csr.scala 174:38]
    node hi_hi_lo_2 = cat(hi_hi_lo_hi, mstatus.tvm) @[csr.scala 174:38]
    node hi_hi_hi_hi_2 = cat(mstatus.sd, mstatus.wpri0) @[csr.scala 174:38]
    node hi_hi_hi_2 = cat(hi_hi_hi_hi_2, mstatus.prv) @[csr.scala 174:38]
    node hi_hi_2 = cat(hi_hi_hi_2, hi_hi_lo_2) @[csr.scala 174:38]
    node hi_2 = cat(hi_hi_2, hi_lo_2) @[csr.scala 174:38]
    node _T_3 = cat(hi_2, lo_2) @[csr.scala 174:38]
    node _io_out_T = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_1 = eq(UInt<12>("hc00"), _io_out_T) @[Lookup.scala 31:38]
    node _io_out_T_2 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_3 = eq(UInt<12>("hc01"), _io_out_T_2) @[Lookup.scala 31:38]
    node _io_out_T_4 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_5 = eq(UInt<12>("hc02"), _io_out_T_4) @[Lookup.scala 31:38]
    node _io_out_T_6 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_7 = eq(UInt<12>("hc80"), _io_out_T_6) @[Lookup.scala 31:38]
    node _io_out_T_8 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_9 = eq(UInt<12>("hc81"), _io_out_T_8) @[Lookup.scala 31:38]
    node _io_out_T_10 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_11 = eq(UInt<12>("hc82"), _io_out_T_10) @[Lookup.scala 31:38]
    node _io_out_T_12 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_13 = eq(UInt<10>("h305"), _io_out_T_12) @[Lookup.scala 31:38]
    node _io_out_T_14 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_15 = eq(UInt<10>("h304"), _io_out_T_14) @[Lookup.scala 31:38]
    node _io_out_T_16 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_17 = eq(UInt<10>("h340"), _io_out_T_16) @[Lookup.scala 31:38]
    node _io_out_T_18 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_19 = eq(UInt<10>("h341"), _io_out_T_18) @[Lookup.scala 31:38]
    node _io_out_T_20 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_21 = eq(UInt<10>("h342"), _io_out_T_20) @[Lookup.scala 31:38]
    node _io_out_T_22 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_23 = eq(UInt<10>("h343"), _io_out_T_22) @[Lookup.scala 31:38]
    node _io_out_T_24 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_25 = eq(UInt<10>("h344"), _io_out_T_24) @[Lookup.scala 31:38]
    node _io_out_T_26 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_27 = eq(UInt<10>("h300"), _io_out_T_26) @[Lookup.scala 31:38]
    node _io_out_T_28 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _io_out_T_29 = eq(UInt<10>("h301"), _io_out_T_28) @[Lookup.scala 31:38]
    node _io_out_T_30 = mux(_io_out_T_29, UInt<32>("h40000100"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _io_out_T_31 = mux(_io_out_T_27, _T_3, _io_out_T_30) @[Lookup.scala 34:39]
    node _io_out_T_32 = mux(_io_out_T_25, _T_2, _io_out_T_31) @[Lookup.scala 34:39]
    node _io_out_T_33 = mux(_io_out_T_23, mtval, _io_out_T_32) @[Lookup.scala 34:39]
    node _io_out_T_34 = mux(_io_out_T_21, mcause, _io_out_T_33) @[Lookup.scala 34:39]
    node _io_out_T_35 = mux(_io_out_T_19, mepc, _io_out_T_34) @[Lookup.scala 34:39]
    node _io_out_T_36 = mux(_io_out_T_17, mscratch, _io_out_T_35) @[Lookup.scala 34:39]
    node _io_out_T_37 = mux(_io_out_T_15, _T_1, _io_out_T_36) @[Lookup.scala 34:39]
    node _io_out_T_38 = mux(_io_out_T_13, mtvec, _io_out_T_37) @[Lookup.scala 34:39]
    node _io_out_T_39 = mux(_io_out_T_11, instreth, _io_out_T_38) @[Lookup.scala 34:39]
    node _io_out_T_40 = mux(_io_out_T_9, timeh, _io_out_T_39) @[Lookup.scala 34:39]
    node _io_out_T_41 = mux(_io_out_T_7, cycleh, _io_out_T_40) @[Lookup.scala 34:39]
    node _io_out_T_42 = mux(_io_out_T_5, instret, _io_out_T_41) @[Lookup.scala 34:39]
    node _io_out_T_43 = mux(_io_out_T_3, time, _io_out_T_42) @[Lookup.scala 34:39]
    node _io_out_T_44 = mux(_io_out_T_1, cycle, _io_out_T_43) @[Lookup.scala 34:39]
    io.out <= _io_out_T_44 @[csr.scala 179:10]
    node _privValid_T = bits(csr_addr, 9, 8) @[csr.scala 182:31]
    node privValid = leq(_privValid_T, mstatus.prv) @[csr.scala 182:38]
    node privInst = eq(io.cmd, UInt<3>("h4")) @[csr.scala 183:30]
    node _isEcall_T = bits(csr_addr, 0, 0) @[csr.scala 184:44]
    node _isEcall_T_1 = eq(_isEcall_T, UInt<1>("h0")) @[csr.scala 184:35]
    node _isEcall_T_2 = and(privInst, _isEcall_T_1) @[csr.scala 184:32]
    node _isEcall_T_3 = bits(csr_addr, 8, 8) @[csr.scala 184:60]
    node _isEcall_T_4 = eq(_isEcall_T_3, UInt<1>("h0")) @[csr.scala 184:51]
    node isEcall = and(_isEcall_T_2, _isEcall_T_4) @[csr.scala 184:48]
    node _isEbreak_T = bits(csr_addr, 0, 0) @[csr.scala 185:44]
    node _isEbreak_T_1 = and(privInst, _isEbreak_T) @[csr.scala 185:32]
    node _isEbreak_T_2 = bits(csr_addr, 8, 8) @[csr.scala 185:60]
    node _isEbreak_T_3 = eq(_isEbreak_T_2, UInt<1>("h0")) @[csr.scala 185:51]
    node isEbreak = and(_isEbreak_T_1, _isEbreak_T_3) @[csr.scala 185:48]
    node _isEret_T = bits(csr_addr, 0, 0) @[csr.scala 186:44]
    node _isEret_T_1 = eq(_isEret_T, UInt<1>("h0")) @[csr.scala 186:35]
    node _isEret_T_2 = and(privInst, _isEret_T_1) @[csr.scala 186:32]
    node _isEret_T_3 = bits(csr_addr, 8, 8) @[csr.scala 186:60]
    node isEret = and(_isEret_T_2, _isEret_T_3) @[csr.scala 186:48]
    node _iaddrInvalid_T = bits(io.addr, 1, 1) @[csr.scala 187:45]
    node iaddrInvalid = and(io.pc_check, _iaddrInvalid_T) @[csr.scala 187:35]
    node _laddrInvalid_T = bits(io.addr, 1, 0) @[csr.scala 189:49]
    node _laddrInvalid_T_1 = orr(_laddrInvalid_T) @[csr.scala 189:56]
    node _laddrInvalid_T_2 = bits(io.addr, 0, 0) @[csr.scala 189:77]
    node _laddrInvalid_T_3 = bits(io.addr, 0, 0) @[csr.scala 189:99]
    node _laddrInvalid_T_4 = eq(UInt<3>("h1"), io.ld_type) @[Mux.scala 81:61]
    node _laddrInvalid_T_5 = mux(_laddrInvalid_T_4, _laddrInvalid_T_1, UInt<1>("h0")) @[Mux.scala 81:58]
    node _laddrInvalid_T_6 = eq(UInt<3>("h2"), io.ld_type) @[Mux.scala 81:61]
    node _laddrInvalid_T_7 = mux(_laddrInvalid_T_6, _laddrInvalid_T_2, _laddrInvalid_T_5) @[Mux.scala 81:58]
    node _laddrInvalid_T_8 = eq(UInt<3>("h4"), io.ld_type) @[Mux.scala 81:61]
    node laddrInvalid = mux(_laddrInvalid_T_8, _laddrInvalid_T_3, _laddrInvalid_T_7) @[Mux.scala 81:58]
    node _saddrInvalid_T = bits(io.addr, 1, 0) @[csr.scala 191:49]
    node _saddrInvalid_T_1 = orr(_saddrInvalid_T) @[csr.scala 191:56]
    node _saddrInvalid_T_2 = bits(io.addr, 0, 0) @[csr.scala 191:77]
    node _saddrInvalid_T_3 = eq(UInt<2>("h1"), io.st_type) @[Mux.scala 81:61]
    node _saddrInvalid_T_4 = mux(_saddrInvalid_T_3, _saddrInvalid_T_1, UInt<1>("h0")) @[Mux.scala 81:58]
    node _saddrInvalid_T_5 = eq(UInt<2>("h2"), io.st_type) @[Mux.scala 81:61]
    node saddrInvalid = mux(_saddrInvalid_T_5, _saddrInvalid_T_2, _saddrInvalid_T_4) @[Mux.scala 81:58]
    node isMotor1 = and(mip.motor1ip, mie.motor1ie) @[csr.scala 193:37]
    node isMotor2 = and(mip.motor2ip, mie.motor2ie) @[csr.scala 194:37]
    node isMotor3 = and(mip.motor3ip, mie.motor3ie) @[csr.scala 195:37]
    node isSpi = and(mip.spiip, mie.spiie) @[csr.scala 196:35]
    node isUart = and(mip.uartip, mie.uartie) @[csr.scala 197:36]
    node isTimer = and(mip.mtip, mie.mtie) @[csr.scala 198:36]
    node isExternal = and(mip.meip, mie.meie) @[csr.scala 199:36]
    node isSoftware = and(mip.msip, mie.msie) @[csr.scala 200:36]
    node _csrValid_T = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_1 = eq(UInt<12>("hc00"), _csrValid_T) @[csr.scala 203:41]
    node _csrValid_T_2 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_3 = eq(UInt<12>("hc01"), _csrValid_T_2) @[csr.scala 203:41]
    node _csrValid_T_4 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_5 = eq(UInt<12>("hc02"), _csrValid_T_4) @[csr.scala 203:41]
    node _csrValid_T_6 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_7 = eq(UInt<12>("hc80"), _csrValid_T_6) @[csr.scala 203:41]
    node _csrValid_T_8 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_9 = eq(UInt<12>("hc81"), _csrValid_T_8) @[csr.scala 203:41]
    node _csrValid_T_10 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_11 = eq(UInt<12>("hc82"), _csrValid_T_10) @[csr.scala 203:41]
    node _csrValid_T_12 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_13 = eq(UInt<10>("h305"), _csrValid_T_12) @[csr.scala 203:41]
    node _csrValid_T_14 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_15 = eq(UInt<10>("h304"), _csrValid_T_14) @[csr.scala 203:41]
    node _csrValid_T_16 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_17 = eq(UInt<10>("h340"), _csrValid_T_16) @[csr.scala 203:41]
    node _csrValid_T_18 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_19 = eq(UInt<10>("h341"), _csrValid_T_18) @[csr.scala 203:41]
    node _csrValid_T_20 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_21 = eq(UInt<10>("h342"), _csrValid_T_20) @[csr.scala 203:41]
    node _csrValid_T_22 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_23 = eq(UInt<10>("h343"), _csrValid_T_22) @[csr.scala 203:41]
    node _csrValid_T_24 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_25 = eq(UInt<10>("h344"), _csrValid_T_24) @[csr.scala 203:41]
    node _csrValid_T_26 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_27 = eq(UInt<10>("h300"), _csrValid_T_26) @[csr.scala 203:41]
    node _csrValid_T_28 = and(csr_addr, UInt<12>("hfff")) @[csr.scala 203:41]
    node _csrValid_T_29 = eq(UInt<10>("h301"), _csrValid_T_28) @[csr.scala 203:41]
    node _csrValid_T_30 = or(_csrValid_T_1, _csrValid_T_3) @[csr.scala 203:65]
    node _csrValid_T_31 = or(_csrValid_T_30, _csrValid_T_5) @[csr.scala 203:65]
    node _csrValid_T_32 = or(_csrValid_T_31, _csrValid_T_7) @[csr.scala 203:65]
    node _csrValid_T_33 = or(_csrValid_T_32, _csrValid_T_9) @[csr.scala 203:65]
    node _csrValid_T_34 = or(_csrValid_T_33, _csrValid_T_11) @[csr.scala 203:65]
    node _csrValid_T_35 = or(_csrValid_T_34, _csrValid_T_13) @[csr.scala 203:65]
    node _csrValid_T_36 = or(_csrValid_T_35, _csrValid_T_15) @[csr.scala 203:65]
    node _csrValid_T_37 = or(_csrValid_T_36, _csrValid_T_17) @[csr.scala 203:65]
    node _csrValid_T_38 = or(_csrValid_T_37, _csrValid_T_19) @[csr.scala 203:65]
    node _csrValid_T_39 = or(_csrValid_T_38, _csrValid_T_21) @[csr.scala 203:65]
    node _csrValid_T_40 = or(_csrValid_T_39, _csrValid_T_23) @[csr.scala 203:65]
    node _csrValid_T_41 = or(_csrValid_T_40, _csrValid_T_25) @[csr.scala 203:65]
    node _csrValid_T_42 = or(_csrValid_T_41, _csrValid_T_27) @[csr.scala 203:65]
    node csrValid = or(_csrValid_T_42, _csrValid_T_29) @[csr.scala 203:65]
    node _csrRO_T = bits(csr_addr, 11, 10) @[csr.scala 204:31]
    node csrRO = andr(_csrRO_T) @[csr.scala 204:40]
    node _wen_T = eq(io.cmd, UInt<3>("h1")) @[csr.scala 205:30]
    node _wen_T_1 = bits(io.cmd, 1, 1) @[csr.scala 205:49]
    node _wen_T_2 = orr(rs1_addr) @[csr.scala 205:65]
    node _wen_T_3 = and(_wen_T_1, _wen_T_2) @[csr.scala 205:53]
    node wen = or(_wen_T, _wen_T_3) @[csr.scala 205:40]
    node _wdata_T = or(io.out, io.in) @[csr.scala 207:68]
    node _wdata_T_1 = not(io.in) @[csr.scala 208:70]
    node _wdata_T_2 = and(io.out, _wdata_T_1) @[csr.scala 208:68]
    node _wdata_T_3 = eq(UInt<3>("h1"), io.cmd) @[Mux.scala 81:61]
    node _wdata_T_4 = mux(_wdata_T_3, io.in, UInt<1>("h0")) @[Mux.scala 81:58]
    node _wdata_T_5 = eq(UInt<3>("h2"), io.cmd) @[Mux.scala 81:61]
    node _wdata_T_6 = mux(_wdata_T_5, _wdata_T, _wdata_T_4) @[Mux.scala 81:58]
    node _wdata_T_7 = eq(UInt<3>("h3"), io.cmd) @[Mux.scala 81:61]
    node wdata = mux(_wdata_T_7, _wdata_T_2, _wdata_T_6) @[Mux.scala 81:58]
    node _causeExpt_T = add(UInt<30>("h8"), mstatus.prv) @[csr.scala 214:50]
    node _causeExpt_T_1 = tail(_causeExpt_T, 1) @[csr.scala 214:50]
    node _causeExpt_T_2 = mux(isEbreak, UInt<30>("h3"), UInt<30>("h2")) @[csr.scala 215:22]
    node _causeExpt_T_3 = mux(isEcall, _causeExpt_T_1, _causeExpt_T_2) @[csr.scala 214:22]
    node _causeExpt_T_4 = mux(saddrInvalid, UInt<30>("h6"), _causeExpt_T_3) @[csr.scala 213:22]
    node _causeExpt_T_5 = mux(laddrInvalid, UInt<30>("h4"), _causeExpt_T_4) @[csr.scala 212:22]
    node causeExpt = mux(iaddrInvalid, UInt<30>("h0"), _causeExpt_T_5) @[csr.scala 211:22]
    node _causeInt_T = mux(isMotor2, UInt<30>("h13"), UInt<30>("h14")) @[csr.scala 223:22]
    node _causeInt_T_1 = mux(isMotor1, UInt<30>("h12"), _causeInt_T) @[csr.scala 222:22]
    node _causeInt_T_2 = mux(isSpi, UInt<30>("h11"), _causeInt_T_1) @[csr.scala 221:22]
    node _causeInt_T_3 = mux(isUart, UInt<30>("h10"), _causeInt_T_2) @[csr.scala 220:22]
    node _causeInt_T_4 = mux(isTimer, UInt<30>("h7"), _causeInt_T_3) @[csr.scala 219:22]
    node _causeInt_T_5 = mux(isExternal, UInt<30>("hb"), _causeInt_T_4) @[csr.scala 218:22]
    node causeInt = mux(isSoftware, UInt<30>("h3"), _causeInt_T_5) @[csr.scala 217:22]
    node _isInt_T = or(isMotor1, isMotor2) @[csr.scala 226:30]
    node _isInt_T_1 = or(_isInt_T, isMotor3) @[csr.scala 226:42]
    node _isInt_T_2 = or(_isInt_T_1, isSpi) @[csr.scala 226:54]
    node _isInt_T_3 = or(_isInt_T_2, isUart) @[csr.scala 226:63]
    node _isInt_T_4 = or(_isInt_T_3, isTimer) @[csr.scala 226:73]
    node _isInt_T_5 = or(_isInt_T_4, isExternal) @[csr.scala 226:84]
    node _isInt_T_6 = or(_isInt_T_5, isSoftware) @[csr.scala 226:98]
    node isInt = and(_isInt_T_6, mstatus.mie) @[csr.scala 226:113]
    node cause = mux(isInt, causeInt, causeExpt) @[csr.scala 227:23]
    node _base_T = shr(mtvec, 2) @[csr.scala 230:26]
    node base = shl(_base_T, 2) @[csr.scala 230:31]
    node mode = bits(mtvec, 1, 0) @[csr.scala 231:25]
    node _io_evec_T = bits(mode, 0, 0) @[csr.scala 232:38]
    node _io_evec_T_1 = and(isInt, _io_evec_T) @[csr.scala 232:31]
    node _io_evec_T_2 = shl(cause, 2) @[csr.scala 232:57]
    node _io_evec_T_3 = add(base, _io_evec_T_2) @[csr.scala 232:48]
    node _io_evec_T_4 = tail(_io_evec_T_3, 1) @[csr.scala 232:48]
    node _io_evec_T_5 = mux(_io_evec_T_1, _io_evec_T_4, base) @[csr.scala 232:24]
    io.evec <= _io_evec_T_5 @[csr.scala 232:18]
    node _io_expt_T = or(io.illegal, iaddrInvalid) @[csr.scala 235:33]
    node _io_expt_T_1 = or(_io_expt_T, laddrInvalid) @[csr.scala 235:49]
    node _io_expt_T_2 = or(_io_expt_T_1, saddrInvalid) @[csr.scala 235:65]
    node _io_expt_T_3 = bits(io.cmd, 1, 0) @[csr.scala 236:28]
    node _io_expt_T_4 = orr(_io_expt_T_3) @[csr.scala 236:35]
    node _io_expt_T_5 = eq(csrValid, UInt<1>("h0")) @[csr.scala 236:43]
    node _io_expt_T_6 = eq(privValid, UInt<1>("h0")) @[csr.scala 236:56]
    node _io_expt_T_7 = or(_io_expt_T_5, _io_expt_T_6) @[csr.scala 236:53]
    node _io_expt_T_8 = and(_io_expt_T_4, _io_expt_T_7) @[csr.scala 236:39]
    node _io_expt_T_9 = or(_io_expt_T_2, _io_expt_T_8) @[csr.scala 235:81]
    node _io_expt_T_10 = and(wen, csrRO) @[csr.scala 236:75]
    node _io_expt_T_11 = or(_io_expt_T_9, _io_expt_T_10) @[csr.scala 236:68]
    node _io_expt_T_12 = eq(privValid, UInt<1>("h0")) @[csr.scala 237:35]
    node _io_expt_T_13 = and(privInst, _io_expt_T_12) @[csr.scala 237:32]
    node _io_expt_T_14 = or(_io_expt_T_11, _io_expt_T_13) @[csr.scala 236:84]
    node _io_expt_T_15 = or(_io_expt_T_14, isEcall) @[csr.scala 237:47]
    node _io_expt_T_16 = or(_io_expt_T_15, isEbreak) @[csr.scala 237:58]
    node _io_expt_T_17 = or(_io_expt_T_16, isInt) @[csr.scala 237:70]
    io.expt <= _io_expt_T_17 @[csr.scala 235:18]
    io.epc <= mepc @[csr.scala 238:18]
    node _time_T = add(time, UInt<1>("h1")) @[csr.scala 241:26]
    node _time_T_1 = tail(_time_T, 1) @[csr.scala 241:26]
    time <= _time_T_1 @[csr.scala 241:18]
    node _T_4 = andr(time) @[csr.scala 242:13]
    when _T_4 : @[csr.scala 242:19]
      node _timeh_T = add(timeh, UInt<1>("h1")) @[csr.scala 243:27]
      node _timeh_T_1 = tail(_timeh_T, 1) @[csr.scala 243:27]
      timeh <= _timeh_T_1 @[csr.scala 243:18]
    node _cycle_T = add(cycle, UInt<1>("h1")) @[csr.scala 245:27]
    node _cycle_T_1 = tail(_cycle_T, 1) @[csr.scala 245:27]
    cycle <= _cycle_T_1 @[csr.scala 245:18]
    node _T_5 = andr(cycle) @[csr.scala 246:14]
    when _T_5 : @[csr.scala 246:20]
      node _cycleh_T = add(cycleh, UInt<1>("h1")) @[csr.scala 247:28]
      node _cycleh_T_1 = tail(_cycleh_T, 1) @[csr.scala 247:28]
      cycleh <= _cycleh_T_1 @[csr.scala 247:18]
    node _isInstRet_T = neq(io.inst, UInt<32>("h13")) @[csr.scala 249:28]
    node _isInstRet_T_1 = eq(io.expt, UInt<1>("h0")) @[csr.scala 249:53]
    node _isInstRet_T_2 = or(_isInstRet_T_1, isEcall) @[csr.scala 249:62]
    node _isInstRet_T_3 = or(_isInstRet_T_2, isEbreak) @[csr.scala 249:73]
    node _isInstRet_T_4 = and(_isInstRet_T, _isInstRet_T_3) @[csr.scala 249:49]
    node _isInstRet_T_5 = eq(io.stall, UInt<1>("h0")) @[csr.scala 249:89]
    node isInstRet = and(_isInstRet_T_4, _isInstRet_T_5) @[csr.scala 249:86]
    when isInstRet : @[csr.scala 251:19]
      node _instret_T = add(instret, UInt<1>("h1")) @[csr.scala 252:29]
      node _instret_T_1 = tail(_instret_T, 1) @[csr.scala 252:29]
      instret <= _instret_T_1 @[csr.scala 252:18]
    node _T_6 = andr(instret) @[csr.scala 254:29]
    node _T_7 = and(isInstRet, _T_6) @[csr.scala 254:18]
    when _T_7 : @[csr.scala 254:35]
      node _instreth_T = add(instreth, UInt<1>("h1")) @[csr.scala 255:30]
      node _instreth_T_1 = tail(_instreth_T, 1) @[csr.scala 255:30]
      instreth <= _instreth_T_1 @[csr.scala 255:18]
    reg wasEret : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[csr.scala 259:28]
    wasEret <= isEret @[csr.scala 260:19]
    reg br_taken : UInt<1>, clock with :
      reset => (UInt<1>("h0"), br_taken) @[csr.scala 263:30]
    reg br_taken_delayed : UInt<1>, clock with :
      reset => (UInt<1>("h0"), br_taken_delayed) @[csr.scala 264:30]
    br_taken <= io.br_taken @[csr.scala 265:24]
    br_taken_delayed <= br_taken @[csr.scala 266:24]
    node _T_8 = eq(io.stall, UInt<1>("h0")) @[csr.scala 268:8]
    when _T_8 : @[csr.scala 268:20]
      when io.expt : @[csr.scala 269:19]
        node _T_9 = eq(wasEret, UInt<1>("h0")) @[csr.scala 273:12]
        when _T_9 : @[csr.scala 274:7]
          node _mepc_T = sub(io.pc, UInt<3>("h4")) @[csr.scala 274:54]
          node _mepc_T_1 = tail(_mepc_T, 1) @[csr.scala 274:54]
          node _mepc_T_2 = mux(br_taken_delayed, _mepc_T_1, io.pc) @[csr.scala 274:29]
          node _mepc_T_3 = shr(_mepc_T_2, 2) @[csr.scala 274:69]
          node _mepc_T_4 = shl(_mepc_T_3, 2) @[csr.scala 274:74]
          mepc <= _mepc_T_4 @[csr.scala 274:22]
        node _mcause_T = mux(isInt, UInt<1>("h1"), UInt<1>("h0")) @[csr.scala 277:32]
        node mcause_hi = cat(_mcause_T, UInt<1>("h0")) @[Cat.scala 33:92]
        node _mcause_T_1 = cat(mcause_hi, cause) @[Cat.scala 33:92]
        mcause <= _mcause_T_1 @[csr.scala 277:22]
        mstatus.prv <= UInt<2>("h3") @[csr.scala 278:22]
        mstatus.mie <= UInt<1>("h0") @[csr.scala 279:22]
        mstatus.mpp <= mstatus.prv @[csr.scala 280:22]
        mstatus.mpie <= mstatus.mie @[csr.scala 281:22]
        node _T_10 = or(iaddrInvalid, laddrInvalid) @[csr.scala 282:25]
        node _T_11 = or(_T_10, saddrInvalid) @[csr.scala 282:41]
        when _T_11 : @[csr.scala 282:58]
          mtval <= io.addr @[csr.scala 282:66]
      else :
        when isEret : @[csr.scala 283:24]
          mstatus.prv <= mstatus.mpp @[csr.scala 284:22]
          mstatus.mie <= mstatus.mpie @[csr.scala 285:22]
          mstatus.mpp <= UInt<2>("h3") @[csr.scala 286:22]
          mstatus.mpie <= UInt<1>("h1") @[csr.scala 287:22]
        else :
          when wen : @[csr.scala 288:21]
            node _T_12 = eq(csr_addr, UInt<12>("h300")) @[csr.scala 289:21]
            when _T_12 : @[csr.scala 289:38]
              node _mstatus_mpp_T = bits(wdata, 12, 11) @[csr.scala 290:30]
              mstatus.mpp <= _mstatus_mpp_T @[csr.scala 290:22]
              node _mstatus_mpie_T = bits(wdata, 7, 7) @[csr.scala 291:30]
              mstatus.mpie <= _mstatus_mpie_T @[csr.scala 291:22]
              node _mstatus_prv_T = bits(wdata, 24, 23) @[csr.scala 292:30]
              mstatus.prv <= _mstatus_prv_T @[csr.scala 292:22]
              node _mstatus_mie_T = bits(wdata, 3, 3) @[csr.scala 293:30]
              mstatus.mie <= _mstatus_mie_T @[csr.scala 293:22]
            else :
              node _T_13 = eq(csr_addr, UInt<12>("h344")) @[csr.scala 295:26]
              when _T_13 : @[csr.scala 295:39]
                node _mip_motor3ip_T = bits(wdata, 20, 20) @[csr.scala 296:30]
                mip.motor3ip <= _mip_motor3ip_T @[csr.scala 296:22]
                node _mip_motor2ip_T = bits(wdata, 19, 19) @[csr.scala 297:30]
                mip.motor2ip <= _mip_motor2ip_T @[csr.scala 297:22]
                node _mip_motor1ip_T = bits(wdata, 18, 18) @[csr.scala 298:30]
                mip.motor1ip <= _mip_motor1ip_T @[csr.scala 298:22]
                node _mip_spiip_T = bits(wdata, 17, 17) @[csr.scala 299:30]
                mip.spiip <= _mip_spiip_T @[csr.scala 299:22]
                node _mip_uartip_T = bits(wdata, 16, 16) @[csr.scala 300:30]
                mip.uartip <= _mip_uartip_T @[csr.scala 300:22]
                node _mip_mtip_T = bits(wdata, 7, 7) @[csr.scala 301:30]
                mip.mtip <= _mip_mtip_T @[csr.scala 301:22]
                node _mip_msip_T = bits(wdata, 3, 3) @[csr.scala 302:30]
                mip.msip <= _mip_msip_T @[csr.scala 302:22]
              else :
                node _T_14 = eq(csr_addr, UInt<12>("h304")) @[csr.scala 304:26]
                when _T_14 : @[csr.scala 304:39]
                  node _mie_motor3ie_T = bits(wdata, 20, 20) @[csr.scala 305:30]
                  mie.motor3ie <= _mie_motor3ie_T @[csr.scala 305:22]
                  node _mie_motor2ie_T = bits(wdata, 19, 19) @[csr.scala 306:30]
                  mie.motor2ie <= _mie_motor2ie_T @[csr.scala 306:22]
                  node _mie_motor1ie_T = bits(wdata, 18, 18) @[csr.scala 307:30]
                  mie.motor1ie <= _mie_motor1ie_T @[csr.scala 307:22]
                  node _mie_spiie_T = bits(wdata, 17, 17) @[csr.scala 308:30]
                  mie.spiie <= _mie_spiie_T @[csr.scala 308:22]
                  node _mie_uartie_T = bits(wdata, 16, 16) @[csr.scala 309:30]
                  mie.uartie <= _mie_uartie_T @[csr.scala 309:22]
                  node _mie_mtie_T = bits(wdata, 7, 7) @[csr.scala 310:30]
                  mie.mtie <= _mie_mtie_T @[csr.scala 310:22]
                  node _mie_msie_T = bits(wdata, 3, 3) @[csr.scala 311:30]
                  mie.msie <= _mie_msie_T @[csr.scala 311:22]
                else :
                  node _T_15 = eq(csr_addr, UInt<12>("h305")) @[csr.scala 313:26]
                  when _T_15 : @[csr.scala 313:41]
                    mtvec <= wdata @[csr.scala 313:49]
                  else :
                    node _T_16 = eq(csr_addr, UInt<12>("h340")) @[csr.scala 314:26]
                    when _T_16 : @[csr.scala 314:44]
                      mscratch <= wdata @[csr.scala 314:55]
                    else :
                      node _T_17 = eq(csr_addr, UInt<12>("h341")) @[csr.scala 315:26]
                      when _T_17 : @[csr.scala 315:40]
                        node _mepc_T_5 = dshr(wdata, UInt<2>("h2")) @[csr.scala 315:56]
                        node _mepc_T_6 = dshl(_mepc_T_5, UInt<2>("h2")) @[csr.scala 315:63]
                        mepc <= _mepc_T_6 @[csr.scala 315:47]
                      else :
                        node _T_18 = eq(csr_addr, UInt<12>("h342")) @[csr.scala 316:26]
                        when _T_18 : @[csr.scala 316:42]
                          node _mcause_T_2 = and(wdata, UInt<32>("h8000000f")) @[csr.scala 316:60]
                          mcause <= _mcause_T_2 @[csr.scala 316:51]
                        else :
                          node _T_19 = eq(csr_addr, UInt<12>("h343")) @[csr.scala 317:26]
                          when _T_19 : @[csr.scala 317:41]
                            mtval <= wdata @[csr.scala 317:49]
      mip.uartip <= io.irq.uart_irq @[csr.scala 320:21]
      mip.spiip <= io.irq.spi_irq @[csr.scala 321:21]
      mip.motor1ip <= io.irq.m1_irq @[csr.scala 322:21]
      mip.motor2ip <= io.irq.m2_irq @[csr.scala 323:21]
      mip.motor3ip <= io.irq.m3_irq @[csr.scala 324:21]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr_1 : UInt<5>, flip raddr_2 : UInt<5>, rdata_1 : UInt<32>, rdata_2 : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>}

    cmem regs : UInt<32> [32] @[reg_file.scala 31:17]
    node _io_rdata_1_T = orr(io.raddr_1) @[reg_file.scala 39:33]
    infer mport io_rdata_1_MPORT = regs[io.raddr_1], clock @[reg_file.scala 39:43]
    node _io_rdata_1_T_1 = mux(_io_rdata_1_T, io_rdata_1_MPORT, UInt<1>("h0")) @[reg_file.scala 39:20]
    io.rdata_1 <= _io_rdata_1_T_1 @[reg_file.scala 39:14]
    node _io_rdata_2_T = orr(io.raddr_2) @[reg_file.scala 40:33]
    infer mport io_rdata_2_MPORT = regs[io.raddr_2], clock @[reg_file.scala 40:43]
    node _io_rdata_2_T_1 = mux(_io_rdata_2_T, io_rdata_2_MPORT, UInt<1>("h0")) @[reg_file.scala 40:20]
    io.rdata_2 <= _io_rdata_2_T_1 @[reg_file.scala 40:14]
    node _T = orr(io.waddr) @[reg_file.scala 42:26]
    node _T_1 = and(io.wen, _T) @[reg_file.scala 42:15]
    when _T_1 : @[reg_file.scala 42:31]
      infer mport MPORT = regs[io.waddr], clock @[reg_file.scala 43:9]
      MPORT <= io.wdata @[reg_file.scala 43:20]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : UInt<32>, flip in_b : UInt<32>, flip alu_op : UInt<4>, out : UInt<32>, sum : UInt<32>}

    node _sum_T = bits(io.alu_op, 0, 0) @[alu.scala 45:39]
    node _sum_T_1 = sub(UInt<1>("h0"), io.in_b) @[alu.scala 45:44]
    node _sum_T_2 = tail(_sum_T_1, 1) @[alu.scala 45:44]
    node _sum_T_3 = mux(_sum_T, _sum_T_2, io.in_b) @[alu.scala 45:29]
    node _sum_T_4 = add(io.in_a, _sum_T_3) @[alu.scala 45:24]
    node sum = tail(_sum_T_4, 1) @[alu.scala 45:24]
    node _cmp_T = bits(io.in_a, 31, 31) @[alu.scala 46:28]
    node _cmp_T_1 = bits(io.in_b, 31, 31) @[alu.scala 46:48]
    node _cmp_T_2 = eq(_cmp_T, _cmp_T_1) @[alu.scala 46:37]
    node _cmp_T_3 = bits(sum, 31, 31) @[alu.scala 46:61]
    node _cmp_T_4 = bits(io.alu_op, 1, 1) @[alu.scala 47:33]
    node _cmp_T_5 = bits(io.in_b, 31, 31) @[alu.scala 47:45]
    node _cmp_T_6 = bits(io.in_a, 31, 31) @[alu.scala 47:62]
    node _cmp_T_7 = mux(_cmp_T_4, _cmp_T_5, _cmp_T_6) @[alu.scala 47:23]
    node cmp = mux(_cmp_T_2, _cmp_T_3, _cmp_T_7) @[alu.scala 46:19]
    node shamt = bits(io.in_b, 4, 0) @[alu.scala 48:23]
    node _shin_T = bits(io.alu_op, 3, 3) @[alu.scala 49:29]
    node _shin_T_1 = shl(UInt<16>("hffff"), 16) @[Bitwise.scala 107:52]
    node _shin_T_2 = xor(UInt<32>("hffffffff"), _shin_T_1) @[Bitwise.scala 107:21]
    node _shin_T_3 = shr(io.in_a, 16) @[Bitwise.scala 108:21]
    node _shin_T_4 = and(_shin_T_3, _shin_T_2) @[Bitwise.scala 108:31]
    node _shin_T_5 = bits(io.in_a, 15, 0) @[Bitwise.scala 108:46]
    node _shin_T_6 = shl(_shin_T_5, 16) @[Bitwise.scala 108:70]
    node _shin_T_7 = not(_shin_T_2) @[Bitwise.scala 108:82]
    node _shin_T_8 = and(_shin_T_6, _shin_T_7) @[Bitwise.scala 108:80]
    node _shin_T_9 = or(_shin_T_4, _shin_T_8) @[Bitwise.scala 108:39]
    node _shin_T_10 = bits(_shin_T_2, 23, 0) @[Bitwise.scala 107:28]
    node _shin_T_11 = shl(_shin_T_10, 8) @[Bitwise.scala 107:52]
    node _shin_T_12 = xor(_shin_T_2, _shin_T_11) @[Bitwise.scala 107:21]
    node _shin_T_13 = shr(_shin_T_9, 8) @[Bitwise.scala 108:21]
    node _shin_T_14 = and(_shin_T_13, _shin_T_12) @[Bitwise.scala 108:31]
    node _shin_T_15 = bits(_shin_T_9, 23, 0) @[Bitwise.scala 108:46]
    node _shin_T_16 = shl(_shin_T_15, 8) @[Bitwise.scala 108:70]
    node _shin_T_17 = not(_shin_T_12) @[Bitwise.scala 108:82]
    node _shin_T_18 = and(_shin_T_16, _shin_T_17) @[Bitwise.scala 108:80]
    node _shin_T_19 = or(_shin_T_14, _shin_T_18) @[Bitwise.scala 108:39]
    node _shin_T_20 = bits(_shin_T_12, 27, 0) @[Bitwise.scala 107:28]
    node _shin_T_21 = shl(_shin_T_20, 4) @[Bitwise.scala 107:52]
    node _shin_T_22 = xor(_shin_T_12, _shin_T_21) @[Bitwise.scala 107:21]
    node _shin_T_23 = shr(_shin_T_19, 4) @[Bitwise.scala 108:21]
    node _shin_T_24 = and(_shin_T_23, _shin_T_22) @[Bitwise.scala 108:31]
    node _shin_T_25 = bits(_shin_T_19, 27, 0) @[Bitwise.scala 108:46]
    node _shin_T_26 = shl(_shin_T_25, 4) @[Bitwise.scala 108:70]
    node _shin_T_27 = not(_shin_T_22) @[Bitwise.scala 108:82]
    node _shin_T_28 = and(_shin_T_26, _shin_T_27) @[Bitwise.scala 108:80]
    node _shin_T_29 = or(_shin_T_24, _shin_T_28) @[Bitwise.scala 108:39]
    node _shin_T_30 = bits(_shin_T_22, 29, 0) @[Bitwise.scala 107:28]
    node _shin_T_31 = shl(_shin_T_30, 2) @[Bitwise.scala 107:52]
    node _shin_T_32 = xor(_shin_T_22, _shin_T_31) @[Bitwise.scala 107:21]
    node _shin_T_33 = shr(_shin_T_29, 2) @[Bitwise.scala 108:21]
    node _shin_T_34 = and(_shin_T_33, _shin_T_32) @[Bitwise.scala 108:31]
    node _shin_T_35 = bits(_shin_T_29, 29, 0) @[Bitwise.scala 108:46]
    node _shin_T_36 = shl(_shin_T_35, 2) @[Bitwise.scala 108:70]
    node _shin_T_37 = not(_shin_T_32) @[Bitwise.scala 108:82]
    node _shin_T_38 = and(_shin_T_36, _shin_T_37) @[Bitwise.scala 108:80]
    node _shin_T_39 = or(_shin_T_34, _shin_T_38) @[Bitwise.scala 108:39]
    node _shin_T_40 = bits(_shin_T_32, 30, 0) @[Bitwise.scala 107:28]
    node _shin_T_41 = shl(_shin_T_40, 1) @[Bitwise.scala 107:52]
    node _shin_T_42 = xor(_shin_T_32, _shin_T_41) @[Bitwise.scala 107:21]
    node _shin_T_43 = shr(_shin_T_39, 1) @[Bitwise.scala 108:21]
    node _shin_T_44 = and(_shin_T_43, _shin_T_42) @[Bitwise.scala 108:31]
    node _shin_T_45 = bits(_shin_T_39, 30, 0) @[Bitwise.scala 108:46]
    node _shin_T_46 = shl(_shin_T_45, 1) @[Bitwise.scala 108:70]
    node _shin_T_47 = not(_shin_T_42) @[Bitwise.scala 108:82]
    node _shin_T_48 = and(_shin_T_46, _shin_T_47) @[Bitwise.scala 108:80]
    node _shin_T_49 = or(_shin_T_44, _shin_T_48) @[Bitwise.scala 108:39]
    node shin = mux(_shin_T, io.in_a, _shin_T_49) @[alu.scala 49:19]
    node _shiftr_T = bits(io.alu_op, 0, 0) @[alu.scala 50:30]
    node _shiftr_T_1 = bits(shin, 31, 31) @[alu.scala 50:41]
    node _shiftr_T_2 = and(_shiftr_T, _shiftr_T_1) @[alu.scala 50:34]
    node _shiftr_T_3 = cat(_shiftr_T_2, shin) @[Cat.scala 33:92]
    node _shiftr_T_4 = asSInt(_shiftr_T_3) @[alu.scala 50:57]
    node _shiftr_T_5 = dshr(_shiftr_T_4, shamt) @[alu.scala 50:64]
    node shiftr = bits(_shiftr_T_5, 31, 0) @[alu.scala 50:73]
    node _shiftl_T = shl(UInt<16>("hffff"), 16) @[Bitwise.scala 107:52]
    node _shiftl_T_1 = xor(UInt<32>("hffffffff"), _shiftl_T) @[Bitwise.scala 107:21]
    node _shiftl_T_2 = shr(shiftr, 16) @[Bitwise.scala 108:21]
    node _shiftl_T_3 = and(_shiftl_T_2, _shiftl_T_1) @[Bitwise.scala 108:31]
    node _shiftl_T_4 = bits(shiftr, 15, 0) @[Bitwise.scala 108:46]
    node _shiftl_T_5 = shl(_shiftl_T_4, 16) @[Bitwise.scala 108:70]
    node _shiftl_T_6 = not(_shiftl_T_1) @[Bitwise.scala 108:82]
    node _shiftl_T_7 = and(_shiftl_T_5, _shiftl_T_6) @[Bitwise.scala 108:80]
    node _shiftl_T_8 = or(_shiftl_T_3, _shiftl_T_7) @[Bitwise.scala 108:39]
    node _shiftl_T_9 = bits(_shiftl_T_1, 23, 0) @[Bitwise.scala 107:28]
    node _shiftl_T_10 = shl(_shiftl_T_9, 8) @[Bitwise.scala 107:52]
    node _shiftl_T_11 = xor(_shiftl_T_1, _shiftl_T_10) @[Bitwise.scala 107:21]
    node _shiftl_T_12 = shr(_shiftl_T_8, 8) @[Bitwise.scala 108:21]
    node _shiftl_T_13 = and(_shiftl_T_12, _shiftl_T_11) @[Bitwise.scala 108:31]
    node _shiftl_T_14 = bits(_shiftl_T_8, 23, 0) @[Bitwise.scala 108:46]
    node _shiftl_T_15 = shl(_shiftl_T_14, 8) @[Bitwise.scala 108:70]
    node _shiftl_T_16 = not(_shiftl_T_11) @[Bitwise.scala 108:82]
    node _shiftl_T_17 = and(_shiftl_T_15, _shiftl_T_16) @[Bitwise.scala 108:80]
    node _shiftl_T_18 = or(_shiftl_T_13, _shiftl_T_17) @[Bitwise.scala 108:39]
    node _shiftl_T_19 = bits(_shiftl_T_11, 27, 0) @[Bitwise.scala 107:28]
    node _shiftl_T_20 = shl(_shiftl_T_19, 4) @[Bitwise.scala 107:52]
    node _shiftl_T_21 = xor(_shiftl_T_11, _shiftl_T_20) @[Bitwise.scala 107:21]
    node _shiftl_T_22 = shr(_shiftl_T_18, 4) @[Bitwise.scala 108:21]
    node _shiftl_T_23 = and(_shiftl_T_22, _shiftl_T_21) @[Bitwise.scala 108:31]
    node _shiftl_T_24 = bits(_shiftl_T_18, 27, 0) @[Bitwise.scala 108:46]
    node _shiftl_T_25 = shl(_shiftl_T_24, 4) @[Bitwise.scala 108:70]
    node _shiftl_T_26 = not(_shiftl_T_21) @[Bitwise.scala 108:82]
    node _shiftl_T_27 = and(_shiftl_T_25, _shiftl_T_26) @[Bitwise.scala 108:80]
    node _shiftl_T_28 = or(_shiftl_T_23, _shiftl_T_27) @[Bitwise.scala 108:39]
    node _shiftl_T_29 = bits(_shiftl_T_21, 29, 0) @[Bitwise.scala 107:28]
    node _shiftl_T_30 = shl(_shiftl_T_29, 2) @[Bitwise.scala 107:52]
    node _shiftl_T_31 = xor(_shiftl_T_21, _shiftl_T_30) @[Bitwise.scala 107:21]
    node _shiftl_T_32 = shr(_shiftl_T_28, 2) @[Bitwise.scala 108:21]
    node _shiftl_T_33 = and(_shiftl_T_32, _shiftl_T_31) @[Bitwise.scala 108:31]
    node _shiftl_T_34 = bits(_shiftl_T_28, 29, 0) @[Bitwise.scala 108:46]
    node _shiftl_T_35 = shl(_shiftl_T_34, 2) @[Bitwise.scala 108:70]
    node _shiftl_T_36 = not(_shiftl_T_31) @[Bitwise.scala 108:82]
    node _shiftl_T_37 = and(_shiftl_T_35, _shiftl_T_36) @[Bitwise.scala 108:80]
    node _shiftl_T_38 = or(_shiftl_T_33, _shiftl_T_37) @[Bitwise.scala 108:39]
    node _shiftl_T_39 = bits(_shiftl_T_31, 30, 0) @[Bitwise.scala 107:28]
    node _shiftl_T_40 = shl(_shiftl_T_39, 1) @[Bitwise.scala 107:52]
    node _shiftl_T_41 = xor(_shiftl_T_31, _shiftl_T_40) @[Bitwise.scala 107:21]
    node _shiftl_T_42 = shr(_shiftl_T_38, 1) @[Bitwise.scala 108:21]
    node _shiftl_T_43 = and(_shiftl_T_42, _shiftl_T_41) @[Bitwise.scala 108:31]
    node _shiftl_T_44 = bits(_shiftl_T_38, 30, 0) @[Bitwise.scala 108:46]
    node _shiftl_T_45 = shl(_shiftl_T_44, 1) @[Bitwise.scala 108:70]
    node _shiftl_T_46 = not(_shiftl_T_41) @[Bitwise.scala 108:82]
    node _shiftl_T_47 = and(_shiftl_T_45, _shiftl_T_46) @[Bitwise.scala 108:80]
    node shiftl = or(_shiftl_T_43, _shiftl_T_47) @[Bitwise.scala 108:39]
    node _out_T = eq(io.alu_op, UInt<4>("h0")) @[alu.scala 54:19]
    node _out_T_1 = eq(io.alu_op, UInt<4>("h1")) @[alu.scala 54:44]
    node _out_T_2 = or(_out_T, _out_T_1) @[alu.scala 54:31]
    node _out_T_3 = eq(io.alu_op, UInt<4>("h5")) @[alu.scala 55:19]
    node _out_T_4 = eq(io.alu_op, UInt<4>("h7")) @[alu.scala 55:44]
    node _out_T_5 = or(_out_T_3, _out_T_4) @[alu.scala 55:31]
    node _out_T_6 = eq(io.alu_op, UInt<4>("h9")) @[alu.scala 56:19]
    node _out_T_7 = eq(io.alu_op, UInt<4>("h8")) @[alu.scala 56:44]
    node _out_T_8 = or(_out_T_6, _out_T_7) @[alu.scala 56:31]
    node _out_T_9 = eq(io.alu_op, UInt<4>("h6")) @[alu.scala 57:19]
    node _out_T_10 = eq(io.alu_op, UInt<4>("h2")) @[alu.scala 58:19]
    node _out_T_11 = and(io.in_a, io.in_b) @[alu.scala 58:41]
    node _out_T_12 = eq(io.alu_op, UInt<4>("h3")) @[alu.scala 59:19]
    node _out_T_13 = or(io.in_a, io.in_b) @[alu.scala 59:41]
    node _out_T_14 = eq(io.alu_op, UInt<4>("h4")) @[alu.scala 60:19]
    node _out_T_15 = xor(io.in_a, io.in_b) @[alu.scala 60:41]
    node _out_T_16 = eq(io.alu_op, UInt<4>("ha")) @[alu.scala 61:19]
    node _out_T_17 = mux(_out_T_16, io.in_a, io.in_b) @[alu.scala 61:8]
    node _out_T_18 = mux(_out_T_14, _out_T_15, _out_T_17) @[alu.scala 60:8]
    node _out_T_19 = mux(_out_T_12, _out_T_13, _out_T_18) @[alu.scala 59:8]
    node _out_T_20 = mux(_out_T_10, _out_T_11, _out_T_19) @[alu.scala 58:8]
    node _out_T_21 = mux(_out_T_9, shiftl, _out_T_20) @[alu.scala 57:8]
    node _out_T_22 = mux(_out_T_8, shiftr, _out_T_21) @[alu.scala 56:8]
    node _out_T_23 = mux(_out_T_5, cmp, _out_T_22) @[alu.scala 55:8]
    node out = mux(_out_T_2, sum, _out_T_23) @[alu.scala 54:8]
    io.out <= out @[alu.scala 63:10]
    io.sum <= sum @[alu.scala 64:10]

  module Imm :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, flip imm_sel : UInt<3>, imm_out : UInt<32>}

    node _sign_val_T = eq(io.imm_sel, UInt<3>("h6")) @[imm_gen.scala 25:33]
    node _sign_val_T_1 = bits(io.inst, 31, 31) @[imm_gen.scala 25:56]
    node _sign_val_T_2 = asSInt(_sign_val_T_1) @[imm_gen.scala 25:61]
    node sign_val = mux(_sign_val_T, asSInt(UInt<1>("h0")), _sign_val_T_2) @[imm_gen.scala 25:21]
    node _imm30_20_T = eq(io.imm_sel, UInt<3>("h3")) @[imm_gen.scala 26:33]
    node _imm30_20_T_1 = bits(io.inst, 30, 20) @[imm_gen.scala 26:51]
    node _imm30_20_T_2 = asSInt(_imm30_20_T_1) @[imm_gen.scala 26:59]
    node imm30_20 = mux(_imm30_20_T, _imm30_20_T_2, sign_val) @[imm_gen.scala 26:21]
    node _imm19_12_T = neq(io.imm_sel, UInt<3>("h3")) @[imm_gen.scala 27:33]
    node _imm19_12_T_1 = neq(io.imm_sel, UInt<3>("h4")) @[imm_gen.scala 27:57]
    node _imm19_12_T_2 = and(_imm19_12_T, _imm19_12_T_1) @[imm_gen.scala 27:43]
    node _imm19_12_T_3 = bits(io.inst, 19, 12) @[imm_gen.scala 27:85]
    node _imm19_12_T_4 = asSInt(_imm19_12_T_3) @[imm_gen.scala 27:93]
    node imm19_12 = mux(_imm19_12_T_2, sign_val, _imm19_12_T_4) @[imm_gen.scala 27:21]
    node _imm11_T = eq(io.imm_sel, UInt<3>("h3")) @[imm_gen.scala 28:33]
    node _imm11_T_1 = eq(io.imm_sel, UInt<3>("h6")) @[imm_gen.scala 28:57]
    node _imm11_T_2 = or(_imm11_T, _imm11_T_1) @[imm_gen.scala 28:43]
    node _imm11_T_3 = eq(io.imm_sel, UInt<3>("h4")) @[imm_gen.scala 29:35]
    node _imm11_T_4 = bits(io.inst, 20, 20) @[imm_gen.scala 29:53]
    node _imm11_T_5 = asSInt(_imm11_T_4) @[imm_gen.scala 29:58]
    node _imm11_T_6 = eq(io.imm_sel, UInt<3>("h5")) @[imm_gen.scala 30:37]
    node _imm11_T_7 = bits(io.inst, 7, 7) @[imm_gen.scala 30:55]
    node _imm11_T_8 = asSInt(_imm11_T_7) @[imm_gen.scala 30:59]
    node _imm11_T_9 = mux(_imm11_T_6, _imm11_T_8, sign_val) @[imm_gen.scala 30:25]
    node _imm11_T_10 = mux(_imm11_T_3, _imm11_T_5, _imm11_T_9) @[imm_gen.scala 29:23]
    node imm11 = mux(_imm11_T_2, asSInt(UInt<1>("h0")), _imm11_T_10) @[imm_gen.scala 28:21]
    node _imm10_5_T = eq(io.imm_sel, UInt<3>("h3")) @[imm_gen.scala 31:33]
    node _imm10_5_T_1 = eq(io.imm_sel, UInt<3>("h6")) @[imm_gen.scala 31:57]
    node _imm10_5_T_2 = or(_imm10_5_T, _imm10_5_T_1) @[imm_gen.scala 31:43]
    node _imm10_5_T_3 = bits(io.inst, 30, 25) @[imm_gen.scala 31:80]
    node imm10_5 = mux(_imm10_5_T_2, UInt<1>("h0"), _imm10_5_T_3) @[imm_gen.scala 31:21]
    node _imm4_1_T = eq(io.imm_sel, UInt<3>("h3")) @[imm_gen.scala 32:33]
    node _imm4_1_T_1 = eq(io.imm_sel, UInt<3>("h2")) @[imm_gen.scala 33:35]
    node _imm4_1_T_2 = eq(io.imm_sel, UInt<3>("h5")) @[imm_gen.scala 33:59]
    node _imm4_1_T_3 = or(_imm4_1_T_1, _imm4_1_T_2) @[imm_gen.scala 33:45]
    node _imm4_1_T_4 = bits(io.inst, 11, 8) @[imm_gen.scala 33:77]
    node _imm4_1_T_5 = eq(io.imm_sel, UInt<3>("h6")) @[imm_gen.scala 34:37]
    node _imm4_1_T_6 = bits(io.inst, 19, 16) @[imm_gen.scala 34:55]
    node _imm4_1_T_7 = bits(io.inst, 24, 21) @[imm_gen.scala 34:71]
    node _imm4_1_T_8 = mux(_imm4_1_T_5, _imm4_1_T_6, _imm4_1_T_7) @[imm_gen.scala 34:25]
    node _imm4_1_T_9 = mux(_imm4_1_T_3, _imm4_1_T_4, _imm4_1_T_8) @[imm_gen.scala 33:23]
    node imm4_1 = mux(_imm4_1_T, UInt<1>("h0"), _imm4_1_T_9) @[imm_gen.scala 32:21]
    node _imm0_T = eq(io.imm_sel, UInt<3>("h2")) @[imm_gen.scala 35:33]
    node _imm0_T_1 = bits(io.inst, 7, 7) @[imm_gen.scala 35:51]
    node _imm0_T_2 = eq(io.imm_sel, UInt<3>("h1")) @[imm_gen.scala 36:35]
    node _imm0_T_3 = bits(io.inst, 20, 20) @[imm_gen.scala 36:53]
    node _imm0_T_4 = eq(io.imm_sel, UInt<3>("h6")) @[imm_gen.scala 37:36]
    node _imm0_T_5 = bits(io.inst, 15, 15) @[imm_gen.scala 37:54]
    node _imm0_T_6 = mux(_imm0_T_4, _imm0_T_5, UInt<1>("h0")) @[imm_gen.scala 37:24]
    node _imm0_T_7 = mux(_imm0_T_2, _imm0_T_3, _imm0_T_6) @[imm_gen.scala 36:23]
    node imm0 = mux(_imm0_T, _imm0_T_1, _imm0_T_7) @[imm_gen.scala 35:21]
    node io_imm_out_lo_hi = cat(imm10_5, imm4_1) @[Cat.scala 33:92]
    node io_imm_out_lo = cat(io_imm_out_lo_hi, imm0) @[Cat.scala 33:92]
    node io_imm_out_hi_lo_lo = asUInt(imm11) @[Cat.scala 33:92]
    node io_imm_out_hi_lo_hi = asUInt(imm19_12) @[Cat.scala 33:92]
    node io_imm_out_hi_lo = cat(io_imm_out_hi_lo_hi, io_imm_out_hi_lo_lo) @[Cat.scala 33:92]
    node io_imm_out_hi_hi_lo = asUInt(imm30_20) @[Cat.scala 33:92]
    node io_imm_out_hi_hi_hi = asUInt(sign_val) @[Cat.scala 33:92]
    node io_imm_out_hi_hi = cat(io_imm_out_hi_hi_hi, io_imm_out_hi_hi_lo) @[Cat.scala 33:92]
    node io_imm_out_hi = cat(io_imm_out_hi_hi, io_imm_out_hi_lo) @[Cat.scala 33:92]
    node _io_imm_out_T = cat(io_imm_out_hi, io_imm_out_lo) @[Cat.scala 33:92]
    node _io_imm_out_T_1 = asSInt(_io_imm_out_T) @[imm_gen.scala 39:81]
    node _io_imm_out_T_2 = asUInt(_io_imm_out_T_1) @[imm_gen.scala 39:88]
    io.imm_out <= _io_imm_out_T_2 @[imm_gen.scala 39:14]

  module Branch :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : UInt<32>, flip in_b : UInt<32>, flip br_type : UInt<3>, br_taken : UInt<1>}

    node _difference_T = sub(io.in_a, io.in_b) @[branch.scala 24:33]
    node difference = tail(_difference_T, 1) @[branch.scala 24:33]
    node not_equal = orr(difference) @[branch.scala 25:36]
    node equal = eq(not_equal, UInt<1>("h0")) @[branch.scala 26:25]
    node _is_same_sign_T = bits(io.in_a, 31, 31) @[branch.scala 27:32]
    node _is_same_sign_T_1 = bits(io.in_b, 31, 31) @[branch.scala 27:52]
    node is_same_sign = eq(_is_same_sign_T, _is_same_sign_T_1) @[branch.scala 27:41]
    node _less_than_T = bits(difference, 31, 31) @[branch.scala 28:53]
    node _less_than_T_1 = bits(io.in_a, 31, 31) @[branch.scala 28:70]
    node less_than = mux(is_same_sign, _less_than_T, _less_than_T_1) @[branch.scala 28:28]
    node _less_than_u_T = bits(difference, 31, 31) @[branch.scala 29:53]
    node _less_than_u_T_1 = bits(io.in_b, 31, 31) @[branch.scala 29:70]
    node less_than_u = mux(is_same_sign, _less_than_u_T, _less_than_u_T_1) @[branch.scala 29:28]
    node greater_equal = eq(less_than, UInt<1>("h0")) @[branch.scala 30:25]
    node greater_equal_u = eq(less_than_u, UInt<1>("h0")) @[branch.scala 31:25]
    node _io_br_taken_T = eq(io.br_type, UInt<3>("h3")) @[branch.scala 35:18]
    node _io_br_taken_T_1 = and(_io_br_taken_T, equal) @[branch.scala 35:30]
    node _io_br_taken_T_2 = eq(io.br_type, UInt<3>("h6")) @[branch.scala 36:18]
    node _io_br_taken_T_3 = and(_io_br_taken_T_2, not_equal) @[branch.scala 36:30]
    node _io_br_taken_T_4 = or(_io_br_taken_T_1, _io_br_taken_T_3) @[branch.scala 35:40]
    node _io_br_taken_T_5 = eq(io.br_type, UInt<3>("h2")) @[branch.scala 37:18]
    node _io_br_taken_T_6 = and(_io_br_taken_T_5, less_than) @[branch.scala 37:30]
    node _io_br_taken_T_7 = or(_io_br_taken_T_4, _io_br_taken_T_6) @[branch.scala 36:44]
    node _io_br_taken_T_8 = eq(io.br_type, UInt<3>("h5")) @[branch.scala 38:18]
    node _io_br_taken_T_9 = and(_io_br_taken_T_8, greater_equal) @[branch.scala 38:30]
    node _io_br_taken_T_10 = or(_io_br_taken_T_7, _io_br_taken_T_9) @[branch.scala 37:44]
    node _io_br_taken_T_11 = eq(io.br_type, UInt<3>("h1")) @[branch.scala 39:18]
    node _io_br_taken_T_12 = and(_io_br_taken_T_11, less_than_u) @[branch.scala 39:30]
    node _io_br_taken_T_13 = or(_io_br_taken_T_10, _io_br_taken_T_12) @[branch.scala 38:48]
    node _io_br_taken_T_14 = eq(io.br_type, UInt<3>("h4")) @[branch.scala 40:18]
    node _io_br_taken_T_15 = and(_io_br_taken_T_14, greater_equal_u) @[branch.scala 40:30]
    node _io_br_taken_T_16 = or(_io_br_taken_T_13, _io_br_taken_T_15) @[branch.scala 39:46]
    io.br_taken <= _io_br_taken_T_16 @[branch.scala 34:15]

  module LS_Unit :
    input clock : Clock
    input reset : Reset
    output io : { flip lsu_st_type : UInt<2>, flip lsu_wdata_in : UInt<32>, lsu_wdata_out : UInt<32>, flip lsu_rdata_in : UInt<32>, lsu_rdata_out : SInt<32>, flip lsu_ld_type : UInt<3>}

    node _io_lsu_wdata_out_T = bits(io.lsu_wdata_in, 15, 0) @[ls_unit.scala 34:31]
    node _io_lsu_wdata_out_T_1 = bits(io.lsu_wdata_in, 7, 0) @[ls_unit.scala 35:31]
    node _io_lsu_wdata_out_T_2 = eq(UInt<2>("h1"), io.lsu_st_type) @[Mux.scala 81:61]
    node _io_lsu_wdata_out_T_3 = mux(_io_lsu_wdata_out_T_2, io.lsu_wdata_in, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_lsu_wdata_out_T_4 = eq(UInt<2>("h2"), io.lsu_st_type) @[Mux.scala 81:61]
    node _io_lsu_wdata_out_T_5 = mux(_io_lsu_wdata_out_T_4, _io_lsu_wdata_out_T, _io_lsu_wdata_out_T_3) @[Mux.scala 81:58]
    node _io_lsu_wdata_out_T_6 = eq(UInt<2>("h3"), io.lsu_st_type) @[Mux.scala 81:61]
    node _io_lsu_wdata_out_T_7 = mux(_io_lsu_wdata_out_T_6, _io_lsu_wdata_out_T_1, _io_lsu_wdata_out_T_5) @[Mux.scala 81:58]
    io.lsu_wdata_out <= _io_lsu_wdata_out_T_7 @[ls_unit.scala 32:20]
    node _io_lsu_rdata_out_T = cvt(io.lsu_rdata_in) @[ls_unit.scala 40:29]
    node _io_lsu_rdata_out_T_1 = bits(io.lsu_rdata_in, 15, 0) @[ls_unit.scala 41:28]
    node _io_lsu_rdata_out_T_2 = asSInt(_io_lsu_rdata_out_T_1) @[ls_unit.scala 41:36]
    node _io_lsu_rdata_out_T_3 = bits(io.lsu_rdata_in, 7, 0) @[ls_unit.scala 42:28]
    node _io_lsu_rdata_out_T_4 = asSInt(_io_lsu_rdata_out_T_3) @[ls_unit.scala 42:35]
    node _io_lsu_rdata_out_T_5 = bits(io.lsu_rdata_in, 15, 0) @[ls_unit.scala 43:28]
    node _io_lsu_rdata_out_T_6 = cvt(_io_lsu_rdata_out_T_5) @[ls_unit.scala 43:36]
    node _io_lsu_rdata_out_T_7 = bits(io.lsu_rdata_in, 7, 0) @[ls_unit.scala 44:28]
    node _io_lsu_rdata_out_T_8 = cvt(_io_lsu_rdata_out_T_7) @[ls_unit.scala 44:35]
    node _io_lsu_rdata_out_T_9 = eq(UInt<3>("h1"), io.lsu_ld_type) @[Mux.scala 81:61]
    node _io_lsu_rdata_out_T_10 = mux(_io_lsu_rdata_out_T_9, _io_lsu_rdata_out_T, asSInt(UInt<1>("h0"))) @[Mux.scala 81:58]
    node _io_lsu_rdata_out_T_11 = eq(UInt<3>("h2"), io.lsu_ld_type) @[Mux.scala 81:61]
    node _io_lsu_rdata_out_T_12 = mux(_io_lsu_rdata_out_T_11, _io_lsu_rdata_out_T_2, _io_lsu_rdata_out_T_10) @[Mux.scala 81:58]
    node _io_lsu_rdata_out_T_13 = eq(UInt<3>("h3"), io.lsu_ld_type) @[Mux.scala 81:61]
    node _io_lsu_rdata_out_T_14 = mux(_io_lsu_rdata_out_T_13, _io_lsu_rdata_out_T_4, _io_lsu_rdata_out_T_12) @[Mux.scala 81:58]
    node _io_lsu_rdata_out_T_15 = eq(UInt<3>("h4"), io.lsu_ld_type) @[Mux.scala 81:61]
    node _io_lsu_rdata_out_T_16 = mux(_io_lsu_rdata_out_T_15, _io_lsu_rdata_out_T_6, _io_lsu_rdata_out_T_14) @[Mux.scala 81:58]
    node _io_lsu_rdata_out_T_17 = eq(UInt<3>("h5"), io.lsu_ld_type) @[Mux.scala 81:61]
    node _io_lsu_rdata_out_T_18 = mux(_io_lsu_rdata_out_T_17, _io_lsu_rdata_out_T_8, _io_lsu_rdata_out_T_16) @[Mux.scala 81:58]
    io.lsu_rdata_out <= _io_lsu_rdata_out_T_18 @[ls_unit.scala 39:21]

  module Datapath :
    input clock : Clock
    input reset : Reset
    output io : { irq : { flip uart_irq : UInt<1>, flip spi_irq : UInt<1>, flip m1_irq : UInt<1>, flip m2_irq : UInt<1>, flip m3_irq : UInt<1>}, flip ibus : { flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, flip dbus : { flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}, flip ctrl : { flip inst : UInt<32>, pc_sel : UInt<2>, inst_kill : UInt<1>, a_sel : UInt<1>, b_sel : UInt<1>, imm_sel : UInt<3>, alu_op : UInt<5>, br_type : UInt<3>, st_type : UInt<2>, ld_type : UInt<3>, wb_mux_sel : UInt<2>, wb_en : UInt<1>, csr_cmd : UInt<3>, illegal : UInt<1>, en_rs1 : UInt<1>, en_rs2 : UInt<1>}}

    inst csr of CSR @[pipeline.scala 34:26]
    csr.clock <= clock
    csr.reset <= reset
    inst reg_file of RegFile @[pipeline.scala 35:26]
    reg_file.clock <= clock
    reg_file.reset <= reset
    inst alu of ALU @[pipeline.scala 36:26]
    alu.clock <= clock
    alu.reset <= reset
    inst gen_imm of Imm @[pipeline.scala 37:26]
    gen_imm.clock <= clock
    gen_imm.reset <= reset
    inst cond_br of Branch @[pipeline.scala 38:26]
    cond_br.clock <= clock
    cond_br.reset <= reset
    reg fet_exe_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[pipeline.scala 42:30]
    reg fet_exe_pc : UInt, clock with :
      reset => (UInt<1>("h0"), fet_exe_pc) @[pipeline.scala 43:26]
    reg exe_wb_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[pipeline.scala 46:33]
    reg exe_wb_pc : UInt, clock with :
      reset => (UInt<1>("h0"), exe_wb_pc) @[pipeline.scala 47:29]
    reg exe_wb_alu : UInt, clock with :
      reset => (UInt<1>("h0"), exe_wb_alu) @[pipeline.scala 48:29]
    reg csr_in : UInt, clock with :
      reset => (UInt<1>("h0"), csr_in) @[pipeline.scala 49:29]
    reg ctrl_st_type : UInt<2>, clock with :
      reset => (UInt<1>("h0"), ctrl_st_type) @[pipeline.scala 52:29]
    reg ctrl_ld_type : UInt<3>, clock with :
      reset => (UInt<1>("h0"), ctrl_ld_type) @[pipeline.scala 53:29]
    reg ctrl_wb_mux_sel : UInt<2>, clock with :
      reset => (UInt<1>("h0"), ctrl_wb_mux_sel) @[pipeline.scala 54:29]
    reg ctrl_wb_en : UInt<1>, clock with :
      reset => (UInt<1>("h0"), ctrl_wb_en) @[pipeline.scala 55:29]
    reg ctrl_csr_cmd : UInt<3>, clock with :
      reset => (UInt<1>("h0"), ctrl_csr_cmd) @[pipeline.scala 56:29]
    reg ctrl_illegal : UInt<1>, clock with :
      reset => (UInt<1>("h0"), ctrl_illegal) @[pipeline.scala 57:29]
    reg ctrl_pc_check : UInt<1>, clock with :
      reset => (UInt<1>("h0"), ctrl_pc_check) @[pipeline.scala 58:29]
    node _notstarted_T = asUInt(reset) @[pipeline.scala 61:34]
    reg notstarted : UInt<1>, clock with :
      reset => (UInt<1>("h0"), notstarted) @[pipeline.scala 61:27]
    notstarted <= _notstarted_T @[pipeline.scala 61:27]
    wire stall : UInt<1>
    stall <= UInt<1>("h0")
    node _pc_T = sub(UInt<32>("h7000"), UInt<32>("h4")) @[pipeline.scala 64:57]
    node _pc_T_1 = tail(_pc_T, 1) @[pipeline.scala 64:57]
    reg pc : UInt, clock with :
      reset => (reset, _pc_T_1) @[pipeline.scala 64:27]
    wire npc : UInt<32>
    npc <= UInt<32>("h0")
    node _npc_T = eq(io.ibus.valid, UInt<1>("h0")) @[pipeline.scala 66:33]
    node _npc_T_1 = or(stall, _npc_T) @[pipeline.scala 66:30]
    node _npc_T_2 = eq(io.ctrl.pc_sel, UInt<2>("h3")) @[pipeline.scala 67:39]
    node _npc_T_3 = eq(io.ctrl.pc_sel, UInt<2>("h1")) @[pipeline.scala 68:39]
    node _npc_T_4 = or(_npc_T_3, cond_br.io.br_taken) @[pipeline.scala 68:50]
    node _npc_T_5 = dshr(alu.io.sum, UInt<1>("h1")) @[pipeline.scala 68:85]
    node _npc_T_6 = dshl(_npc_T_5, UInt<1>("h1")) @[pipeline.scala 68:92]
    node _npc_T_7 = eq(io.ctrl.pc_sel, UInt<2>("h2")) @[pipeline.scala 69:39]
    node _npc_T_8 = add(pc, UInt<3>("h4")) @[pipeline.scala 69:56]
    node _npc_T_9 = tail(_npc_T_8, 1) @[pipeline.scala 69:56]
    node _npc_T_10 = mux(_npc_T_7, pc, _npc_T_9) @[pipeline.scala 69:23]
    node _npc_T_11 = mux(_npc_T_4, _npc_T_6, _npc_T_10) @[pipeline.scala 68:23]
    node _npc_T_12 = mux(_npc_T_2, csr.io.epc, _npc_T_11) @[pipeline.scala 67:23]
    node _npc_T_13 = mux(csr.io.expt, csr.io.evec, _npc_T_12) @[pipeline.scala 66:57]
    node _npc_T_14 = mux(_npc_T_1, pc, _npc_T_13) @[pipeline.scala 66:23]
    npc <= _npc_T_14 @[pipeline.scala 66:17]
    node _inst_T = or(notstarted, io.ctrl.inst_kill) @[pipeline.scala 72:35]
    node _inst_T_1 = or(_inst_T, cond_br.io.br_taken) @[pipeline.scala 72:56]
    node _inst_T_2 = or(_inst_T_1, csr.io.expt) @[pipeline.scala 72:79]
    node _inst_T_3 = eq(io.ibus.valid, UInt<1>("h0")) @[pipeline.scala 72:97]
    node _inst_T_4 = or(_inst_T_2, _inst_T_3) @[pipeline.scala 72:94]
    node inst = mux(_inst_T_4, UInt<32>("h13"), io.ibus.inst) @[pipeline.scala 72:23]
    pc <= npc @[pipeline.scala 74:18]
    io.ibus.addr <= npc @[pipeline.scala 75:18]
    node _T = eq(stall, UInt<1>("h0")) @[pipeline.scala 80:9]
    when _T : @[pipeline.scala 80:17]
      node _fet_exe_pc_T = or(io.ctrl.inst_kill, cond_br.io.br_taken) @[pipeline.scala 81:45]
      node _fet_exe_pc_T_1 = or(_fet_exe_pc_T, csr.io.expt) @[pipeline.scala 81:68]
      node _fet_exe_pc_T_2 = mux(_fet_exe_pc_T_1, fet_exe_pc, pc) @[pipeline.scala 81:25]
      fet_exe_pc <= _fet_exe_pc_T_2 @[pipeline.scala 81:19]
      fet_exe_inst <= inst @[pipeline.scala 82:19]
    io.ctrl.inst <= fet_exe_inst @[pipeline.scala 87:22]
    node rd_addr = bits(fet_exe_inst, 11, 7) @[pipeline.scala 90:37]
    node rs1_addr = bits(fet_exe_inst, 19, 15) @[pipeline.scala 91:37]
    node rs2_addr = bits(fet_exe_inst, 24, 20) @[pipeline.scala 92:37]
    reg_file.io.raddr_1 <= rs1_addr @[pipeline.scala 93:23]
    reg_file.io.raddr_2 <= rs2_addr @[pipeline.scala 94:23]
    gen_imm.io.inst <= fet_exe_inst @[pipeline.scala 97:22]
    gen_imm.io.imm_sel <= io.ctrl.imm_sel @[pipeline.scala 98:26]
    node wrbk_rd_addr = bits(exe_wb_inst, 11, 7) @[pipeline.scala 102:35]
    node _rs1hazard_T = orr(rs1_addr) @[pipeline.scala 103:47]
    node _rs1hazard_T_1 = and(ctrl_wb_en, _rs1hazard_T) @[pipeline.scala 103:35]
    node _rs1hazard_T_2 = eq(rs1_addr, wrbk_rd_addr) @[pipeline.scala 103:64]
    node rs1hazard = and(_rs1hazard_T_1, _rs1hazard_T_2) @[pipeline.scala 103:51]
    node _rs2hazard_T = orr(rs2_addr) @[pipeline.scala 104:47]
    node _rs2hazard_T_1 = and(ctrl_wb_en, _rs2hazard_T) @[pipeline.scala 104:35]
    node _rs2hazard_T_2 = eq(rs2_addr, wrbk_rd_addr) @[pipeline.scala 104:64]
    node rs2hazard = and(_rs2hazard_T_1, _rs2hazard_T_2) @[pipeline.scala 104:51]
    node _rs1_T = eq(ctrl_wb_mux_sel, UInt<2>("h0")) @[pipeline.scala 107:44]
    node _rs1_T_1 = and(_rs1_T, rs1hazard) @[pipeline.scala 107:55]
    node rs1 = mux(_rs1_T_1, exe_wb_alu, reg_file.io.rdata_1) @[pipeline.scala 107:27]
    node _rs2_T = eq(ctrl_wb_mux_sel, UInt<2>("h0")) @[pipeline.scala 108:44]
    node _rs2_T_1 = and(_rs2_T, rs2hazard) @[pipeline.scala 108:55]
    node rs2 = mux(_rs2_T_1, exe_wb_alu, reg_file.io.rdata_2) @[pipeline.scala 108:27]
    wire hazard_stall : UInt<1>
    hazard_stall <= UInt<1>("h0")
    node _hazard_stall_T = orr(ctrl_ld_type) @[pipeline.scala 113:39]
    node _hazard_stall_T_1 = neq(ctrl_csr_cmd, UInt<3>("h0")) @[pipeline.scala 113:59]
    node _hazard_stall_T_2 = or(_hazard_stall_T, _hazard_stall_T_1) @[pipeline.scala 113:43]
    node _hazard_stall_T_3 = and(io.ctrl.en_rs1, rs1hazard) @[pipeline.scala 113:90]
    node _hazard_stall_T_4 = and(io.ctrl.en_rs2, rs2hazard) @[pipeline.scala 113:123]
    node _hazard_stall_T_5 = or(_hazard_stall_T_3, _hazard_stall_T_4) @[pipeline.scala 113:104]
    node _hazard_stall_T_6 = and(_hazard_stall_T_2, _hazard_stall_T_5) @[pipeline.scala 113:70]
    hazard_stall <= _hazard_stall_T_6 @[pipeline.scala 113:22]
    node _is_load_store_T = orr(ctrl_ld_type) @[pipeline.scala 117:37]
    node _is_load_store_T_1 = orr(ctrl_st_type) @[pipeline.scala 117:57]
    node is_load_store = or(_is_load_store_T, _is_load_store_T_1) @[pipeline.scala 117:41]
    wire dmem_stall : UInt<1>
    dmem_stall <= UInt<1>("h0")
    node _dmem_stall_T = and(io.dbus.valid, is_load_store) @[pipeline.scala 119:42]
    node _dmem_stall_T_1 = eq(is_load_store, UInt<1>("h0")) @[pipeline.scala 119:63]
    node _dmem_stall_T_2 = or(_dmem_stall_T, _dmem_stall_T_1) @[pipeline.scala 119:60]
    node _dmem_stall_T_3 = eq(_dmem_stall_T_2, UInt<1>("h0")) @[pipeline.scala 119:25]
    dmem_stall <= _dmem_stall_T_3 @[pipeline.scala 119:22]
    node _stall_T = or(hazard_stall, dmem_stall) @[pipeline.scala 120:38]
    stall <= _stall_T @[pipeline.scala 120:22]
    node _io_dbus_wr_en_T = orr(UInt<2>("h0")) @[pipeline.scala 123:50]
    node _io_dbus_wr_en_T_1 = orr(io.ctrl.st_type) @[pipeline.scala 123:71]
    node _io_dbus_wr_en_T_2 = mux(hazard_stall, _io_dbus_wr_en_T, _io_dbus_wr_en_T_1) @[pipeline.scala 123:28]
    io.dbus.wr_en <= _io_dbus_wr_en_T_2 @[pipeline.scala 123:22]
    io.dbus.st_type <= io.ctrl.st_type @[pipeline.scala 124:22]
    node _alu_io_in_a_T = eq(io.ctrl.a_sel, UInt<1>("h1")) @[pipeline.scala 127:43]
    node _alu_io_in_a_T_1 = mux(_alu_io_in_a_T, rs1, fet_exe_pc) @[pipeline.scala 127:28]
    alu.io.in_a <= _alu_io_in_a_T_1 @[pipeline.scala 127:22]
    node _alu_io_in_b_T = eq(io.ctrl.b_sel, UInt<1>("h1")) @[pipeline.scala 128:43]
    node _alu_io_in_b_T_1 = mux(_alu_io_in_b_T, rs2, gen_imm.io.imm_out) @[pipeline.scala 128:28]
    alu.io.in_b <= _alu_io_in_b_T_1 @[pipeline.scala 128:22]
    alu.io.alu_op <= io.ctrl.alu_op @[pipeline.scala 129:22]
    cond_br.io.in_a <= rs1 @[pipeline.scala 132:23]
    cond_br.io.in_b <= rs2 @[pipeline.scala 133:23]
    cond_br.io.br_type <= io.ctrl.br_type @[pipeline.scala 134:22]
    inst lsu of LS_Unit @[pipeline.scala 137:19]
    lsu.clock <= clock
    lsu.reset <= reset
    lsu.io.lsu_st_type <= io.ctrl.st_type @[pipeline.scala 140:23]
    lsu.io.lsu_wdata_in <= rs2 @[pipeline.scala 141:23]
    io.dbus.wdata <= lsu.io.lsu_wdata_out @[pipeline.scala 142:23]
    node _io_dbus_rd_en_T = orr(io.ctrl.ld_type) @[pipeline.scala 145:42]
    io.dbus.rd_en <= _io_dbus_rd_en_T @[pipeline.scala 145:23]
    io.dbus.ld_type <= io.ctrl.ld_type @[pipeline.scala 146:23]
    lsu.io.lsu_ld_type <= ctrl_ld_type @[pipeline.scala 147:23]
    lsu.io.lsu_rdata_in <= io.dbus.rdata @[pipeline.scala 148:23]
    io.dbus.addr <= alu.io.sum @[pipeline.scala 152:23]
    node _T_1 = asUInt(reset) @[pipeline.scala 157:14]
    node _T_2 = eq(stall, UInt<1>("h0")) @[pipeline.scala 157:24]
    node _T_3 = and(_T_2, csr.io.expt) @[pipeline.scala 157:31]
    node _T_4 = or(_T_1, _T_3) @[pipeline.scala 157:21]
    when _T_4 : @[pipeline.scala 157:47]
      ctrl_st_type <= UInt<1>("h0") @[pipeline.scala 158:23]
      ctrl_ld_type <= UInt<1>("h0") @[pipeline.scala 159:23]
      ctrl_wb_en <= UInt<1>("h0") @[pipeline.scala 160:23]
      ctrl_csr_cmd <= UInt<1>("h0") @[pipeline.scala 161:23]
      ctrl_illegal <= UInt<1>("h0") @[pipeline.scala 162:23]
      ctrl_pc_check <= UInt<1>("h0") @[pipeline.scala 163:23]
    else :
      node _T_5 = eq(stall, UInt<1>("h0")) @[pipeline.scala 164:14]
      node _T_6 = eq(csr.io.expt, UInt<1>("h0")) @[pipeline.scala 164:24]
      node _T_7 = and(_T_5, _T_6) @[pipeline.scala 164:21]
      when _T_7 : @[pipeline.scala 164:38]
        exe_wb_pc <= fet_exe_pc @[pipeline.scala 166:23]
        exe_wb_inst <= fet_exe_inst @[pipeline.scala 167:23]
        exe_wb_alu <= alu.io.out @[pipeline.scala 168:23]
        node _csr_in_T = eq(io.ctrl.imm_sel, UInt<3>("h6")) @[pipeline.scala 170:46]
        node _csr_in_T_1 = mux(_csr_in_T, gen_imm.io.imm_out, rs1) @[pipeline.scala 170:29]
        csr_in <= _csr_in_T_1 @[pipeline.scala 170:23]
        ctrl_st_type <= io.ctrl.st_type @[pipeline.scala 171:23]
        ctrl_ld_type <= io.ctrl.ld_type @[pipeline.scala 172:23]
        ctrl_wb_mux_sel <= io.ctrl.wb_mux_sel @[pipeline.scala 173:23]
        ctrl_wb_en <= io.ctrl.wb_en @[pipeline.scala 174:23]
        ctrl_csr_cmd <= io.ctrl.csr_cmd @[pipeline.scala 175:23]
        ctrl_illegal <= io.ctrl.illegal @[pipeline.scala 176:23]
        node _ctrl_pc_check_T = eq(io.ctrl.pc_sel, UInt<2>("h1")) @[pipeline.scala 177:41]
        ctrl_pc_check <= _ctrl_pc_check_T @[pipeline.scala 177:23]
      else :
        when hazard_stall : @[pipeline.scala 178:28]
          ctrl_st_type <= UInt<2>("h0") @[pipeline.scala 182:23]
          ctrl_ld_type <= UInt<3>("h0") @[pipeline.scala 183:23]
          ctrl_wb_en <= UInt<1>("h0") @[pipeline.scala 184:23]
          ctrl_csr_cmd <= UInt<3>("h0") @[pipeline.scala 185:23]
    csr.io.stall <= stall @[pipeline.scala 190:20]
    csr.io.in <= csr_in @[pipeline.scala 191:20]
    csr.io.cmd <= ctrl_csr_cmd @[pipeline.scala 192:20]
    csr.io.inst <= exe_wb_inst @[pipeline.scala 193:20]
    csr.io.pc <= exe_wb_pc @[pipeline.scala 194:20]
    csr.io.addr <= exe_wb_alu @[pipeline.scala 195:20]
    csr.io.illegal <= ctrl_illegal @[pipeline.scala 196:20]
    csr.io.pc_check <= ctrl_pc_check @[pipeline.scala 197:20]
    csr.io.ld_type <= ctrl_ld_type @[pipeline.scala 198:20]
    csr.io.st_type <= ctrl_st_type @[pipeline.scala 199:20]
    csr.io.br_taken <= cond_br.io.br_taken @[pipeline.scala 200:20]
    csr.io.irq.m3_irq <= io.irq.m3_irq @[pipeline.scala 203:20]
    csr.io.irq.m2_irq <= io.irq.m2_irq @[pipeline.scala 203:20]
    csr.io.irq.m1_irq <= io.irq.m1_irq @[pipeline.scala 203:20]
    csr.io.irq.spi_irq <= io.irq.spi_irq @[pipeline.scala 203:20]
    csr.io.irq.uart_irq <= io.irq.uart_irq @[pipeline.scala 203:20]
    node _reg_file_wdata_T = cvt(exe_wb_alu) @[pipeline.scala 208:62]
    node _reg_file_wdata_T_1 = add(exe_wb_pc, UInt<3>("h4")) @[pipeline.scala 210:54]
    node _reg_file_wdata_T_2 = tail(_reg_file_wdata_T_1, 1) @[pipeline.scala 210:54]
    node _reg_file_wdata_T_3 = cvt(_reg_file_wdata_T_2) @[pipeline.scala 210:61]
    node _reg_file_wdata_T_4 = cvt(csr.io.out) @[pipeline.scala 211:54]
    node _reg_file_wdata_T_5 = eq(UInt<2>("h1"), ctrl_wb_mux_sel) @[Mux.scala 81:61]
    node _reg_file_wdata_T_6 = mux(_reg_file_wdata_T_5, lsu.io.lsu_rdata_out, _reg_file_wdata_T) @[Mux.scala 81:58]
    node _reg_file_wdata_T_7 = eq(UInt<2>("h2"), ctrl_wb_mux_sel) @[Mux.scala 81:61]
    node _reg_file_wdata_T_8 = mux(_reg_file_wdata_T_7, _reg_file_wdata_T_3, _reg_file_wdata_T_6) @[Mux.scala 81:58]
    node _reg_file_wdata_T_9 = eq(UInt<2>("h3"), ctrl_wb_mux_sel) @[Mux.scala 81:61]
    node _reg_file_wdata_T_10 = mux(_reg_file_wdata_T_9, _reg_file_wdata_T_4, _reg_file_wdata_T_8) @[Mux.scala 81:58]
    node reg_file_wdata = asUInt(_reg_file_wdata_T_10) @[pipeline.scala 211:62]
    node _reg_file_io_wen_T = eq(csr.io.expt, UInt<1>("h0")) @[pipeline.scala 213:39]
    node _reg_file_io_wen_T_1 = and(ctrl_wb_en, _reg_file_io_wen_T) @[pipeline.scala 213:36]
    reg_file.io.wen <= _reg_file_io_wen_T_1 @[pipeline.scala 213:22]
    reg_file.io.waddr <= wrbk_rd_addr @[pipeline.scala 214:22]
    reg_file.io.wdata <= reg_file_wdata @[pipeline.scala 215:22]

  module Control :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, pc_sel : UInt<2>, inst_kill : UInt<1>, a_sel : UInt<1>, b_sel : UInt<1>, imm_sel : UInt<3>, alu_op : UInt<5>, br_type : UInt<3>, st_type : UInt<2>, ld_type : UInt<3>, wb_mux_sel : UInt<2>, wb_en : UInt<1>, csr_cmd : UInt<3>, illegal : UInt<1>, en_rs1 : UInt<1>, en_rs2 : UInt<1>}

    node _ctrlSignals_T = and(io.inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_1 = eq(UInt<6>("h37"), _ctrlSignals_T) @[Lookup.scala 31:38]
    node _ctrlSignals_T_2 = and(io.inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_3 = eq(UInt<5>("h17"), _ctrlSignals_T_2) @[Lookup.scala 31:38]
    node _ctrlSignals_T_4 = and(io.inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_5 = eq(UInt<7>("h6f"), _ctrlSignals_T_4) @[Lookup.scala 31:38]
    node _ctrlSignals_T_6 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_7 = eq(UInt<7>("h67"), _ctrlSignals_T_6) @[Lookup.scala 31:38]
    node _ctrlSignals_T_8 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_9 = eq(UInt<7>("h63"), _ctrlSignals_T_8) @[Lookup.scala 31:38]
    node _ctrlSignals_T_10 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_11 = eq(UInt<13>("h1063"), _ctrlSignals_T_10) @[Lookup.scala 31:38]
    node _ctrlSignals_T_12 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_13 = eq(UInt<15>("h4063"), _ctrlSignals_T_12) @[Lookup.scala 31:38]
    node _ctrlSignals_T_14 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_15 = eq(UInt<15>("h5063"), _ctrlSignals_T_14) @[Lookup.scala 31:38]
    node _ctrlSignals_T_16 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_17 = eq(UInt<15>("h6063"), _ctrlSignals_T_16) @[Lookup.scala 31:38]
    node _ctrlSignals_T_18 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_19 = eq(UInt<15>("h7063"), _ctrlSignals_T_18) @[Lookup.scala 31:38]
    node _ctrlSignals_T_20 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_21 = eq(UInt<2>("h3"), _ctrlSignals_T_20) @[Lookup.scala 31:38]
    node _ctrlSignals_T_22 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_23 = eq(UInt<13>("h1003"), _ctrlSignals_T_22) @[Lookup.scala 31:38]
    node _ctrlSignals_T_24 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_25 = eq(UInt<14>("h2003"), _ctrlSignals_T_24) @[Lookup.scala 31:38]
    node _ctrlSignals_T_26 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_27 = eq(UInt<15>("h4003"), _ctrlSignals_T_26) @[Lookup.scala 31:38]
    node _ctrlSignals_T_28 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_29 = eq(UInt<15>("h5003"), _ctrlSignals_T_28) @[Lookup.scala 31:38]
    node _ctrlSignals_T_30 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_31 = eq(UInt<6>("h23"), _ctrlSignals_T_30) @[Lookup.scala 31:38]
    node _ctrlSignals_T_32 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_33 = eq(UInt<13>("h1023"), _ctrlSignals_T_32) @[Lookup.scala 31:38]
    node _ctrlSignals_T_34 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_35 = eq(UInt<14>("h2023"), _ctrlSignals_T_34) @[Lookup.scala 31:38]
    node _ctrlSignals_T_36 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_37 = eq(UInt<5>("h13"), _ctrlSignals_T_36) @[Lookup.scala 31:38]
    node _ctrlSignals_T_38 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_39 = eq(UInt<14>("h2013"), _ctrlSignals_T_38) @[Lookup.scala 31:38]
    node _ctrlSignals_T_40 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_41 = eq(UInt<14>("h3013"), _ctrlSignals_T_40) @[Lookup.scala 31:38]
    node _ctrlSignals_T_42 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_43 = eq(UInt<15>("h4013"), _ctrlSignals_T_42) @[Lookup.scala 31:38]
    node _ctrlSignals_T_44 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_45 = eq(UInt<15>("h6013"), _ctrlSignals_T_44) @[Lookup.scala 31:38]
    node _ctrlSignals_T_46 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_47 = eq(UInt<15>("h7013"), _ctrlSignals_T_46) @[Lookup.scala 31:38]
    node _ctrlSignals_T_48 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_49 = eq(UInt<13>("h1013"), _ctrlSignals_T_48) @[Lookup.scala 31:38]
    node _ctrlSignals_T_50 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_51 = eq(UInt<15>("h5013"), _ctrlSignals_T_50) @[Lookup.scala 31:38]
    node _ctrlSignals_T_52 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_53 = eq(UInt<31>("h40005013"), _ctrlSignals_T_52) @[Lookup.scala 31:38]
    node _ctrlSignals_T_54 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_55 = eq(UInt<6>("h33"), _ctrlSignals_T_54) @[Lookup.scala 31:38]
    node _ctrlSignals_T_56 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_57 = eq(UInt<31>("h40000033"), _ctrlSignals_T_56) @[Lookup.scala 31:38]
    node _ctrlSignals_T_58 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_59 = eq(UInt<13>("h1033"), _ctrlSignals_T_58) @[Lookup.scala 31:38]
    node _ctrlSignals_T_60 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_61 = eq(UInt<14>("h2033"), _ctrlSignals_T_60) @[Lookup.scala 31:38]
    node _ctrlSignals_T_62 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_63 = eq(UInt<14>("h3033"), _ctrlSignals_T_62) @[Lookup.scala 31:38]
    node _ctrlSignals_T_64 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_65 = eq(UInt<15>("h4033"), _ctrlSignals_T_64) @[Lookup.scala 31:38]
    node _ctrlSignals_T_66 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_67 = eq(UInt<15>("h5033"), _ctrlSignals_T_66) @[Lookup.scala 31:38]
    node _ctrlSignals_T_68 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_69 = eq(UInt<31>("h40005033"), _ctrlSignals_T_68) @[Lookup.scala 31:38]
    node _ctrlSignals_T_70 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_71 = eq(UInt<15>("h6033"), _ctrlSignals_T_70) @[Lookup.scala 31:38]
    node _ctrlSignals_T_72 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_73 = eq(UInt<15>("h7033"), _ctrlSignals_T_72) @[Lookup.scala 31:38]
    node _ctrlSignals_T_74 = and(io.inst, UInt<32>("hf00fffff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_75 = eq(UInt<4>("hf"), _ctrlSignals_T_74) @[Lookup.scala 31:38]
    node _ctrlSignals_T_76 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_77 = eq(UInt<13>("h100f"), _ctrlSignals_T_76) @[Lookup.scala 31:38]
    node _ctrlSignals_T_78 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_79 = eq(UInt<13>("h1073"), _ctrlSignals_T_78) @[Lookup.scala 31:38]
    node _ctrlSignals_T_80 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_81 = eq(UInt<14>("h2073"), _ctrlSignals_T_80) @[Lookup.scala 31:38]
    node _ctrlSignals_T_82 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_83 = eq(UInt<14>("h3073"), _ctrlSignals_T_82) @[Lookup.scala 31:38]
    node _ctrlSignals_T_84 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_85 = eq(UInt<15>("h5073"), _ctrlSignals_T_84) @[Lookup.scala 31:38]
    node _ctrlSignals_T_86 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_87 = eq(UInt<15>("h6073"), _ctrlSignals_T_86) @[Lookup.scala 31:38]
    node _ctrlSignals_T_88 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_89 = eq(UInt<15>("h7073"), _ctrlSignals_T_88) @[Lookup.scala 31:38]
    node _ctrlSignals_T_90 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_91 = eq(UInt<7>("h73"), _ctrlSignals_T_90) @[Lookup.scala 31:38]
    node _ctrlSignals_T_92 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_93 = eq(UInt<21>("h100073"), _ctrlSignals_T_92) @[Lookup.scala 31:38]
    node _ctrlSignals_T_94 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_95 = eq(UInt<30>("h30200073"), _ctrlSignals_T_94) @[Lookup.scala 31:38]
    node _ctrlSignals_T_96 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ctrlSignals_T_97 = eq(UInt<29>("h10500073"), _ctrlSignals_T_96) @[Lookup.scala 31:38]
    node _ctrlSignals_T_98 = mux(_ctrlSignals_T_97, UInt<2>("h0"), UInt<2>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_99 = mux(_ctrlSignals_T_95, UInt<2>("h3"), _ctrlSignals_T_98) @[Lookup.scala 34:39]
    node _ctrlSignals_T_100 = mux(_ctrlSignals_T_93, UInt<2>("h0"), _ctrlSignals_T_99) @[Lookup.scala 34:39]
    node _ctrlSignals_T_101 = mux(_ctrlSignals_T_91, UInt<2>("h0"), _ctrlSignals_T_100) @[Lookup.scala 34:39]
    node _ctrlSignals_T_102 = mux(_ctrlSignals_T_89, UInt<2>("h0"), _ctrlSignals_T_101) @[Lookup.scala 34:39]
    node _ctrlSignals_T_103 = mux(_ctrlSignals_T_87, UInt<2>("h0"), _ctrlSignals_T_102) @[Lookup.scala 34:39]
    node _ctrlSignals_T_104 = mux(_ctrlSignals_T_85, UInt<2>("h0"), _ctrlSignals_T_103) @[Lookup.scala 34:39]
    node _ctrlSignals_T_105 = mux(_ctrlSignals_T_83, UInt<2>("h0"), _ctrlSignals_T_104) @[Lookup.scala 34:39]
    node _ctrlSignals_T_106 = mux(_ctrlSignals_T_81, UInt<2>("h0"), _ctrlSignals_T_105) @[Lookup.scala 34:39]
    node _ctrlSignals_T_107 = mux(_ctrlSignals_T_79, UInt<2>("h0"), _ctrlSignals_T_106) @[Lookup.scala 34:39]
    node _ctrlSignals_T_108 = mux(_ctrlSignals_T_77, UInt<2>("h2"), _ctrlSignals_T_107) @[Lookup.scala 34:39]
    node _ctrlSignals_T_109 = mux(_ctrlSignals_T_75, UInt<2>("h0"), _ctrlSignals_T_108) @[Lookup.scala 34:39]
    node _ctrlSignals_T_110 = mux(_ctrlSignals_T_73, UInt<2>("h0"), _ctrlSignals_T_109) @[Lookup.scala 34:39]
    node _ctrlSignals_T_111 = mux(_ctrlSignals_T_71, UInt<2>("h0"), _ctrlSignals_T_110) @[Lookup.scala 34:39]
    node _ctrlSignals_T_112 = mux(_ctrlSignals_T_69, UInt<2>("h0"), _ctrlSignals_T_111) @[Lookup.scala 34:39]
    node _ctrlSignals_T_113 = mux(_ctrlSignals_T_67, UInt<2>("h0"), _ctrlSignals_T_112) @[Lookup.scala 34:39]
    node _ctrlSignals_T_114 = mux(_ctrlSignals_T_65, UInt<2>("h0"), _ctrlSignals_T_113) @[Lookup.scala 34:39]
    node _ctrlSignals_T_115 = mux(_ctrlSignals_T_63, UInt<2>("h0"), _ctrlSignals_T_114) @[Lookup.scala 34:39]
    node _ctrlSignals_T_116 = mux(_ctrlSignals_T_61, UInt<2>("h0"), _ctrlSignals_T_115) @[Lookup.scala 34:39]
    node _ctrlSignals_T_117 = mux(_ctrlSignals_T_59, UInt<2>("h0"), _ctrlSignals_T_116) @[Lookup.scala 34:39]
    node _ctrlSignals_T_118 = mux(_ctrlSignals_T_57, UInt<2>("h0"), _ctrlSignals_T_117) @[Lookup.scala 34:39]
    node _ctrlSignals_T_119 = mux(_ctrlSignals_T_55, UInt<2>("h0"), _ctrlSignals_T_118) @[Lookup.scala 34:39]
    node _ctrlSignals_T_120 = mux(_ctrlSignals_T_53, UInt<2>("h0"), _ctrlSignals_T_119) @[Lookup.scala 34:39]
    node _ctrlSignals_T_121 = mux(_ctrlSignals_T_51, UInt<2>("h0"), _ctrlSignals_T_120) @[Lookup.scala 34:39]
    node _ctrlSignals_T_122 = mux(_ctrlSignals_T_49, UInt<2>("h0"), _ctrlSignals_T_121) @[Lookup.scala 34:39]
    node _ctrlSignals_T_123 = mux(_ctrlSignals_T_47, UInt<2>("h0"), _ctrlSignals_T_122) @[Lookup.scala 34:39]
    node _ctrlSignals_T_124 = mux(_ctrlSignals_T_45, UInt<2>("h0"), _ctrlSignals_T_123) @[Lookup.scala 34:39]
    node _ctrlSignals_T_125 = mux(_ctrlSignals_T_43, UInt<2>("h0"), _ctrlSignals_T_124) @[Lookup.scala 34:39]
    node _ctrlSignals_T_126 = mux(_ctrlSignals_T_41, UInt<2>("h0"), _ctrlSignals_T_125) @[Lookup.scala 34:39]
    node _ctrlSignals_T_127 = mux(_ctrlSignals_T_39, UInt<2>("h0"), _ctrlSignals_T_126) @[Lookup.scala 34:39]
    node _ctrlSignals_T_128 = mux(_ctrlSignals_T_37, UInt<2>("h0"), _ctrlSignals_T_127) @[Lookup.scala 34:39]
    node _ctrlSignals_T_129 = mux(_ctrlSignals_T_35, UInt<2>("h0"), _ctrlSignals_T_128) @[Lookup.scala 34:39]
    node _ctrlSignals_T_130 = mux(_ctrlSignals_T_33, UInt<2>("h0"), _ctrlSignals_T_129) @[Lookup.scala 34:39]
    node _ctrlSignals_T_131 = mux(_ctrlSignals_T_31, UInt<2>("h0"), _ctrlSignals_T_130) @[Lookup.scala 34:39]
    node _ctrlSignals_T_132 = mux(_ctrlSignals_T_29, UInt<2>("h0"), _ctrlSignals_T_131) @[Lookup.scala 34:39]
    node _ctrlSignals_T_133 = mux(_ctrlSignals_T_27, UInt<2>("h0"), _ctrlSignals_T_132) @[Lookup.scala 34:39]
    node _ctrlSignals_T_134 = mux(_ctrlSignals_T_25, UInt<2>("h0"), _ctrlSignals_T_133) @[Lookup.scala 34:39]
    node _ctrlSignals_T_135 = mux(_ctrlSignals_T_23, UInt<2>("h0"), _ctrlSignals_T_134) @[Lookup.scala 34:39]
    node _ctrlSignals_T_136 = mux(_ctrlSignals_T_21, UInt<2>("h0"), _ctrlSignals_T_135) @[Lookup.scala 34:39]
    node _ctrlSignals_T_137 = mux(_ctrlSignals_T_19, UInt<2>("h0"), _ctrlSignals_T_136) @[Lookup.scala 34:39]
    node _ctrlSignals_T_138 = mux(_ctrlSignals_T_17, UInt<2>("h0"), _ctrlSignals_T_137) @[Lookup.scala 34:39]
    node _ctrlSignals_T_139 = mux(_ctrlSignals_T_15, UInt<2>("h0"), _ctrlSignals_T_138) @[Lookup.scala 34:39]
    node _ctrlSignals_T_140 = mux(_ctrlSignals_T_13, UInt<2>("h0"), _ctrlSignals_T_139) @[Lookup.scala 34:39]
    node _ctrlSignals_T_141 = mux(_ctrlSignals_T_11, UInt<2>("h0"), _ctrlSignals_T_140) @[Lookup.scala 34:39]
    node _ctrlSignals_T_142 = mux(_ctrlSignals_T_9, UInt<2>("h0"), _ctrlSignals_T_141) @[Lookup.scala 34:39]
    node _ctrlSignals_T_143 = mux(_ctrlSignals_T_7, UInt<2>("h1"), _ctrlSignals_T_142) @[Lookup.scala 34:39]
    node _ctrlSignals_T_144 = mux(_ctrlSignals_T_5, UInt<2>("h1"), _ctrlSignals_T_143) @[Lookup.scala 34:39]
    node _ctrlSignals_T_145 = mux(_ctrlSignals_T_3, UInt<2>("h0"), _ctrlSignals_T_144) @[Lookup.scala 34:39]
    node ctrlSignals_0 = mux(_ctrlSignals_T_1, UInt<2>("h0"), _ctrlSignals_T_145) @[Lookup.scala 34:39]
    node _ctrlSignals_T_146 = mux(_ctrlSignals_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_147 = mux(_ctrlSignals_T_95, UInt<1>("h0"), _ctrlSignals_T_146) @[Lookup.scala 34:39]
    node _ctrlSignals_T_148 = mux(_ctrlSignals_T_93, UInt<1>("h0"), _ctrlSignals_T_147) @[Lookup.scala 34:39]
    node _ctrlSignals_T_149 = mux(_ctrlSignals_T_91, UInt<1>("h0"), _ctrlSignals_T_148) @[Lookup.scala 34:39]
    node _ctrlSignals_T_150 = mux(_ctrlSignals_T_89, UInt<1>("h0"), _ctrlSignals_T_149) @[Lookup.scala 34:39]
    node _ctrlSignals_T_151 = mux(_ctrlSignals_T_87, UInt<1>("h0"), _ctrlSignals_T_150) @[Lookup.scala 34:39]
    node _ctrlSignals_T_152 = mux(_ctrlSignals_T_85, UInt<1>("h0"), _ctrlSignals_T_151) @[Lookup.scala 34:39]
    node _ctrlSignals_T_153 = mux(_ctrlSignals_T_83, UInt<1>("h1"), _ctrlSignals_T_152) @[Lookup.scala 34:39]
    node _ctrlSignals_T_154 = mux(_ctrlSignals_T_81, UInt<1>("h1"), _ctrlSignals_T_153) @[Lookup.scala 34:39]
    node _ctrlSignals_T_155 = mux(_ctrlSignals_T_79, UInt<1>("h1"), _ctrlSignals_T_154) @[Lookup.scala 34:39]
    node _ctrlSignals_T_156 = mux(_ctrlSignals_T_77, UInt<1>("h0"), _ctrlSignals_T_155) @[Lookup.scala 34:39]
    node _ctrlSignals_T_157 = mux(_ctrlSignals_T_75, UInt<1>("h0"), _ctrlSignals_T_156) @[Lookup.scala 34:39]
    node _ctrlSignals_T_158 = mux(_ctrlSignals_T_73, UInt<1>("h1"), _ctrlSignals_T_157) @[Lookup.scala 34:39]
    node _ctrlSignals_T_159 = mux(_ctrlSignals_T_71, UInt<1>("h1"), _ctrlSignals_T_158) @[Lookup.scala 34:39]
    node _ctrlSignals_T_160 = mux(_ctrlSignals_T_69, UInt<1>("h1"), _ctrlSignals_T_159) @[Lookup.scala 34:39]
    node _ctrlSignals_T_161 = mux(_ctrlSignals_T_67, UInt<1>("h1"), _ctrlSignals_T_160) @[Lookup.scala 34:39]
    node _ctrlSignals_T_162 = mux(_ctrlSignals_T_65, UInt<1>("h1"), _ctrlSignals_T_161) @[Lookup.scala 34:39]
    node _ctrlSignals_T_163 = mux(_ctrlSignals_T_63, UInt<1>("h1"), _ctrlSignals_T_162) @[Lookup.scala 34:39]
    node _ctrlSignals_T_164 = mux(_ctrlSignals_T_61, UInt<1>("h1"), _ctrlSignals_T_163) @[Lookup.scala 34:39]
    node _ctrlSignals_T_165 = mux(_ctrlSignals_T_59, UInt<1>("h1"), _ctrlSignals_T_164) @[Lookup.scala 34:39]
    node _ctrlSignals_T_166 = mux(_ctrlSignals_T_57, UInt<1>("h1"), _ctrlSignals_T_165) @[Lookup.scala 34:39]
    node _ctrlSignals_T_167 = mux(_ctrlSignals_T_55, UInt<1>("h1"), _ctrlSignals_T_166) @[Lookup.scala 34:39]
    node _ctrlSignals_T_168 = mux(_ctrlSignals_T_53, UInt<1>("h1"), _ctrlSignals_T_167) @[Lookup.scala 34:39]
    node _ctrlSignals_T_169 = mux(_ctrlSignals_T_51, UInt<1>("h1"), _ctrlSignals_T_168) @[Lookup.scala 34:39]
    node _ctrlSignals_T_170 = mux(_ctrlSignals_T_49, UInt<1>("h1"), _ctrlSignals_T_169) @[Lookup.scala 34:39]
    node _ctrlSignals_T_171 = mux(_ctrlSignals_T_47, UInt<1>("h1"), _ctrlSignals_T_170) @[Lookup.scala 34:39]
    node _ctrlSignals_T_172 = mux(_ctrlSignals_T_45, UInt<1>("h1"), _ctrlSignals_T_171) @[Lookup.scala 34:39]
    node _ctrlSignals_T_173 = mux(_ctrlSignals_T_43, UInt<1>("h1"), _ctrlSignals_T_172) @[Lookup.scala 34:39]
    node _ctrlSignals_T_174 = mux(_ctrlSignals_T_41, UInt<1>("h1"), _ctrlSignals_T_173) @[Lookup.scala 34:39]
    node _ctrlSignals_T_175 = mux(_ctrlSignals_T_39, UInt<1>("h1"), _ctrlSignals_T_174) @[Lookup.scala 34:39]
    node _ctrlSignals_T_176 = mux(_ctrlSignals_T_37, UInt<1>("h1"), _ctrlSignals_T_175) @[Lookup.scala 34:39]
    node _ctrlSignals_T_177 = mux(_ctrlSignals_T_35, UInt<1>("h1"), _ctrlSignals_T_176) @[Lookup.scala 34:39]
    node _ctrlSignals_T_178 = mux(_ctrlSignals_T_33, UInt<1>("h1"), _ctrlSignals_T_177) @[Lookup.scala 34:39]
    node _ctrlSignals_T_179 = mux(_ctrlSignals_T_31, UInt<1>("h1"), _ctrlSignals_T_178) @[Lookup.scala 34:39]
    node _ctrlSignals_T_180 = mux(_ctrlSignals_T_29, UInt<1>("h1"), _ctrlSignals_T_179) @[Lookup.scala 34:39]
    node _ctrlSignals_T_181 = mux(_ctrlSignals_T_27, UInt<1>("h1"), _ctrlSignals_T_180) @[Lookup.scala 34:39]
    node _ctrlSignals_T_182 = mux(_ctrlSignals_T_25, UInt<1>("h1"), _ctrlSignals_T_181) @[Lookup.scala 34:39]
    node _ctrlSignals_T_183 = mux(_ctrlSignals_T_23, UInt<1>("h1"), _ctrlSignals_T_182) @[Lookup.scala 34:39]
    node _ctrlSignals_T_184 = mux(_ctrlSignals_T_21, UInt<1>("h1"), _ctrlSignals_T_183) @[Lookup.scala 34:39]
    node _ctrlSignals_T_185 = mux(_ctrlSignals_T_19, UInt<1>("h0"), _ctrlSignals_T_184) @[Lookup.scala 34:39]
    node _ctrlSignals_T_186 = mux(_ctrlSignals_T_17, UInt<1>("h0"), _ctrlSignals_T_185) @[Lookup.scala 34:39]
    node _ctrlSignals_T_187 = mux(_ctrlSignals_T_15, UInt<1>("h0"), _ctrlSignals_T_186) @[Lookup.scala 34:39]
    node _ctrlSignals_T_188 = mux(_ctrlSignals_T_13, UInt<1>("h0"), _ctrlSignals_T_187) @[Lookup.scala 34:39]
    node _ctrlSignals_T_189 = mux(_ctrlSignals_T_11, UInt<1>("h0"), _ctrlSignals_T_188) @[Lookup.scala 34:39]
    node _ctrlSignals_T_190 = mux(_ctrlSignals_T_9, UInt<1>("h0"), _ctrlSignals_T_189) @[Lookup.scala 34:39]
    node _ctrlSignals_T_191 = mux(_ctrlSignals_T_7, UInt<1>("h1"), _ctrlSignals_T_190) @[Lookup.scala 34:39]
    node _ctrlSignals_T_192 = mux(_ctrlSignals_T_5, UInt<1>("h0"), _ctrlSignals_T_191) @[Lookup.scala 34:39]
    node _ctrlSignals_T_193 = mux(_ctrlSignals_T_3, UInt<1>("h0"), _ctrlSignals_T_192) @[Lookup.scala 34:39]
    node ctrlSignals_1 = mux(_ctrlSignals_T_1, UInt<1>("h0"), _ctrlSignals_T_193) @[Lookup.scala 34:39]
    node _ctrlSignals_T_194 = mux(_ctrlSignals_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_195 = mux(_ctrlSignals_T_95, UInt<1>("h0"), _ctrlSignals_T_194) @[Lookup.scala 34:39]
    node _ctrlSignals_T_196 = mux(_ctrlSignals_T_93, UInt<1>("h0"), _ctrlSignals_T_195) @[Lookup.scala 34:39]
    node _ctrlSignals_T_197 = mux(_ctrlSignals_T_91, UInt<1>("h0"), _ctrlSignals_T_196) @[Lookup.scala 34:39]
    node _ctrlSignals_T_198 = mux(_ctrlSignals_T_89, UInt<1>("h0"), _ctrlSignals_T_197) @[Lookup.scala 34:39]
    node _ctrlSignals_T_199 = mux(_ctrlSignals_T_87, UInt<1>("h0"), _ctrlSignals_T_198) @[Lookup.scala 34:39]
    node _ctrlSignals_T_200 = mux(_ctrlSignals_T_85, UInt<1>("h0"), _ctrlSignals_T_199) @[Lookup.scala 34:39]
    node _ctrlSignals_T_201 = mux(_ctrlSignals_T_83, UInt<1>("h0"), _ctrlSignals_T_200) @[Lookup.scala 34:39]
    node _ctrlSignals_T_202 = mux(_ctrlSignals_T_81, UInt<1>("h0"), _ctrlSignals_T_201) @[Lookup.scala 34:39]
    node _ctrlSignals_T_203 = mux(_ctrlSignals_T_79, UInt<1>("h0"), _ctrlSignals_T_202) @[Lookup.scala 34:39]
    node _ctrlSignals_T_204 = mux(_ctrlSignals_T_77, UInt<1>("h0"), _ctrlSignals_T_203) @[Lookup.scala 34:39]
    node _ctrlSignals_T_205 = mux(_ctrlSignals_T_75, UInt<1>("h0"), _ctrlSignals_T_204) @[Lookup.scala 34:39]
    node _ctrlSignals_T_206 = mux(_ctrlSignals_T_73, UInt<1>("h1"), _ctrlSignals_T_205) @[Lookup.scala 34:39]
    node _ctrlSignals_T_207 = mux(_ctrlSignals_T_71, UInt<1>("h1"), _ctrlSignals_T_206) @[Lookup.scala 34:39]
    node _ctrlSignals_T_208 = mux(_ctrlSignals_T_69, UInt<1>("h1"), _ctrlSignals_T_207) @[Lookup.scala 34:39]
    node _ctrlSignals_T_209 = mux(_ctrlSignals_T_67, UInt<1>("h1"), _ctrlSignals_T_208) @[Lookup.scala 34:39]
    node _ctrlSignals_T_210 = mux(_ctrlSignals_T_65, UInt<1>("h1"), _ctrlSignals_T_209) @[Lookup.scala 34:39]
    node _ctrlSignals_T_211 = mux(_ctrlSignals_T_63, UInt<1>("h1"), _ctrlSignals_T_210) @[Lookup.scala 34:39]
    node _ctrlSignals_T_212 = mux(_ctrlSignals_T_61, UInt<1>("h1"), _ctrlSignals_T_211) @[Lookup.scala 34:39]
    node _ctrlSignals_T_213 = mux(_ctrlSignals_T_59, UInt<1>("h1"), _ctrlSignals_T_212) @[Lookup.scala 34:39]
    node _ctrlSignals_T_214 = mux(_ctrlSignals_T_57, UInt<1>("h1"), _ctrlSignals_T_213) @[Lookup.scala 34:39]
    node _ctrlSignals_T_215 = mux(_ctrlSignals_T_55, UInt<1>("h1"), _ctrlSignals_T_214) @[Lookup.scala 34:39]
    node _ctrlSignals_T_216 = mux(_ctrlSignals_T_53, UInt<1>("h0"), _ctrlSignals_T_215) @[Lookup.scala 34:39]
    node _ctrlSignals_T_217 = mux(_ctrlSignals_T_51, UInt<1>("h0"), _ctrlSignals_T_216) @[Lookup.scala 34:39]
    node _ctrlSignals_T_218 = mux(_ctrlSignals_T_49, UInt<1>("h0"), _ctrlSignals_T_217) @[Lookup.scala 34:39]
    node _ctrlSignals_T_219 = mux(_ctrlSignals_T_47, UInt<1>("h0"), _ctrlSignals_T_218) @[Lookup.scala 34:39]
    node _ctrlSignals_T_220 = mux(_ctrlSignals_T_45, UInt<1>("h0"), _ctrlSignals_T_219) @[Lookup.scala 34:39]
    node _ctrlSignals_T_221 = mux(_ctrlSignals_T_43, UInt<1>("h0"), _ctrlSignals_T_220) @[Lookup.scala 34:39]
    node _ctrlSignals_T_222 = mux(_ctrlSignals_T_41, UInt<1>("h0"), _ctrlSignals_T_221) @[Lookup.scala 34:39]
    node _ctrlSignals_T_223 = mux(_ctrlSignals_T_39, UInt<1>("h0"), _ctrlSignals_T_222) @[Lookup.scala 34:39]
    node _ctrlSignals_T_224 = mux(_ctrlSignals_T_37, UInt<1>("h0"), _ctrlSignals_T_223) @[Lookup.scala 34:39]
    node _ctrlSignals_T_225 = mux(_ctrlSignals_T_35, UInt<1>("h0"), _ctrlSignals_T_224) @[Lookup.scala 34:39]
    node _ctrlSignals_T_226 = mux(_ctrlSignals_T_33, UInt<1>("h0"), _ctrlSignals_T_225) @[Lookup.scala 34:39]
    node _ctrlSignals_T_227 = mux(_ctrlSignals_T_31, UInt<1>("h0"), _ctrlSignals_T_226) @[Lookup.scala 34:39]
    node _ctrlSignals_T_228 = mux(_ctrlSignals_T_29, UInt<1>("h0"), _ctrlSignals_T_227) @[Lookup.scala 34:39]
    node _ctrlSignals_T_229 = mux(_ctrlSignals_T_27, UInt<1>("h0"), _ctrlSignals_T_228) @[Lookup.scala 34:39]
    node _ctrlSignals_T_230 = mux(_ctrlSignals_T_25, UInt<1>("h0"), _ctrlSignals_T_229) @[Lookup.scala 34:39]
    node _ctrlSignals_T_231 = mux(_ctrlSignals_T_23, UInt<1>("h0"), _ctrlSignals_T_230) @[Lookup.scala 34:39]
    node _ctrlSignals_T_232 = mux(_ctrlSignals_T_21, UInt<1>("h0"), _ctrlSignals_T_231) @[Lookup.scala 34:39]
    node _ctrlSignals_T_233 = mux(_ctrlSignals_T_19, UInt<1>("h0"), _ctrlSignals_T_232) @[Lookup.scala 34:39]
    node _ctrlSignals_T_234 = mux(_ctrlSignals_T_17, UInt<1>("h0"), _ctrlSignals_T_233) @[Lookup.scala 34:39]
    node _ctrlSignals_T_235 = mux(_ctrlSignals_T_15, UInt<1>("h0"), _ctrlSignals_T_234) @[Lookup.scala 34:39]
    node _ctrlSignals_T_236 = mux(_ctrlSignals_T_13, UInt<1>("h0"), _ctrlSignals_T_235) @[Lookup.scala 34:39]
    node _ctrlSignals_T_237 = mux(_ctrlSignals_T_11, UInt<1>("h0"), _ctrlSignals_T_236) @[Lookup.scala 34:39]
    node _ctrlSignals_T_238 = mux(_ctrlSignals_T_9, UInt<1>("h0"), _ctrlSignals_T_237) @[Lookup.scala 34:39]
    node _ctrlSignals_T_239 = mux(_ctrlSignals_T_7, UInt<1>("h0"), _ctrlSignals_T_238) @[Lookup.scala 34:39]
    node _ctrlSignals_T_240 = mux(_ctrlSignals_T_5, UInt<1>("h0"), _ctrlSignals_T_239) @[Lookup.scala 34:39]
    node _ctrlSignals_T_241 = mux(_ctrlSignals_T_3, UInt<1>("h0"), _ctrlSignals_T_240) @[Lookup.scala 34:39]
    node ctrlSignals_2 = mux(_ctrlSignals_T_1, UInt<1>("h0"), _ctrlSignals_T_241) @[Lookup.scala 34:39]
    node _ctrlSignals_T_242 = mux(_ctrlSignals_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_243 = mux(_ctrlSignals_T_95, UInt<3>("h0"), _ctrlSignals_T_242) @[Lookup.scala 34:39]
    node _ctrlSignals_T_244 = mux(_ctrlSignals_T_93, UInt<3>("h0"), _ctrlSignals_T_243) @[Lookup.scala 34:39]
    node _ctrlSignals_T_245 = mux(_ctrlSignals_T_91, UInt<3>("h0"), _ctrlSignals_T_244) @[Lookup.scala 34:39]
    node _ctrlSignals_T_246 = mux(_ctrlSignals_T_89, UInt<3>("h6"), _ctrlSignals_T_245) @[Lookup.scala 34:39]
    node _ctrlSignals_T_247 = mux(_ctrlSignals_T_87, UInt<3>("h6"), _ctrlSignals_T_246) @[Lookup.scala 34:39]
    node _ctrlSignals_T_248 = mux(_ctrlSignals_T_85, UInt<3>("h6"), _ctrlSignals_T_247) @[Lookup.scala 34:39]
    node _ctrlSignals_T_249 = mux(_ctrlSignals_T_83, UInt<3>("h0"), _ctrlSignals_T_248) @[Lookup.scala 34:39]
    node _ctrlSignals_T_250 = mux(_ctrlSignals_T_81, UInt<3>("h0"), _ctrlSignals_T_249) @[Lookup.scala 34:39]
    node _ctrlSignals_T_251 = mux(_ctrlSignals_T_79, UInt<3>("h0"), _ctrlSignals_T_250) @[Lookup.scala 34:39]
    node _ctrlSignals_T_252 = mux(_ctrlSignals_T_77, UInt<3>("h0"), _ctrlSignals_T_251) @[Lookup.scala 34:39]
    node _ctrlSignals_T_253 = mux(_ctrlSignals_T_75, UInt<3>("h0"), _ctrlSignals_T_252) @[Lookup.scala 34:39]
    node _ctrlSignals_T_254 = mux(_ctrlSignals_T_73, UInt<3>("h0"), _ctrlSignals_T_253) @[Lookup.scala 34:39]
    node _ctrlSignals_T_255 = mux(_ctrlSignals_T_71, UInt<3>("h0"), _ctrlSignals_T_254) @[Lookup.scala 34:39]
    node _ctrlSignals_T_256 = mux(_ctrlSignals_T_69, UInt<3>("h0"), _ctrlSignals_T_255) @[Lookup.scala 34:39]
    node _ctrlSignals_T_257 = mux(_ctrlSignals_T_67, UInt<3>("h0"), _ctrlSignals_T_256) @[Lookup.scala 34:39]
    node _ctrlSignals_T_258 = mux(_ctrlSignals_T_65, UInt<3>("h0"), _ctrlSignals_T_257) @[Lookup.scala 34:39]
    node _ctrlSignals_T_259 = mux(_ctrlSignals_T_63, UInt<3>("h0"), _ctrlSignals_T_258) @[Lookup.scala 34:39]
    node _ctrlSignals_T_260 = mux(_ctrlSignals_T_61, UInt<3>("h0"), _ctrlSignals_T_259) @[Lookup.scala 34:39]
    node _ctrlSignals_T_261 = mux(_ctrlSignals_T_59, UInt<3>("h0"), _ctrlSignals_T_260) @[Lookup.scala 34:39]
    node _ctrlSignals_T_262 = mux(_ctrlSignals_T_57, UInt<3>("h0"), _ctrlSignals_T_261) @[Lookup.scala 34:39]
    node _ctrlSignals_T_263 = mux(_ctrlSignals_T_55, UInt<3>("h0"), _ctrlSignals_T_262) @[Lookup.scala 34:39]
    node _ctrlSignals_T_264 = mux(_ctrlSignals_T_53, UInt<3>("h1"), _ctrlSignals_T_263) @[Lookup.scala 34:39]
    node _ctrlSignals_T_265 = mux(_ctrlSignals_T_51, UInt<3>("h1"), _ctrlSignals_T_264) @[Lookup.scala 34:39]
    node _ctrlSignals_T_266 = mux(_ctrlSignals_T_49, UInt<3>("h1"), _ctrlSignals_T_265) @[Lookup.scala 34:39]
    node _ctrlSignals_T_267 = mux(_ctrlSignals_T_47, UInt<3>("h1"), _ctrlSignals_T_266) @[Lookup.scala 34:39]
    node _ctrlSignals_T_268 = mux(_ctrlSignals_T_45, UInt<3>("h1"), _ctrlSignals_T_267) @[Lookup.scala 34:39]
    node _ctrlSignals_T_269 = mux(_ctrlSignals_T_43, UInt<3>("h1"), _ctrlSignals_T_268) @[Lookup.scala 34:39]
    node _ctrlSignals_T_270 = mux(_ctrlSignals_T_41, UInt<3>("h1"), _ctrlSignals_T_269) @[Lookup.scala 34:39]
    node _ctrlSignals_T_271 = mux(_ctrlSignals_T_39, UInt<3>("h1"), _ctrlSignals_T_270) @[Lookup.scala 34:39]
    node _ctrlSignals_T_272 = mux(_ctrlSignals_T_37, UInt<3>("h1"), _ctrlSignals_T_271) @[Lookup.scala 34:39]
    node _ctrlSignals_T_273 = mux(_ctrlSignals_T_35, UInt<3>("h2"), _ctrlSignals_T_272) @[Lookup.scala 34:39]
    node _ctrlSignals_T_274 = mux(_ctrlSignals_T_33, UInt<3>("h2"), _ctrlSignals_T_273) @[Lookup.scala 34:39]
    node _ctrlSignals_T_275 = mux(_ctrlSignals_T_31, UInt<3>("h2"), _ctrlSignals_T_274) @[Lookup.scala 34:39]
    node _ctrlSignals_T_276 = mux(_ctrlSignals_T_29, UInt<3>("h1"), _ctrlSignals_T_275) @[Lookup.scala 34:39]
    node _ctrlSignals_T_277 = mux(_ctrlSignals_T_27, UInt<3>("h1"), _ctrlSignals_T_276) @[Lookup.scala 34:39]
    node _ctrlSignals_T_278 = mux(_ctrlSignals_T_25, UInt<3>("h1"), _ctrlSignals_T_277) @[Lookup.scala 34:39]
    node _ctrlSignals_T_279 = mux(_ctrlSignals_T_23, UInt<3>("h1"), _ctrlSignals_T_278) @[Lookup.scala 34:39]
    node _ctrlSignals_T_280 = mux(_ctrlSignals_T_21, UInt<3>("h1"), _ctrlSignals_T_279) @[Lookup.scala 34:39]
    node _ctrlSignals_T_281 = mux(_ctrlSignals_T_19, UInt<3>("h5"), _ctrlSignals_T_280) @[Lookup.scala 34:39]
    node _ctrlSignals_T_282 = mux(_ctrlSignals_T_17, UInt<3>("h5"), _ctrlSignals_T_281) @[Lookup.scala 34:39]
    node _ctrlSignals_T_283 = mux(_ctrlSignals_T_15, UInt<3>("h5"), _ctrlSignals_T_282) @[Lookup.scala 34:39]
    node _ctrlSignals_T_284 = mux(_ctrlSignals_T_13, UInt<3>("h5"), _ctrlSignals_T_283) @[Lookup.scala 34:39]
    node _ctrlSignals_T_285 = mux(_ctrlSignals_T_11, UInt<3>("h5"), _ctrlSignals_T_284) @[Lookup.scala 34:39]
    node _ctrlSignals_T_286 = mux(_ctrlSignals_T_9, UInt<3>("h5"), _ctrlSignals_T_285) @[Lookup.scala 34:39]
    node _ctrlSignals_T_287 = mux(_ctrlSignals_T_7, UInt<3>("h1"), _ctrlSignals_T_286) @[Lookup.scala 34:39]
    node _ctrlSignals_T_288 = mux(_ctrlSignals_T_5, UInt<3>("h4"), _ctrlSignals_T_287) @[Lookup.scala 34:39]
    node _ctrlSignals_T_289 = mux(_ctrlSignals_T_3, UInt<3>("h3"), _ctrlSignals_T_288) @[Lookup.scala 34:39]
    node ctrlSignals_3 = mux(_ctrlSignals_T_1, UInt<3>("h3"), _ctrlSignals_T_289) @[Lookup.scala 34:39]
    node _ctrlSignals_T_290 = mux(_ctrlSignals_T_97, UInt<4>("hf"), UInt<4>("hf")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_291 = mux(_ctrlSignals_T_95, UInt<4>("hf"), _ctrlSignals_T_290) @[Lookup.scala 34:39]
    node _ctrlSignals_T_292 = mux(_ctrlSignals_T_93, UInt<4>("hf"), _ctrlSignals_T_291) @[Lookup.scala 34:39]
    node _ctrlSignals_T_293 = mux(_ctrlSignals_T_91, UInt<4>("hf"), _ctrlSignals_T_292) @[Lookup.scala 34:39]
    node _ctrlSignals_T_294 = mux(_ctrlSignals_T_89, UInt<4>("hf"), _ctrlSignals_T_293) @[Lookup.scala 34:39]
    node _ctrlSignals_T_295 = mux(_ctrlSignals_T_87, UInt<4>("hf"), _ctrlSignals_T_294) @[Lookup.scala 34:39]
    node _ctrlSignals_T_296 = mux(_ctrlSignals_T_85, UInt<4>("hf"), _ctrlSignals_T_295) @[Lookup.scala 34:39]
    node _ctrlSignals_T_297 = mux(_ctrlSignals_T_83, UInt<4>("ha"), _ctrlSignals_T_296) @[Lookup.scala 34:39]
    node _ctrlSignals_T_298 = mux(_ctrlSignals_T_81, UInt<4>("ha"), _ctrlSignals_T_297) @[Lookup.scala 34:39]
    node _ctrlSignals_T_299 = mux(_ctrlSignals_T_79, UInt<4>("ha"), _ctrlSignals_T_298) @[Lookup.scala 34:39]
    node _ctrlSignals_T_300 = mux(_ctrlSignals_T_77, UInt<4>("hf"), _ctrlSignals_T_299) @[Lookup.scala 34:39]
    node _ctrlSignals_T_301 = mux(_ctrlSignals_T_75, UInt<4>("hf"), _ctrlSignals_T_300) @[Lookup.scala 34:39]
    node _ctrlSignals_T_302 = mux(_ctrlSignals_T_73, UInt<4>("h2"), _ctrlSignals_T_301) @[Lookup.scala 34:39]
    node _ctrlSignals_T_303 = mux(_ctrlSignals_T_71, UInt<4>("h3"), _ctrlSignals_T_302) @[Lookup.scala 34:39]
    node _ctrlSignals_T_304 = mux(_ctrlSignals_T_69, UInt<4>("h9"), _ctrlSignals_T_303) @[Lookup.scala 34:39]
    node _ctrlSignals_T_305 = mux(_ctrlSignals_T_67, UInt<4>("h8"), _ctrlSignals_T_304) @[Lookup.scala 34:39]
    node _ctrlSignals_T_306 = mux(_ctrlSignals_T_65, UInt<4>("h4"), _ctrlSignals_T_305) @[Lookup.scala 34:39]
    node _ctrlSignals_T_307 = mux(_ctrlSignals_T_63, UInt<4>("h7"), _ctrlSignals_T_306) @[Lookup.scala 34:39]
    node _ctrlSignals_T_308 = mux(_ctrlSignals_T_61, UInt<4>("h5"), _ctrlSignals_T_307) @[Lookup.scala 34:39]
    node _ctrlSignals_T_309 = mux(_ctrlSignals_T_59, UInt<4>("h6"), _ctrlSignals_T_308) @[Lookup.scala 34:39]
    node _ctrlSignals_T_310 = mux(_ctrlSignals_T_57, UInt<4>("h1"), _ctrlSignals_T_309) @[Lookup.scala 34:39]
    node _ctrlSignals_T_311 = mux(_ctrlSignals_T_55, UInt<4>("h0"), _ctrlSignals_T_310) @[Lookup.scala 34:39]
    node _ctrlSignals_T_312 = mux(_ctrlSignals_T_53, UInt<4>("h9"), _ctrlSignals_T_311) @[Lookup.scala 34:39]
    node _ctrlSignals_T_313 = mux(_ctrlSignals_T_51, UInt<4>("h8"), _ctrlSignals_T_312) @[Lookup.scala 34:39]
    node _ctrlSignals_T_314 = mux(_ctrlSignals_T_49, UInt<4>("h6"), _ctrlSignals_T_313) @[Lookup.scala 34:39]
    node _ctrlSignals_T_315 = mux(_ctrlSignals_T_47, UInt<4>("h2"), _ctrlSignals_T_314) @[Lookup.scala 34:39]
    node _ctrlSignals_T_316 = mux(_ctrlSignals_T_45, UInt<4>("h3"), _ctrlSignals_T_315) @[Lookup.scala 34:39]
    node _ctrlSignals_T_317 = mux(_ctrlSignals_T_43, UInt<4>("h4"), _ctrlSignals_T_316) @[Lookup.scala 34:39]
    node _ctrlSignals_T_318 = mux(_ctrlSignals_T_41, UInt<4>("h7"), _ctrlSignals_T_317) @[Lookup.scala 34:39]
    node _ctrlSignals_T_319 = mux(_ctrlSignals_T_39, UInt<4>("h5"), _ctrlSignals_T_318) @[Lookup.scala 34:39]
    node _ctrlSignals_T_320 = mux(_ctrlSignals_T_37, UInt<4>("h0"), _ctrlSignals_T_319) @[Lookup.scala 34:39]
    node _ctrlSignals_T_321 = mux(_ctrlSignals_T_35, UInt<4>("h0"), _ctrlSignals_T_320) @[Lookup.scala 34:39]
    node _ctrlSignals_T_322 = mux(_ctrlSignals_T_33, UInt<4>("h0"), _ctrlSignals_T_321) @[Lookup.scala 34:39]
    node _ctrlSignals_T_323 = mux(_ctrlSignals_T_31, UInt<4>("h0"), _ctrlSignals_T_322) @[Lookup.scala 34:39]
    node _ctrlSignals_T_324 = mux(_ctrlSignals_T_29, UInt<4>("h0"), _ctrlSignals_T_323) @[Lookup.scala 34:39]
    node _ctrlSignals_T_325 = mux(_ctrlSignals_T_27, UInt<4>("h0"), _ctrlSignals_T_324) @[Lookup.scala 34:39]
    node _ctrlSignals_T_326 = mux(_ctrlSignals_T_25, UInt<4>("h0"), _ctrlSignals_T_325) @[Lookup.scala 34:39]
    node _ctrlSignals_T_327 = mux(_ctrlSignals_T_23, UInt<4>("h0"), _ctrlSignals_T_326) @[Lookup.scala 34:39]
    node _ctrlSignals_T_328 = mux(_ctrlSignals_T_21, UInt<4>("h0"), _ctrlSignals_T_327) @[Lookup.scala 34:39]
    node _ctrlSignals_T_329 = mux(_ctrlSignals_T_19, UInt<4>("h0"), _ctrlSignals_T_328) @[Lookup.scala 34:39]
    node _ctrlSignals_T_330 = mux(_ctrlSignals_T_17, UInt<4>("h0"), _ctrlSignals_T_329) @[Lookup.scala 34:39]
    node _ctrlSignals_T_331 = mux(_ctrlSignals_T_15, UInt<4>("h0"), _ctrlSignals_T_330) @[Lookup.scala 34:39]
    node _ctrlSignals_T_332 = mux(_ctrlSignals_T_13, UInt<4>("h0"), _ctrlSignals_T_331) @[Lookup.scala 34:39]
    node _ctrlSignals_T_333 = mux(_ctrlSignals_T_11, UInt<4>("h0"), _ctrlSignals_T_332) @[Lookup.scala 34:39]
    node _ctrlSignals_T_334 = mux(_ctrlSignals_T_9, UInt<4>("h0"), _ctrlSignals_T_333) @[Lookup.scala 34:39]
    node _ctrlSignals_T_335 = mux(_ctrlSignals_T_7, UInt<4>("h0"), _ctrlSignals_T_334) @[Lookup.scala 34:39]
    node _ctrlSignals_T_336 = mux(_ctrlSignals_T_5, UInt<4>("h0"), _ctrlSignals_T_335) @[Lookup.scala 34:39]
    node _ctrlSignals_T_337 = mux(_ctrlSignals_T_3, UInt<4>("h0"), _ctrlSignals_T_336) @[Lookup.scala 34:39]
    node ctrlSignals_4 = mux(_ctrlSignals_T_1, UInt<4>("hb"), _ctrlSignals_T_337) @[Lookup.scala 34:39]
    node _ctrlSignals_T_338 = mux(_ctrlSignals_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_339 = mux(_ctrlSignals_T_95, UInt<3>("h0"), _ctrlSignals_T_338) @[Lookup.scala 34:39]
    node _ctrlSignals_T_340 = mux(_ctrlSignals_T_93, UInt<3>("h0"), _ctrlSignals_T_339) @[Lookup.scala 34:39]
    node _ctrlSignals_T_341 = mux(_ctrlSignals_T_91, UInt<3>("h0"), _ctrlSignals_T_340) @[Lookup.scala 34:39]
    node _ctrlSignals_T_342 = mux(_ctrlSignals_T_89, UInt<3>("h0"), _ctrlSignals_T_341) @[Lookup.scala 34:39]
    node _ctrlSignals_T_343 = mux(_ctrlSignals_T_87, UInt<3>("h0"), _ctrlSignals_T_342) @[Lookup.scala 34:39]
    node _ctrlSignals_T_344 = mux(_ctrlSignals_T_85, UInt<3>("h0"), _ctrlSignals_T_343) @[Lookup.scala 34:39]
    node _ctrlSignals_T_345 = mux(_ctrlSignals_T_83, UInt<3>("h0"), _ctrlSignals_T_344) @[Lookup.scala 34:39]
    node _ctrlSignals_T_346 = mux(_ctrlSignals_T_81, UInt<3>("h0"), _ctrlSignals_T_345) @[Lookup.scala 34:39]
    node _ctrlSignals_T_347 = mux(_ctrlSignals_T_79, UInt<3>("h0"), _ctrlSignals_T_346) @[Lookup.scala 34:39]
    node _ctrlSignals_T_348 = mux(_ctrlSignals_T_77, UInt<3>("h0"), _ctrlSignals_T_347) @[Lookup.scala 34:39]
    node _ctrlSignals_T_349 = mux(_ctrlSignals_T_75, UInt<3>("h0"), _ctrlSignals_T_348) @[Lookup.scala 34:39]
    node _ctrlSignals_T_350 = mux(_ctrlSignals_T_73, UInt<3>("h0"), _ctrlSignals_T_349) @[Lookup.scala 34:39]
    node _ctrlSignals_T_351 = mux(_ctrlSignals_T_71, UInt<3>("h0"), _ctrlSignals_T_350) @[Lookup.scala 34:39]
    node _ctrlSignals_T_352 = mux(_ctrlSignals_T_69, UInt<3>("h0"), _ctrlSignals_T_351) @[Lookup.scala 34:39]
    node _ctrlSignals_T_353 = mux(_ctrlSignals_T_67, UInt<3>("h0"), _ctrlSignals_T_352) @[Lookup.scala 34:39]
    node _ctrlSignals_T_354 = mux(_ctrlSignals_T_65, UInt<3>("h0"), _ctrlSignals_T_353) @[Lookup.scala 34:39]
    node _ctrlSignals_T_355 = mux(_ctrlSignals_T_63, UInt<3>("h0"), _ctrlSignals_T_354) @[Lookup.scala 34:39]
    node _ctrlSignals_T_356 = mux(_ctrlSignals_T_61, UInt<3>("h0"), _ctrlSignals_T_355) @[Lookup.scala 34:39]
    node _ctrlSignals_T_357 = mux(_ctrlSignals_T_59, UInt<3>("h0"), _ctrlSignals_T_356) @[Lookup.scala 34:39]
    node _ctrlSignals_T_358 = mux(_ctrlSignals_T_57, UInt<3>("h0"), _ctrlSignals_T_357) @[Lookup.scala 34:39]
    node _ctrlSignals_T_359 = mux(_ctrlSignals_T_55, UInt<3>("h0"), _ctrlSignals_T_358) @[Lookup.scala 34:39]
    node _ctrlSignals_T_360 = mux(_ctrlSignals_T_53, UInt<3>("h0"), _ctrlSignals_T_359) @[Lookup.scala 34:39]
    node _ctrlSignals_T_361 = mux(_ctrlSignals_T_51, UInt<3>("h0"), _ctrlSignals_T_360) @[Lookup.scala 34:39]
    node _ctrlSignals_T_362 = mux(_ctrlSignals_T_49, UInt<3>("h0"), _ctrlSignals_T_361) @[Lookup.scala 34:39]
    node _ctrlSignals_T_363 = mux(_ctrlSignals_T_47, UInt<3>("h0"), _ctrlSignals_T_362) @[Lookup.scala 34:39]
    node _ctrlSignals_T_364 = mux(_ctrlSignals_T_45, UInt<3>("h0"), _ctrlSignals_T_363) @[Lookup.scala 34:39]
    node _ctrlSignals_T_365 = mux(_ctrlSignals_T_43, UInt<3>("h0"), _ctrlSignals_T_364) @[Lookup.scala 34:39]
    node _ctrlSignals_T_366 = mux(_ctrlSignals_T_41, UInt<3>("h0"), _ctrlSignals_T_365) @[Lookup.scala 34:39]
    node _ctrlSignals_T_367 = mux(_ctrlSignals_T_39, UInt<3>("h0"), _ctrlSignals_T_366) @[Lookup.scala 34:39]
    node _ctrlSignals_T_368 = mux(_ctrlSignals_T_37, UInt<3>("h0"), _ctrlSignals_T_367) @[Lookup.scala 34:39]
    node _ctrlSignals_T_369 = mux(_ctrlSignals_T_35, UInt<3>("h0"), _ctrlSignals_T_368) @[Lookup.scala 34:39]
    node _ctrlSignals_T_370 = mux(_ctrlSignals_T_33, UInt<3>("h0"), _ctrlSignals_T_369) @[Lookup.scala 34:39]
    node _ctrlSignals_T_371 = mux(_ctrlSignals_T_31, UInt<3>("h0"), _ctrlSignals_T_370) @[Lookup.scala 34:39]
    node _ctrlSignals_T_372 = mux(_ctrlSignals_T_29, UInt<3>("h0"), _ctrlSignals_T_371) @[Lookup.scala 34:39]
    node _ctrlSignals_T_373 = mux(_ctrlSignals_T_27, UInt<3>("h0"), _ctrlSignals_T_372) @[Lookup.scala 34:39]
    node _ctrlSignals_T_374 = mux(_ctrlSignals_T_25, UInt<3>("h0"), _ctrlSignals_T_373) @[Lookup.scala 34:39]
    node _ctrlSignals_T_375 = mux(_ctrlSignals_T_23, UInt<3>("h0"), _ctrlSignals_T_374) @[Lookup.scala 34:39]
    node _ctrlSignals_T_376 = mux(_ctrlSignals_T_21, UInt<3>("h0"), _ctrlSignals_T_375) @[Lookup.scala 34:39]
    node _ctrlSignals_T_377 = mux(_ctrlSignals_T_19, UInt<3>("h4"), _ctrlSignals_T_376) @[Lookup.scala 34:39]
    node _ctrlSignals_T_378 = mux(_ctrlSignals_T_17, UInt<3>("h1"), _ctrlSignals_T_377) @[Lookup.scala 34:39]
    node _ctrlSignals_T_379 = mux(_ctrlSignals_T_15, UInt<3>("h5"), _ctrlSignals_T_378) @[Lookup.scala 34:39]
    node _ctrlSignals_T_380 = mux(_ctrlSignals_T_13, UInt<3>("h2"), _ctrlSignals_T_379) @[Lookup.scala 34:39]
    node _ctrlSignals_T_381 = mux(_ctrlSignals_T_11, UInt<3>("h6"), _ctrlSignals_T_380) @[Lookup.scala 34:39]
    node _ctrlSignals_T_382 = mux(_ctrlSignals_T_9, UInt<3>("h3"), _ctrlSignals_T_381) @[Lookup.scala 34:39]
    node _ctrlSignals_T_383 = mux(_ctrlSignals_T_7, UInt<3>("h0"), _ctrlSignals_T_382) @[Lookup.scala 34:39]
    node _ctrlSignals_T_384 = mux(_ctrlSignals_T_5, UInt<3>("h0"), _ctrlSignals_T_383) @[Lookup.scala 34:39]
    node _ctrlSignals_T_385 = mux(_ctrlSignals_T_3, UInt<3>("h0"), _ctrlSignals_T_384) @[Lookup.scala 34:39]
    node ctrlSignals_5 = mux(_ctrlSignals_T_1, UInt<3>("h0"), _ctrlSignals_T_385) @[Lookup.scala 34:39]
    node _ctrlSignals_T_386 = mux(_ctrlSignals_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_387 = mux(_ctrlSignals_T_95, UInt<1>("h1"), _ctrlSignals_T_386) @[Lookup.scala 34:39]
    node _ctrlSignals_T_388 = mux(_ctrlSignals_T_93, UInt<1>("h0"), _ctrlSignals_T_387) @[Lookup.scala 34:39]
    node _ctrlSignals_T_389 = mux(_ctrlSignals_T_91, UInt<1>("h0"), _ctrlSignals_T_388) @[Lookup.scala 34:39]
    node _ctrlSignals_T_390 = mux(_ctrlSignals_T_89, UInt<1>("h0"), _ctrlSignals_T_389) @[Lookup.scala 34:39]
    node _ctrlSignals_T_391 = mux(_ctrlSignals_T_87, UInt<1>("h0"), _ctrlSignals_T_390) @[Lookup.scala 34:39]
    node _ctrlSignals_T_392 = mux(_ctrlSignals_T_85, UInt<1>("h0"), _ctrlSignals_T_391) @[Lookup.scala 34:39]
    node _ctrlSignals_T_393 = mux(_ctrlSignals_T_83, UInt<1>("h0"), _ctrlSignals_T_392) @[Lookup.scala 34:39]
    node _ctrlSignals_T_394 = mux(_ctrlSignals_T_81, UInt<1>("h0"), _ctrlSignals_T_393) @[Lookup.scala 34:39]
    node _ctrlSignals_T_395 = mux(_ctrlSignals_T_79, UInt<1>("h0"), _ctrlSignals_T_394) @[Lookup.scala 34:39]
    node _ctrlSignals_T_396 = mux(_ctrlSignals_T_77, UInt<1>("h1"), _ctrlSignals_T_395) @[Lookup.scala 34:39]
    node _ctrlSignals_T_397 = mux(_ctrlSignals_T_75, UInt<1>("h0"), _ctrlSignals_T_396) @[Lookup.scala 34:39]
    node _ctrlSignals_T_398 = mux(_ctrlSignals_T_73, UInt<1>("h0"), _ctrlSignals_T_397) @[Lookup.scala 34:39]
    node _ctrlSignals_T_399 = mux(_ctrlSignals_T_71, UInt<1>("h0"), _ctrlSignals_T_398) @[Lookup.scala 34:39]
    node _ctrlSignals_T_400 = mux(_ctrlSignals_T_69, UInt<1>("h0"), _ctrlSignals_T_399) @[Lookup.scala 34:39]
    node _ctrlSignals_T_401 = mux(_ctrlSignals_T_67, UInt<1>("h0"), _ctrlSignals_T_400) @[Lookup.scala 34:39]
    node _ctrlSignals_T_402 = mux(_ctrlSignals_T_65, UInt<1>("h0"), _ctrlSignals_T_401) @[Lookup.scala 34:39]
    node _ctrlSignals_T_403 = mux(_ctrlSignals_T_63, UInt<1>("h0"), _ctrlSignals_T_402) @[Lookup.scala 34:39]
    node _ctrlSignals_T_404 = mux(_ctrlSignals_T_61, UInt<1>("h0"), _ctrlSignals_T_403) @[Lookup.scala 34:39]
    node _ctrlSignals_T_405 = mux(_ctrlSignals_T_59, UInt<1>("h0"), _ctrlSignals_T_404) @[Lookup.scala 34:39]
    node _ctrlSignals_T_406 = mux(_ctrlSignals_T_57, UInt<1>("h0"), _ctrlSignals_T_405) @[Lookup.scala 34:39]
    node _ctrlSignals_T_407 = mux(_ctrlSignals_T_55, UInt<1>("h0"), _ctrlSignals_T_406) @[Lookup.scala 34:39]
    node _ctrlSignals_T_408 = mux(_ctrlSignals_T_53, UInt<1>("h0"), _ctrlSignals_T_407) @[Lookup.scala 34:39]
    node _ctrlSignals_T_409 = mux(_ctrlSignals_T_51, UInt<1>("h0"), _ctrlSignals_T_408) @[Lookup.scala 34:39]
    node _ctrlSignals_T_410 = mux(_ctrlSignals_T_49, UInt<1>("h0"), _ctrlSignals_T_409) @[Lookup.scala 34:39]
    node _ctrlSignals_T_411 = mux(_ctrlSignals_T_47, UInt<1>("h0"), _ctrlSignals_T_410) @[Lookup.scala 34:39]
    node _ctrlSignals_T_412 = mux(_ctrlSignals_T_45, UInt<1>("h0"), _ctrlSignals_T_411) @[Lookup.scala 34:39]
    node _ctrlSignals_T_413 = mux(_ctrlSignals_T_43, UInt<1>("h0"), _ctrlSignals_T_412) @[Lookup.scala 34:39]
    node _ctrlSignals_T_414 = mux(_ctrlSignals_T_41, UInt<1>("h0"), _ctrlSignals_T_413) @[Lookup.scala 34:39]
    node _ctrlSignals_T_415 = mux(_ctrlSignals_T_39, UInt<1>("h0"), _ctrlSignals_T_414) @[Lookup.scala 34:39]
    node _ctrlSignals_T_416 = mux(_ctrlSignals_T_37, UInt<1>("h0"), _ctrlSignals_T_415) @[Lookup.scala 34:39]
    node _ctrlSignals_T_417 = mux(_ctrlSignals_T_35, UInt<1>("h0"), _ctrlSignals_T_416) @[Lookup.scala 34:39]
    node _ctrlSignals_T_418 = mux(_ctrlSignals_T_33, UInt<1>("h0"), _ctrlSignals_T_417) @[Lookup.scala 34:39]
    node _ctrlSignals_T_419 = mux(_ctrlSignals_T_31, UInt<1>("h0"), _ctrlSignals_T_418) @[Lookup.scala 34:39]
    node _ctrlSignals_T_420 = mux(_ctrlSignals_T_29, UInt<1>("h0"), _ctrlSignals_T_419) @[Lookup.scala 34:39]
    node _ctrlSignals_T_421 = mux(_ctrlSignals_T_27, UInt<1>("h0"), _ctrlSignals_T_420) @[Lookup.scala 34:39]
    node _ctrlSignals_T_422 = mux(_ctrlSignals_T_25, UInt<1>("h0"), _ctrlSignals_T_421) @[Lookup.scala 34:39]
    node _ctrlSignals_T_423 = mux(_ctrlSignals_T_23, UInt<1>("h0"), _ctrlSignals_T_422) @[Lookup.scala 34:39]
    node _ctrlSignals_T_424 = mux(_ctrlSignals_T_21, UInt<1>("h0"), _ctrlSignals_T_423) @[Lookup.scala 34:39]
    node _ctrlSignals_T_425 = mux(_ctrlSignals_T_19, UInt<1>("h0"), _ctrlSignals_T_424) @[Lookup.scala 34:39]
    node _ctrlSignals_T_426 = mux(_ctrlSignals_T_17, UInt<1>("h0"), _ctrlSignals_T_425) @[Lookup.scala 34:39]
    node _ctrlSignals_T_427 = mux(_ctrlSignals_T_15, UInt<1>("h0"), _ctrlSignals_T_426) @[Lookup.scala 34:39]
    node _ctrlSignals_T_428 = mux(_ctrlSignals_T_13, UInt<1>("h0"), _ctrlSignals_T_427) @[Lookup.scala 34:39]
    node _ctrlSignals_T_429 = mux(_ctrlSignals_T_11, UInt<1>("h0"), _ctrlSignals_T_428) @[Lookup.scala 34:39]
    node _ctrlSignals_T_430 = mux(_ctrlSignals_T_9, UInt<1>("h0"), _ctrlSignals_T_429) @[Lookup.scala 34:39]
    node _ctrlSignals_T_431 = mux(_ctrlSignals_T_7, UInt<1>("h1"), _ctrlSignals_T_430) @[Lookup.scala 34:39]
    node _ctrlSignals_T_432 = mux(_ctrlSignals_T_5, UInt<1>("h1"), _ctrlSignals_T_431) @[Lookup.scala 34:39]
    node _ctrlSignals_T_433 = mux(_ctrlSignals_T_3, UInt<1>("h0"), _ctrlSignals_T_432) @[Lookup.scala 34:39]
    node ctrlSignals_6 = mux(_ctrlSignals_T_1, UInt<1>("h0"), _ctrlSignals_T_433) @[Lookup.scala 34:39]
    node _ctrlSignals_T_434 = mux(_ctrlSignals_T_97, UInt<2>("h0"), UInt<2>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_435 = mux(_ctrlSignals_T_95, UInt<2>("h0"), _ctrlSignals_T_434) @[Lookup.scala 34:39]
    node _ctrlSignals_T_436 = mux(_ctrlSignals_T_93, UInt<2>("h0"), _ctrlSignals_T_435) @[Lookup.scala 34:39]
    node _ctrlSignals_T_437 = mux(_ctrlSignals_T_91, UInt<2>("h0"), _ctrlSignals_T_436) @[Lookup.scala 34:39]
    node _ctrlSignals_T_438 = mux(_ctrlSignals_T_89, UInt<2>("h0"), _ctrlSignals_T_437) @[Lookup.scala 34:39]
    node _ctrlSignals_T_439 = mux(_ctrlSignals_T_87, UInt<2>("h0"), _ctrlSignals_T_438) @[Lookup.scala 34:39]
    node _ctrlSignals_T_440 = mux(_ctrlSignals_T_85, UInt<2>("h0"), _ctrlSignals_T_439) @[Lookup.scala 34:39]
    node _ctrlSignals_T_441 = mux(_ctrlSignals_T_83, UInt<2>("h0"), _ctrlSignals_T_440) @[Lookup.scala 34:39]
    node _ctrlSignals_T_442 = mux(_ctrlSignals_T_81, UInt<2>("h0"), _ctrlSignals_T_441) @[Lookup.scala 34:39]
    node _ctrlSignals_T_443 = mux(_ctrlSignals_T_79, UInt<2>("h0"), _ctrlSignals_T_442) @[Lookup.scala 34:39]
    node _ctrlSignals_T_444 = mux(_ctrlSignals_T_77, UInt<2>("h0"), _ctrlSignals_T_443) @[Lookup.scala 34:39]
    node _ctrlSignals_T_445 = mux(_ctrlSignals_T_75, UInt<2>("h0"), _ctrlSignals_T_444) @[Lookup.scala 34:39]
    node _ctrlSignals_T_446 = mux(_ctrlSignals_T_73, UInt<2>("h0"), _ctrlSignals_T_445) @[Lookup.scala 34:39]
    node _ctrlSignals_T_447 = mux(_ctrlSignals_T_71, UInt<2>("h0"), _ctrlSignals_T_446) @[Lookup.scala 34:39]
    node _ctrlSignals_T_448 = mux(_ctrlSignals_T_69, UInt<2>("h0"), _ctrlSignals_T_447) @[Lookup.scala 34:39]
    node _ctrlSignals_T_449 = mux(_ctrlSignals_T_67, UInt<2>("h0"), _ctrlSignals_T_448) @[Lookup.scala 34:39]
    node _ctrlSignals_T_450 = mux(_ctrlSignals_T_65, UInt<2>("h0"), _ctrlSignals_T_449) @[Lookup.scala 34:39]
    node _ctrlSignals_T_451 = mux(_ctrlSignals_T_63, UInt<2>("h0"), _ctrlSignals_T_450) @[Lookup.scala 34:39]
    node _ctrlSignals_T_452 = mux(_ctrlSignals_T_61, UInt<2>("h0"), _ctrlSignals_T_451) @[Lookup.scala 34:39]
    node _ctrlSignals_T_453 = mux(_ctrlSignals_T_59, UInt<2>("h0"), _ctrlSignals_T_452) @[Lookup.scala 34:39]
    node _ctrlSignals_T_454 = mux(_ctrlSignals_T_57, UInt<2>("h0"), _ctrlSignals_T_453) @[Lookup.scala 34:39]
    node _ctrlSignals_T_455 = mux(_ctrlSignals_T_55, UInt<2>("h0"), _ctrlSignals_T_454) @[Lookup.scala 34:39]
    node _ctrlSignals_T_456 = mux(_ctrlSignals_T_53, UInt<2>("h0"), _ctrlSignals_T_455) @[Lookup.scala 34:39]
    node _ctrlSignals_T_457 = mux(_ctrlSignals_T_51, UInt<2>("h0"), _ctrlSignals_T_456) @[Lookup.scala 34:39]
    node _ctrlSignals_T_458 = mux(_ctrlSignals_T_49, UInt<2>("h0"), _ctrlSignals_T_457) @[Lookup.scala 34:39]
    node _ctrlSignals_T_459 = mux(_ctrlSignals_T_47, UInt<2>("h0"), _ctrlSignals_T_458) @[Lookup.scala 34:39]
    node _ctrlSignals_T_460 = mux(_ctrlSignals_T_45, UInt<2>("h0"), _ctrlSignals_T_459) @[Lookup.scala 34:39]
    node _ctrlSignals_T_461 = mux(_ctrlSignals_T_43, UInt<2>("h0"), _ctrlSignals_T_460) @[Lookup.scala 34:39]
    node _ctrlSignals_T_462 = mux(_ctrlSignals_T_41, UInt<2>("h0"), _ctrlSignals_T_461) @[Lookup.scala 34:39]
    node _ctrlSignals_T_463 = mux(_ctrlSignals_T_39, UInt<2>("h0"), _ctrlSignals_T_462) @[Lookup.scala 34:39]
    node _ctrlSignals_T_464 = mux(_ctrlSignals_T_37, UInt<2>("h0"), _ctrlSignals_T_463) @[Lookup.scala 34:39]
    node _ctrlSignals_T_465 = mux(_ctrlSignals_T_35, UInt<2>("h1"), _ctrlSignals_T_464) @[Lookup.scala 34:39]
    node _ctrlSignals_T_466 = mux(_ctrlSignals_T_33, UInt<2>("h2"), _ctrlSignals_T_465) @[Lookup.scala 34:39]
    node _ctrlSignals_T_467 = mux(_ctrlSignals_T_31, UInt<2>("h3"), _ctrlSignals_T_466) @[Lookup.scala 34:39]
    node _ctrlSignals_T_468 = mux(_ctrlSignals_T_29, UInt<2>("h0"), _ctrlSignals_T_467) @[Lookup.scala 34:39]
    node _ctrlSignals_T_469 = mux(_ctrlSignals_T_27, UInt<2>("h0"), _ctrlSignals_T_468) @[Lookup.scala 34:39]
    node _ctrlSignals_T_470 = mux(_ctrlSignals_T_25, UInt<2>("h0"), _ctrlSignals_T_469) @[Lookup.scala 34:39]
    node _ctrlSignals_T_471 = mux(_ctrlSignals_T_23, UInt<2>("h0"), _ctrlSignals_T_470) @[Lookup.scala 34:39]
    node _ctrlSignals_T_472 = mux(_ctrlSignals_T_21, UInt<2>("h0"), _ctrlSignals_T_471) @[Lookup.scala 34:39]
    node _ctrlSignals_T_473 = mux(_ctrlSignals_T_19, UInt<2>("h0"), _ctrlSignals_T_472) @[Lookup.scala 34:39]
    node _ctrlSignals_T_474 = mux(_ctrlSignals_T_17, UInt<2>("h0"), _ctrlSignals_T_473) @[Lookup.scala 34:39]
    node _ctrlSignals_T_475 = mux(_ctrlSignals_T_15, UInt<2>("h0"), _ctrlSignals_T_474) @[Lookup.scala 34:39]
    node _ctrlSignals_T_476 = mux(_ctrlSignals_T_13, UInt<2>("h0"), _ctrlSignals_T_475) @[Lookup.scala 34:39]
    node _ctrlSignals_T_477 = mux(_ctrlSignals_T_11, UInt<2>("h0"), _ctrlSignals_T_476) @[Lookup.scala 34:39]
    node _ctrlSignals_T_478 = mux(_ctrlSignals_T_9, UInt<2>("h0"), _ctrlSignals_T_477) @[Lookup.scala 34:39]
    node _ctrlSignals_T_479 = mux(_ctrlSignals_T_7, UInt<2>("h0"), _ctrlSignals_T_478) @[Lookup.scala 34:39]
    node _ctrlSignals_T_480 = mux(_ctrlSignals_T_5, UInt<2>("h0"), _ctrlSignals_T_479) @[Lookup.scala 34:39]
    node _ctrlSignals_T_481 = mux(_ctrlSignals_T_3, UInt<2>("h0"), _ctrlSignals_T_480) @[Lookup.scala 34:39]
    node ctrlSignals_7 = mux(_ctrlSignals_T_1, UInt<2>("h0"), _ctrlSignals_T_481) @[Lookup.scala 34:39]
    node _ctrlSignals_T_482 = mux(_ctrlSignals_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_483 = mux(_ctrlSignals_T_95, UInt<3>("h0"), _ctrlSignals_T_482) @[Lookup.scala 34:39]
    node _ctrlSignals_T_484 = mux(_ctrlSignals_T_93, UInt<3>("h0"), _ctrlSignals_T_483) @[Lookup.scala 34:39]
    node _ctrlSignals_T_485 = mux(_ctrlSignals_T_91, UInt<3>("h0"), _ctrlSignals_T_484) @[Lookup.scala 34:39]
    node _ctrlSignals_T_486 = mux(_ctrlSignals_T_89, UInt<3>("h0"), _ctrlSignals_T_485) @[Lookup.scala 34:39]
    node _ctrlSignals_T_487 = mux(_ctrlSignals_T_87, UInt<3>("h0"), _ctrlSignals_T_486) @[Lookup.scala 34:39]
    node _ctrlSignals_T_488 = mux(_ctrlSignals_T_85, UInt<3>("h0"), _ctrlSignals_T_487) @[Lookup.scala 34:39]
    node _ctrlSignals_T_489 = mux(_ctrlSignals_T_83, UInt<3>("h0"), _ctrlSignals_T_488) @[Lookup.scala 34:39]
    node _ctrlSignals_T_490 = mux(_ctrlSignals_T_81, UInt<3>("h0"), _ctrlSignals_T_489) @[Lookup.scala 34:39]
    node _ctrlSignals_T_491 = mux(_ctrlSignals_T_79, UInt<3>("h0"), _ctrlSignals_T_490) @[Lookup.scala 34:39]
    node _ctrlSignals_T_492 = mux(_ctrlSignals_T_77, UInt<3>("h0"), _ctrlSignals_T_491) @[Lookup.scala 34:39]
    node _ctrlSignals_T_493 = mux(_ctrlSignals_T_75, UInt<3>("h0"), _ctrlSignals_T_492) @[Lookup.scala 34:39]
    node _ctrlSignals_T_494 = mux(_ctrlSignals_T_73, UInt<3>("h0"), _ctrlSignals_T_493) @[Lookup.scala 34:39]
    node _ctrlSignals_T_495 = mux(_ctrlSignals_T_71, UInt<3>("h0"), _ctrlSignals_T_494) @[Lookup.scala 34:39]
    node _ctrlSignals_T_496 = mux(_ctrlSignals_T_69, UInt<3>("h0"), _ctrlSignals_T_495) @[Lookup.scala 34:39]
    node _ctrlSignals_T_497 = mux(_ctrlSignals_T_67, UInt<3>("h0"), _ctrlSignals_T_496) @[Lookup.scala 34:39]
    node _ctrlSignals_T_498 = mux(_ctrlSignals_T_65, UInt<3>("h0"), _ctrlSignals_T_497) @[Lookup.scala 34:39]
    node _ctrlSignals_T_499 = mux(_ctrlSignals_T_63, UInt<3>("h0"), _ctrlSignals_T_498) @[Lookup.scala 34:39]
    node _ctrlSignals_T_500 = mux(_ctrlSignals_T_61, UInt<3>("h0"), _ctrlSignals_T_499) @[Lookup.scala 34:39]
    node _ctrlSignals_T_501 = mux(_ctrlSignals_T_59, UInt<3>("h0"), _ctrlSignals_T_500) @[Lookup.scala 34:39]
    node _ctrlSignals_T_502 = mux(_ctrlSignals_T_57, UInt<3>("h0"), _ctrlSignals_T_501) @[Lookup.scala 34:39]
    node _ctrlSignals_T_503 = mux(_ctrlSignals_T_55, UInt<3>("h0"), _ctrlSignals_T_502) @[Lookup.scala 34:39]
    node _ctrlSignals_T_504 = mux(_ctrlSignals_T_53, UInt<3>("h0"), _ctrlSignals_T_503) @[Lookup.scala 34:39]
    node _ctrlSignals_T_505 = mux(_ctrlSignals_T_51, UInt<3>("h0"), _ctrlSignals_T_504) @[Lookup.scala 34:39]
    node _ctrlSignals_T_506 = mux(_ctrlSignals_T_49, UInt<3>("h0"), _ctrlSignals_T_505) @[Lookup.scala 34:39]
    node _ctrlSignals_T_507 = mux(_ctrlSignals_T_47, UInt<3>("h0"), _ctrlSignals_T_506) @[Lookup.scala 34:39]
    node _ctrlSignals_T_508 = mux(_ctrlSignals_T_45, UInt<3>("h0"), _ctrlSignals_T_507) @[Lookup.scala 34:39]
    node _ctrlSignals_T_509 = mux(_ctrlSignals_T_43, UInt<3>("h0"), _ctrlSignals_T_508) @[Lookup.scala 34:39]
    node _ctrlSignals_T_510 = mux(_ctrlSignals_T_41, UInt<3>("h0"), _ctrlSignals_T_509) @[Lookup.scala 34:39]
    node _ctrlSignals_T_511 = mux(_ctrlSignals_T_39, UInt<3>("h0"), _ctrlSignals_T_510) @[Lookup.scala 34:39]
    node _ctrlSignals_T_512 = mux(_ctrlSignals_T_37, UInt<3>("h0"), _ctrlSignals_T_511) @[Lookup.scala 34:39]
    node _ctrlSignals_T_513 = mux(_ctrlSignals_T_35, UInt<3>("h0"), _ctrlSignals_T_512) @[Lookup.scala 34:39]
    node _ctrlSignals_T_514 = mux(_ctrlSignals_T_33, UInt<3>("h0"), _ctrlSignals_T_513) @[Lookup.scala 34:39]
    node _ctrlSignals_T_515 = mux(_ctrlSignals_T_31, UInt<3>("h0"), _ctrlSignals_T_514) @[Lookup.scala 34:39]
    node _ctrlSignals_T_516 = mux(_ctrlSignals_T_29, UInt<3>("h4"), _ctrlSignals_T_515) @[Lookup.scala 34:39]
    node _ctrlSignals_T_517 = mux(_ctrlSignals_T_27, UInt<3>("h5"), _ctrlSignals_T_516) @[Lookup.scala 34:39]
    node _ctrlSignals_T_518 = mux(_ctrlSignals_T_25, UInt<3>("h1"), _ctrlSignals_T_517) @[Lookup.scala 34:39]
    node _ctrlSignals_T_519 = mux(_ctrlSignals_T_23, UInt<3>("h2"), _ctrlSignals_T_518) @[Lookup.scala 34:39]
    node _ctrlSignals_T_520 = mux(_ctrlSignals_T_21, UInt<3>("h3"), _ctrlSignals_T_519) @[Lookup.scala 34:39]
    node _ctrlSignals_T_521 = mux(_ctrlSignals_T_19, UInt<3>("h0"), _ctrlSignals_T_520) @[Lookup.scala 34:39]
    node _ctrlSignals_T_522 = mux(_ctrlSignals_T_17, UInt<3>("h0"), _ctrlSignals_T_521) @[Lookup.scala 34:39]
    node _ctrlSignals_T_523 = mux(_ctrlSignals_T_15, UInt<3>("h0"), _ctrlSignals_T_522) @[Lookup.scala 34:39]
    node _ctrlSignals_T_524 = mux(_ctrlSignals_T_13, UInt<3>("h0"), _ctrlSignals_T_523) @[Lookup.scala 34:39]
    node _ctrlSignals_T_525 = mux(_ctrlSignals_T_11, UInt<3>("h0"), _ctrlSignals_T_524) @[Lookup.scala 34:39]
    node _ctrlSignals_T_526 = mux(_ctrlSignals_T_9, UInt<3>("h0"), _ctrlSignals_T_525) @[Lookup.scala 34:39]
    node _ctrlSignals_T_527 = mux(_ctrlSignals_T_7, UInt<3>("h0"), _ctrlSignals_T_526) @[Lookup.scala 34:39]
    node _ctrlSignals_T_528 = mux(_ctrlSignals_T_5, UInt<3>("h0"), _ctrlSignals_T_527) @[Lookup.scala 34:39]
    node _ctrlSignals_T_529 = mux(_ctrlSignals_T_3, UInt<3>("h0"), _ctrlSignals_T_528) @[Lookup.scala 34:39]
    node ctrlSignals_8 = mux(_ctrlSignals_T_1, UInt<3>("h0"), _ctrlSignals_T_529) @[Lookup.scala 34:39]
    node _ctrlSignals_T_530 = mux(_ctrlSignals_T_97, UInt<2>("h0"), UInt<2>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_531 = mux(_ctrlSignals_T_95, UInt<2>("h3"), _ctrlSignals_T_530) @[Lookup.scala 34:39]
    node _ctrlSignals_T_532 = mux(_ctrlSignals_T_93, UInt<2>("h3"), _ctrlSignals_T_531) @[Lookup.scala 34:39]
    node _ctrlSignals_T_533 = mux(_ctrlSignals_T_91, UInt<2>("h3"), _ctrlSignals_T_532) @[Lookup.scala 34:39]
    node _ctrlSignals_T_534 = mux(_ctrlSignals_T_89, UInt<2>("h3"), _ctrlSignals_T_533) @[Lookup.scala 34:39]
    node _ctrlSignals_T_535 = mux(_ctrlSignals_T_87, UInt<2>("h3"), _ctrlSignals_T_534) @[Lookup.scala 34:39]
    node _ctrlSignals_T_536 = mux(_ctrlSignals_T_85, UInt<2>("h3"), _ctrlSignals_T_535) @[Lookup.scala 34:39]
    node _ctrlSignals_T_537 = mux(_ctrlSignals_T_83, UInt<2>("h3"), _ctrlSignals_T_536) @[Lookup.scala 34:39]
    node _ctrlSignals_T_538 = mux(_ctrlSignals_T_81, UInt<2>("h3"), _ctrlSignals_T_537) @[Lookup.scala 34:39]
    node _ctrlSignals_T_539 = mux(_ctrlSignals_T_79, UInt<2>("h3"), _ctrlSignals_T_538) @[Lookup.scala 34:39]
    node _ctrlSignals_T_540 = mux(_ctrlSignals_T_77, UInt<2>("h0"), _ctrlSignals_T_539) @[Lookup.scala 34:39]
    node _ctrlSignals_T_541 = mux(_ctrlSignals_T_75, UInt<2>("h0"), _ctrlSignals_T_540) @[Lookup.scala 34:39]
    node _ctrlSignals_T_542 = mux(_ctrlSignals_T_73, UInt<2>("h0"), _ctrlSignals_T_541) @[Lookup.scala 34:39]
    node _ctrlSignals_T_543 = mux(_ctrlSignals_T_71, UInt<2>("h0"), _ctrlSignals_T_542) @[Lookup.scala 34:39]
    node _ctrlSignals_T_544 = mux(_ctrlSignals_T_69, UInt<2>("h0"), _ctrlSignals_T_543) @[Lookup.scala 34:39]
    node _ctrlSignals_T_545 = mux(_ctrlSignals_T_67, UInt<2>("h0"), _ctrlSignals_T_544) @[Lookup.scala 34:39]
    node _ctrlSignals_T_546 = mux(_ctrlSignals_T_65, UInt<2>("h0"), _ctrlSignals_T_545) @[Lookup.scala 34:39]
    node _ctrlSignals_T_547 = mux(_ctrlSignals_T_63, UInt<2>("h0"), _ctrlSignals_T_546) @[Lookup.scala 34:39]
    node _ctrlSignals_T_548 = mux(_ctrlSignals_T_61, UInt<2>("h0"), _ctrlSignals_T_547) @[Lookup.scala 34:39]
    node _ctrlSignals_T_549 = mux(_ctrlSignals_T_59, UInt<2>("h0"), _ctrlSignals_T_548) @[Lookup.scala 34:39]
    node _ctrlSignals_T_550 = mux(_ctrlSignals_T_57, UInt<2>("h0"), _ctrlSignals_T_549) @[Lookup.scala 34:39]
    node _ctrlSignals_T_551 = mux(_ctrlSignals_T_55, UInt<2>("h0"), _ctrlSignals_T_550) @[Lookup.scala 34:39]
    node _ctrlSignals_T_552 = mux(_ctrlSignals_T_53, UInt<2>("h0"), _ctrlSignals_T_551) @[Lookup.scala 34:39]
    node _ctrlSignals_T_553 = mux(_ctrlSignals_T_51, UInt<2>("h0"), _ctrlSignals_T_552) @[Lookup.scala 34:39]
    node _ctrlSignals_T_554 = mux(_ctrlSignals_T_49, UInt<2>("h0"), _ctrlSignals_T_553) @[Lookup.scala 34:39]
    node _ctrlSignals_T_555 = mux(_ctrlSignals_T_47, UInt<2>("h0"), _ctrlSignals_T_554) @[Lookup.scala 34:39]
    node _ctrlSignals_T_556 = mux(_ctrlSignals_T_45, UInt<2>("h0"), _ctrlSignals_T_555) @[Lookup.scala 34:39]
    node _ctrlSignals_T_557 = mux(_ctrlSignals_T_43, UInt<2>("h0"), _ctrlSignals_T_556) @[Lookup.scala 34:39]
    node _ctrlSignals_T_558 = mux(_ctrlSignals_T_41, UInt<2>("h0"), _ctrlSignals_T_557) @[Lookup.scala 34:39]
    node _ctrlSignals_T_559 = mux(_ctrlSignals_T_39, UInt<2>("h0"), _ctrlSignals_T_558) @[Lookup.scala 34:39]
    node _ctrlSignals_T_560 = mux(_ctrlSignals_T_37, UInt<2>("h0"), _ctrlSignals_T_559) @[Lookup.scala 34:39]
    node _ctrlSignals_T_561 = mux(_ctrlSignals_T_35, UInt<2>("h0"), _ctrlSignals_T_560) @[Lookup.scala 34:39]
    node _ctrlSignals_T_562 = mux(_ctrlSignals_T_33, UInt<2>("h0"), _ctrlSignals_T_561) @[Lookup.scala 34:39]
    node _ctrlSignals_T_563 = mux(_ctrlSignals_T_31, UInt<2>("h0"), _ctrlSignals_T_562) @[Lookup.scala 34:39]
    node _ctrlSignals_T_564 = mux(_ctrlSignals_T_29, UInt<2>("h1"), _ctrlSignals_T_563) @[Lookup.scala 34:39]
    node _ctrlSignals_T_565 = mux(_ctrlSignals_T_27, UInt<2>("h1"), _ctrlSignals_T_564) @[Lookup.scala 34:39]
    node _ctrlSignals_T_566 = mux(_ctrlSignals_T_25, UInt<2>("h1"), _ctrlSignals_T_565) @[Lookup.scala 34:39]
    node _ctrlSignals_T_567 = mux(_ctrlSignals_T_23, UInt<2>("h1"), _ctrlSignals_T_566) @[Lookup.scala 34:39]
    node _ctrlSignals_T_568 = mux(_ctrlSignals_T_21, UInt<2>("h1"), _ctrlSignals_T_567) @[Lookup.scala 34:39]
    node _ctrlSignals_T_569 = mux(_ctrlSignals_T_19, UInt<2>("h0"), _ctrlSignals_T_568) @[Lookup.scala 34:39]
    node _ctrlSignals_T_570 = mux(_ctrlSignals_T_17, UInt<2>("h0"), _ctrlSignals_T_569) @[Lookup.scala 34:39]
    node _ctrlSignals_T_571 = mux(_ctrlSignals_T_15, UInt<2>("h0"), _ctrlSignals_T_570) @[Lookup.scala 34:39]
    node _ctrlSignals_T_572 = mux(_ctrlSignals_T_13, UInt<2>("h0"), _ctrlSignals_T_571) @[Lookup.scala 34:39]
    node _ctrlSignals_T_573 = mux(_ctrlSignals_T_11, UInt<2>("h0"), _ctrlSignals_T_572) @[Lookup.scala 34:39]
    node _ctrlSignals_T_574 = mux(_ctrlSignals_T_9, UInt<2>("h0"), _ctrlSignals_T_573) @[Lookup.scala 34:39]
    node _ctrlSignals_T_575 = mux(_ctrlSignals_T_7, UInt<2>("h2"), _ctrlSignals_T_574) @[Lookup.scala 34:39]
    node _ctrlSignals_T_576 = mux(_ctrlSignals_T_5, UInt<2>("h2"), _ctrlSignals_T_575) @[Lookup.scala 34:39]
    node _ctrlSignals_T_577 = mux(_ctrlSignals_T_3, UInt<2>("h0"), _ctrlSignals_T_576) @[Lookup.scala 34:39]
    node ctrlSignals_9 = mux(_ctrlSignals_T_1, UInt<2>("h0"), _ctrlSignals_T_577) @[Lookup.scala 34:39]
    node _ctrlSignals_T_578 = mux(_ctrlSignals_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_579 = mux(_ctrlSignals_T_95, UInt<1>("h0"), _ctrlSignals_T_578) @[Lookup.scala 34:39]
    node _ctrlSignals_T_580 = mux(_ctrlSignals_T_93, UInt<1>("h0"), _ctrlSignals_T_579) @[Lookup.scala 34:39]
    node _ctrlSignals_T_581 = mux(_ctrlSignals_T_91, UInt<1>("h0"), _ctrlSignals_T_580) @[Lookup.scala 34:39]
    node _ctrlSignals_T_582 = mux(_ctrlSignals_T_89, UInt<1>("h1"), _ctrlSignals_T_581) @[Lookup.scala 34:39]
    node _ctrlSignals_T_583 = mux(_ctrlSignals_T_87, UInt<1>("h1"), _ctrlSignals_T_582) @[Lookup.scala 34:39]
    node _ctrlSignals_T_584 = mux(_ctrlSignals_T_85, UInt<1>("h1"), _ctrlSignals_T_583) @[Lookup.scala 34:39]
    node _ctrlSignals_T_585 = mux(_ctrlSignals_T_83, UInt<1>("h1"), _ctrlSignals_T_584) @[Lookup.scala 34:39]
    node _ctrlSignals_T_586 = mux(_ctrlSignals_T_81, UInt<1>("h1"), _ctrlSignals_T_585) @[Lookup.scala 34:39]
    node _ctrlSignals_T_587 = mux(_ctrlSignals_T_79, UInt<1>("h1"), _ctrlSignals_T_586) @[Lookup.scala 34:39]
    node _ctrlSignals_T_588 = mux(_ctrlSignals_T_77, UInt<1>("h0"), _ctrlSignals_T_587) @[Lookup.scala 34:39]
    node _ctrlSignals_T_589 = mux(_ctrlSignals_T_75, UInt<1>("h0"), _ctrlSignals_T_588) @[Lookup.scala 34:39]
    node _ctrlSignals_T_590 = mux(_ctrlSignals_T_73, UInt<1>("h1"), _ctrlSignals_T_589) @[Lookup.scala 34:39]
    node _ctrlSignals_T_591 = mux(_ctrlSignals_T_71, UInt<1>("h1"), _ctrlSignals_T_590) @[Lookup.scala 34:39]
    node _ctrlSignals_T_592 = mux(_ctrlSignals_T_69, UInt<1>("h1"), _ctrlSignals_T_591) @[Lookup.scala 34:39]
    node _ctrlSignals_T_593 = mux(_ctrlSignals_T_67, UInt<1>("h1"), _ctrlSignals_T_592) @[Lookup.scala 34:39]
    node _ctrlSignals_T_594 = mux(_ctrlSignals_T_65, UInt<1>("h1"), _ctrlSignals_T_593) @[Lookup.scala 34:39]
    node _ctrlSignals_T_595 = mux(_ctrlSignals_T_63, UInt<1>("h1"), _ctrlSignals_T_594) @[Lookup.scala 34:39]
    node _ctrlSignals_T_596 = mux(_ctrlSignals_T_61, UInt<1>("h1"), _ctrlSignals_T_595) @[Lookup.scala 34:39]
    node _ctrlSignals_T_597 = mux(_ctrlSignals_T_59, UInt<1>("h1"), _ctrlSignals_T_596) @[Lookup.scala 34:39]
    node _ctrlSignals_T_598 = mux(_ctrlSignals_T_57, UInt<1>("h1"), _ctrlSignals_T_597) @[Lookup.scala 34:39]
    node _ctrlSignals_T_599 = mux(_ctrlSignals_T_55, UInt<1>("h1"), _ctrlSignals_T_598) @[Lookup.scala 34:39]
    node _ctrlSignals_T_600 = mux(_ctrlSignals_T_53, UInt<1>("h1"), _ctrlSignals_T_599) @[Lookup.scala 34:39]
    node _ctrlSignals_T_601 = mux(_ctrlSignals_T_51, UInt<1>("h1"), _ctrlSignals_T_600) @[Lookup.scala 34:39]
    node _ctrlSignals_T_602 = mux(_ctrlSignals_T_49, UInt<1>("h1"), _ctrlSignals_T_601) @[Lookup.scala 34:39]
    node _ctrlSignals_T_603 = mux(_ctrlSignals_T_47, UInt<1>("h1"), _ctrlSignals_T_602) @[Lookup.scala 34:39]
    node _ctrlSignals_T_604 = mux(_ctrlSignals_T_45, UInt<1>("h1"), _ctrlSignals_T_603) @[Lookup.scala 34:39]
    node _ctrlSignals_T_605 = mux(_ctrlSignals_T_43, UInt<1>("h1"), _ctrlSignals_T_604) @[Lookup.scala 34:39]
    node _ctrlSignals_T_606 = mux(_ctrlSignals_T_41, UInt<1>("h1"), _ctrlSignals_T_605) @[Lookup.scala 34:39]
    node _ctrlSignals_T_607 = mux(_ctrlSignals_T_39, UInt<1>("h1"), _ctrlSignals_T_606) @[Lookup.scala 34:39]
    node _ctrlSignals_T_608 = mux(_ctrlSignals_T_37, UInt<1>("h1"), _ctrlSignals_T_607) @[Lookup.scala 34:39]
    node _ctrlSignals_T_609 = mux(_ctrlSignals_T_35, UInt<1>("h0"), _ctrlSignals_T_608) @[Lookup.scala 34:39]
    node _ctrlSignals_T_610 = mux(_ctrlSignals_T_33, UInt<1>("h0"), _ctrlSignals_T_609) @[Lookup.scala 34:39]
    node _ctrlSignals_T_611 = mux(_ctrlSignals_T_31, UInt<1>("h0"), _ctrlSignals_T_610) @[Lookup.scala 34:39]
    node _ctrlSignals_T_612 = mux(_ctrlSignals_T_29, UInt<1>("h1"), _ctrlSignals_T_611) @[Lookup.scala 34:39]
    node _ctrlSignals_T_613 = mux(_ctrlSignals_T_27, UInt<1>("h1"), _ctrlSignals_T_612) @[Lookup.scala 34:39]
    node _ctrlSignals_T_614 = mux(_ctrlSignals_T_25, UInt<1>("h1"), _ctrlSignals_T_613) @[Lookup.scala 34:39]
    node _ctrlSignals_T_615 = mux(_ctrlSignals_T_23, UInt<1>("h1"), _ctrlSignals_T_614) @[Lookup.scala 34:39]
    node _ctrlSignals_T_616 = mux(_ctrlSignals_T_21, UInt<1>("h1"), _ctrlSignals_T_615) @[Lookup.scala 34:39]
    node _ctrlSignals_T_617 = mux(_ctrlSignals_T_19, UInt<1>("h0"), _ctrlSignals_T_616) @[Lookup.scala 34:39]
    node _ctrlSignals_T_618 = mux(_ctrlSignals_T_17, UInt<1>("h0"), _ctrlSignals_T_617) @[Lookup.scala 34:39]
    node _ctrlSignals_T_619 = mux(_ctrlSignals_T_15, UInt<1>("h0"), _ctrlSignals_T_618) @[Lookup.scala 34:39]
    node _ctrlSignals_T_620 = mux(_ctrlSignals_T_13, UInt<1>("h0"), _ctrlSignals_T_619) @[Lookup.scala 34:39]
    node _ctrlSignals_T_621 = mux(_ctrlSignals_T_11, UInt<1>("h0"), _ctrlSignals_T_620) @[Lookup.scala 34:39]
    node _ctrlSignals_T_622 = mux(_ctrlSignals_T_9, UInt<1>("h0"), _ctrlSignals_T_621) @[Lookup.scala 34:39]
    node _ctrlSignals_T_623 = mux(_ctrlSignals_T_7, UInt<1>("h1"), _ctrlSignals_T_622) @[Lookup.scala 34:39]
    node _ctrlSignals_T_624 = mux(_ctrlSignals_T_5, UInt<1>("h1"), _ctrlSignals_T_623) @[Lookup.scala 34:39]
    node _ctrlSignals_T_625 = mux(_ctrlSignals_T_3, UInt<1>("h1"), _ctrlSignals_T_624) @[Lookup.scala 34:39]
    node ctrlSignals_10 = mux(_ctrlSignals_T_1, UInt<1>("h1"), _ctrlSignals_T_625) @[Lookup.scala 34:39]
    node _ctrlSignals_T_626 = mux(_ctrlSignals_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_627 = mux(_ctrlSignals_T_95, UInt<3>("h4"), _ctrlSignals_T_626) @[Lookup.scala 34:39]
    node _ctrlSignals_T_628 = mux(_ctrlSignals_T_93, UInt<3>("h4"), _ctrlSignals_T_627) @[Lookup.scala 34:39]
    node _ctrlSignals_T_629 = mux(_ctrlSignals_T_91, UInt<3>("h4"), _ctrlSignals_T_628) @[Lookup.scala 34:39]
    node _ctrlSignals_T_630 = mux(_ctrlSignals_T_89, UInt<3>("h3"), _ctrlSignals_T_629) @[Lookup.scala 34:39]
    node _ctrlSignals_T_631 = mux(_ctrlSignals_T_87, UInt<3>("h2"), _ctrlSignals_T_630) @[Lookup.scala 34:39]
    node _ctrlSignals_T_632 = mux(_ctrlSignals_T_85, UInt<3>("h1"), _ctrlSignals_T_631) @[Lookup.scala 34:39]
    node _ctrlSignals_T_633 = mux(_ctrlSignals_T_83, UInt<3>("h3"), _ctrlSignals_T_632) @[Lookup.scala 34:39]
    node _ctrlSignals_T_634 = mux(_ctrlSignals_T_81, UInt<3>("h2"), _ctrlSignals_T_633) @[Lookup.scala 34:39]
    node _ctrlSignals_T_635 = mux(_ctrlSignals_T_79, UInt<3>("h1"), _ctrlSignals_T_634) @[Lookup.scala 34:39]
    node _ctrlSignals_T_636 = mux(_ctrlSignals_T_77, UInt<3>("h0"), _ctrlSignals_T_635) @[Lookup.scala 34:39]
    node _ctrlSignals_T_637 = mux(_ctrlSignals_T_75, UInt<3>("h0"), _ctrlSignals_T_636) @[Lookup.scala 34:39]
    node _ctrlSignals_T_638 = mux(_ctrlSignals_T_73, UInt<3>("h0"), _ctrlSignals_T_637) @[Lookup.scala 34:39]
    node _ctrlSignals_T_639 = mux(_ctrlSignals_T_71, UInt<3>("h0"), _ctrlSignals_T_638) @[Lookup.scala 34:39]
    node _ctrlSignals_T_640 = mux(_ctrlSignals_T_69, UInt<3>("h0"), _ctrlSignals_T_639) @[Lookup.scala 34:39]
    node _ctrlSignals_T_641 = mux(_ctrlSignals_T_67, UInt<3>("h0"), _ctrlSignals_T_640) @[Lookup.scala 34:39]
    node _ctrlSignals_T_642 = mux(_ctrlSignals_T_65, UInt<3>("h0"), _ctrlSignals_T_641) @[Lookup.scala 34:39]
    node _ctrlSignals_T_643 = mux(_ctrlSignals_T_63, UInt<3>("h0"), _ctrlSignals_T_642) @[Lookup.scala 34:39]
    node _ctrlSignals_T_644 = mux(_ctrlSignals_T_61, UInt<3>("h0"), _ctrlSignals_T_643) @[Lookup.scala 34:39]
    node _ctrlSignals_T_645 = mux(_ctrlSignals_T_59, UInt<3>("h0"), _ctrlSignals_T_644) @[Lookup.scala 34:39]
    node _ctrlSignals_T_646 = mux(_ctrlSignals_T_57, UInt<3>("h0"), _ctrlSignals_T_645) @[Lookup.scala 34:39]
    node _ctrlSignals_T_647 = mux(_ctrlSignals_T_55, UInt<3>("h0"), _ctrlSignals_T_646) @[Lookup.scala 34:39]
    node _ctrlSignals_T_648 = mux(_ctrlSignals_T_53, UInt<3>("h0"), _ctrlSignals_T_647) @[Lookup.scala 34:39]
    node _ctrlSignals_T_649 = mux(_ctrlSignals_T_51, UInt<3>("h0"), _ctrlSignals_T_648) @[Lookup.scala 34:39]
    node _ctrlSignals_T_650 = mux(_ctrlSignals_T_49, UInt<3>("h0"), _ctrlSignals_T_649) @[Lookup.scala 34:39]
    node _ctrlSignals_T_651 = mux(_ctrlSignals_T_47, UInt<3>("h0"), _ctrlSignals_T_650) @[Lookup.scala 34:39]
    node _ctrlSignals_T_652 = mux(_ctrlSignals_T_45, UInt<3>("h0"), _ctrlSignals_T_651) @[Lookup.scala 34:39]
    node _ctrlSignals_T_653 = mux(_ctrlSignals_T_43, UInt<3>("h0"), _ctrlSignals_T_652) @[Lookup.scala 34:39]
    node _ctrlSignals_T_654 = mux(_ctrlSignals_T_41, UInt<3>("h0"), _ctrlSignals_T_653) @[Lookup.scala 34:39]
    node _ctrlSignals_T_655 = mux(_ctrlSignals_T_39, UInt<3>("h0"), _ctrlSignals_T_654) @[Lookup.scala 34:39]
    node _ctrlSignals_T_656 = mux(_ctrlSignals_T_37, UInt<3>("h0"), _ctrlSignals_T_655) @[Lookup.scala 34:39]
    node _ctrlSignals_T_657 = mux(_ctrlSignals_T_35, UInt<3>("h0"), _ctrlSignals_T_656) @[Lookup.scala 34:39]
    node _ctrlSignals_T_658 = mux(_ctrlSignals_T_33, UInt<3>("h0"), _ctrlSignals_T_657) @[Lookup.scala 34:39]
    node _ctrlSignals_T_659 = mux(_ctrlSignals_T_31, UInt<3>("h0"), _ctrlSignals_T_658) @[Lookup.scala 34:39]
    node _ctrlSignals_T_660 = mux(_ctrlSignals_T_29, UInt<3>("h0"), _ctrlSignals_T_659) @[Lookup.scala 34:39]
    node _ctrlSignals_T_661 = mux(_ctrlSignals_T_27, UInt<3>("h0"), _ctrlSignals_T_660) @[Lookup.scala 34:39]
    node _ctrlSignals_T_662 = mux(_ctrlSignals_T_25, UInt<3>("h0"), _ctrlSignals_T_661) @[Lookup.scala 34:39]
    node _ctrlSignals_T_663 = mux(_ctrlSignals_T_23, UInt<3>("h0"), _ctrlSignals_T_662) @[Lookup.scala 34:39]
    node _ctrlSignals_T_664 = mux(_ctrlSignals_T_21, UInt<3>("h0"), _ctrlSignals_T_663) @[Lookup.scala 34:39]
    node _ctrlSignals_T_665 = mux(_ctrlSignals_T_19, UInt<3>("h0"), _ctrlSignals_T_664) @[Lookup.scala 34:39]
    node _ctrlSignals_T_666 = mux(_ctrlSignals_T_17, UInt<3>("h0"), _ctrlSignals_T_665) @[Lookup.scala 34:39]
    node _ctrlSignals_T_667 = mux(_ctrlSignals_T_15, UInt<3>("h0"), _ctrlSignals_T_666) @[Lookup.scala 34:39]
    node _ctrlSignals_T_668 = mux(_ctrlSignals_T_13, UInt<3>("h0"), _ctrlSignals_T_667) @[Lookup.scala 34:39]
    node _ctrlSignals_T_669 = mux(_ctrlSignals_T_11, UInt<3>("h0"), _ctrlSignals_T_668) @[Lookup.scala 34:39]
    node _ctrlSignals_T_670 = mux(_ctrlSignals_T_9, UInt<3>("h0"), _ctrlSignals_T_669) @[Lookup.scala 34:39]
    node _ctrlSignals_T_671 = mux(_ctrlSignals_T_7, UInt<3>("h0"), _ctrlSignals_T_670) @[Lookup.scala 34:39]
    node _ctrlSignals_T_672 = mux(_ctrlSignals_T_5, UInt<3>("h0"), _ctrlSignals_T_671) @[Lookup.scala 34:39]
    node _ctrlSignals_T_673 = mux(_ctrlSignals_T_3, UInt<3>("h0"), _ctrlSignals_T_672) @[Lookup.scala 34:39]
    node ctrlSignals_11 = mux(_ctrlSignals_T_1, UInt<3>("h0"), _ctrlSignals_T_673) @[Lookup.scala 34:39]
    node _ctrlSignals_T_674 = mux(_ctrlSignals_T_97, UInt<1>("h0"), UInt<1>("h1")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_675 = mux(_ctrlSignals_T_95, UInt<1>("h0"), _ctrlSignals_T_674) @[Lookup.scala 34:39]
    node _ctrlSignals_T_676 = mux(_ctrlSignals_T_93, UInt<1>("h0"), _ctrlSignals_T_675) @[Lookup.scala 34:39]
    node _ctrlSignals_T_677 = mux(_ctrlSignals_T_91, UInt<1>("h0"), _ctrlSignals_T_676) @[Lookup.scala 34:39]
    node _ctrlSignals_T_678 = mux(_ctrlSignals_T_89, UInt<1>("h0"), _ctrlSignals_T_677) @[Lookup.scala 34:39]
    node _ctrlSignals_T_679 = mux(_ctrlSignals_T_87, UInt<1>("h0"), _ctrlSignals_T_678) @[Lookup.scala 34:39]
    node _ctrlSignals_T_680 = mux(_ctrlSignals_T_85, UInt<1>("h0"), _ctrlSignals_T_679) @[Lookup.scala 34:39]
    node _ctrlSignals_T_681 = mux(_ctrlSignals_T_83, UInt<1>("h0"), _ctrlSignals_T_680) @[Lookup.scala 34:39]
    node _ctrlSignals_T_682 = mux(_ctrlSignals_T_81, UInt<1>("h0"), _ctrlSignals_T_681) @[Lookup.scala 34:39]
    node _ctrlSignals_T_683 = mux(_ctrlSignals_T_79, UInt<1>("h0"), _ctrlSignals_T_682) @[Lookup.scala 34:39]
    node _ctrlSignals_T_684 = mux(_ctrlSignals_T_77, UInt<1>("h0"), _ctrlSignals_T_683) @[Lookup.scala 34:39]
    node _ctrlSignals_T_685 = mux(_ctrlSignals_T_75, UInt<1>("h0"), _ctrlSignals_T_684) @[Lookup.scala 34:39]
    node _ctrlSignals_T_686 = mux(_ctrlSignals_T_73, UInt<1>("h0"), _ctrlSignals_T_685) @[Lookup.scala 34:39]
    node _ctrlSignals_T_687 = mux(_ctrlSignals_T_71, UInt<1>("h0"), _ctrlSignals_T_686) @[Lookup.scala 34:39]
    node _ctrlSignals_T_688 = mux(_ctrlSignals_T_69, UInt<1>("h0"), _ctrlSignals_T_687) @[Lookup.scala 34:39]
    node _ctrlSignals_T_689 = mux(_ctrlSignals_T_67, UInt<1>("h0"), _ctrlSignals_T_688) @[Lookup.scala 34:39]
    node _ctrlSignals_T_690 = mux(_ctrlSignals_T_65, UInt<1>("h0"), _ctrlSignals_T_689) @[Lookup.scala 34:39]
    node _ctrlSignals_T_691 = mux(_ctrlSignals_T_63, UInt<1>("h0"), _ctrlSignals_T_690) @[Lookup.scala 34:39]
    node _ctrlSignals_T_692 = mux(_ctrlSignals_T_61, UInt<1>("h0"), _ctrlSignals_T_691) @[Lookup.scala 34:39]
    node _ctrlSignals_T_693 = mux(_ctrlSignals_T_59, UInt<1>("h0"), _ctrlSignals_T_692) @[Lookup.scala 34:39]
    node _ctrlSignals_T_694 = mux(_ctrlSignals_T_57, UInt<1>("h0"), _ctrlSignals_T_693) @[Lookup.scala 34:39]
    node _ctrlSignals_T_695 = mux(_ctrlSignals_T_55, UInt<1>("h0"), _ctrlSignals_T_694) @[Lookup.scala 34:39]
    node _ctrlSignals_T_696 = mux(_ctrlSignals_T_53, UInt<1>("h0"), _ctrlSignals_T_695) @[Lookup.scala 34:39]
    node _ctrlSignals_T_697 = mux(_ctrlSignals_T_51, UInt<1>("h0"), _ctrlSignals_T_696) @[Lookup.scala 34:39]
    node _ctrlSignals_T_698 = mux(_ctrlSignals_T_49, UInt<1>("h0"), _ctrlSignals_T_697) @[Lookup.scala 34:39]
    node _ctrlSignals_T_699 = mux(_ctrlSignals_T_47, UInt<1>("h0"), _ctrlSignals_T_698) @[Lookup.scala 34:39]
    node _ctrlSignals_T_700 = mux(_ctrlSignals_T_45, UInt<1>("h0"), _ctrlSignals_T_699) @[Lookup.scala 34:39]
    node _ctrlSignals_T_701 = mux(_ctrlSignals_T_43, UInt<1>("h0"), _ctrlSignals_T_700) @[Lookup.scala 34:39]
    node _ctrlSignals_T_702 = mux(_ctrlSignals_T_41, UInt<1>("h0"), _ctrlSignals_T_701) @[Lookup.scala 34:39]
    node _ctrlSignals_T_703 = mux(_ctrlSignals_T_39, UInt<1>("h0"), _ctrlSignals_T_702) @[Lookup.scala 34:39]
    node _ctrlSignals_T_704 = mux(_ctrlSignals_T_37, UInt<1>("h0"), _ctrlSignals_T_703) @[Lookup.scala 34:39]
    node _ctrlSignals_T_705 = mux(_ctrlSignals_T_35, UInt<1>("h0"), _ctrlSignals_T_704) @[Lookup.scala 34:39]
    node _ctrlSignals_T_706 = mux(_ctrlSignals_T_33, UInt<1>("h0"), _ctrlSignals_T_705) @[Lookup.scala 34:39]
    node _ctrlSignals_T_707 = mux(_ctrlSignals_T_31, UInt<1>("h0"), _ctrlSignals_T_706) @[Lookup.scala 34:39]
    node _ctrlSignals_T_708 = mux(_ctrlSignals_T_29, UInt<1>("h0"), _ctrlSignals_T_707) @[Lookup.scala 34:39]
    node _ctrlSignals_T_709 = mux(_ctrlSignals_T_27, UInt<1>("h0"), _ctrlSignals_T_708) @[Lookup.scala 34:39]
    node _ctrlSignals_T_710 = mux(_ctrlSignals_T_25, UInt<1>("h0"), _ctrlSignals_T_709) @[Lookup.scala 34:39]
    node _ctrlSignals_T_711 = mux(_ctrlSignals_T_23, UInt<1>("h0"), _ctrlSignals_T_710) @[Lookup.scala 34:39]
    node _ctrlSignals_T_712 = mux(_ctrlSignals_T_21, UInt<1>("h0"), _ctrlSignals_T_711) @[Lookup.scala 34:39]
    node _ctrlSignals_T_713 = mux(_ctrlSignals_T_19, UInt<1>("h0"), _ctrlSignals_T_712) @[Lookup.scala 34:39]
    node _ctrlSignals_T_714 = mux(_ctrlSignals_T_17, UInt<1>("h0"), _ctrlSignals_T_713) @[Lookup.scala 34:39]
    node _ctrlSignals_T_715 = mux(_ctrlSignals_T_15, UInt<1>("h0"), _ctrlSignals_T_714) @[Lookup.scala 34:39]
    node _ctrlSignals_T_716 = mux(_ctrlSignals_T_13, UInt<1>("h0"), _ctrlSignals_T_715) @[Lookup.scala 34:39]
    node _ctrlSignals_T_717 = mux(_ctrlSignals_T_11, UInt<1>("h0"), _ctrlSignals_T_716) @[Lookup.scala 34:39]
    node _ctrlSignals_T_718 = mux(_ctrlSignals_T_9, UInt<1>("h0"), _ctrlSignals_T_717) @[Lookup.scala 34:39]
    node _ctrlSignals_T_719 = mux(_ctrlSignals_T_7, UInt<1>("h0"), _ctrlSignals_T_718) @[Lookup.scala 34:39]
    node _ctrlSignals_T_720 = mux(_ctrlSignals_T_5, UInt<1>("h0"), _ctrlSignals_T_719) @[Lookup.scala 34:39]
    node _ctrlSignals_T_721 = mux(_ctrlSignals_T_3, UInt<1>("h0"), _ctrlSignals_T_720) @[Lookup.scala 34:39]
    node ctrlSignals_12 = mux(_ctrlSignals_T_1, UInt<1>("h0"), _ctrlSignals_T_721) @[Lookup.scala 34:39]
    node _ctrlSignals_T_722 = mux(_ctrlSignals_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_723 = mux(_ctrlSignals_T_95, UInt<1>("h0"), _ctrlSignals_T_722) @[Lookup.scala 34:39]
    node _ctrlSignals_T_724 = mux(_ctrlSignals_T_93, UInt<1>("h0"), _ctrlSignals_T_723) @[Lookup.scala 34:39]
    node _ctrlSignals_T_725 = mux(_ctrlSignals_T_91, UInt<1>("h0"), _ctrlSignals_T_724) @[Lookup.scala 34:39]
    node _ctrlSignals_T_726 = mux(_ctrlSignals_T_89, UInt<1>("h0"), _ctrlSignals_T_725) @[Lookup.scala 34:39]
    node _ctrlSignals_T_727 = mux(_ctrlSignals_T_87, UInt<1>("h0"), _ctrlSignals_T_726) @[Lookup.scala 34:39]
    node _ctrlSignals_T_728 = mux(_ctrlSignals_T_85, UInt<1>("h0"), _ctrlSignals_T_727) @[Lookup.scala 34:39]
    node _ctrlSignals_T_729 = mux(_ctrlSignals_T_83, UInt<1>("h1"), _ctrlSignals_T_728) @[Lookup.scala 34:39]
    node _ctrlSignals_T_730 = mux(_ctrlSignals_T_81, UInt<1>("h1"), _ctrlSignals_T_729) @[Lookup.scala 34:39]
    node _ctrlSignals_T_731 = mux(_ctrlSignals_T_79, UInt<1>("h1"), _ctrlSignals_T_730) @[Lookup.scala 34:39]
    node _ctrlSignals_T_732 = mux(_ctrlSignals_T_77, UInt<1>("h0"), _ctrlSignals_T_731) @[Lookup.scala 34:39]
    node _ctrlSignals_T_733 = mux(_ctrlSignals_T_75, UInt<1>("h0"), _ctrlSignals_T_732) @[Lookup.scala 34:39]
    node _ctrlSignals_T_734 = mux(_ctrlSignals_T_73, UInt<1>("h1"), _ctrlSignals_T_733) @[Lookup.scala 34:39]
    node _ctrlSignals_T_735 = mux(_ctrlSignals_T_71, UInt<1>("h1"), _ctrlSignals_T_734) @[Lookup.scala 34:39]
    node _ctrlSignals_T_736 = mux(_ctrlSignals_T_69, UInt<1>("h1"), _ctrlSignals_T_735) @[Lookup.scala 34:39]
    node _ctrlSignals_T_737 = mux(_ctrlSignals_T_67, UInt<1>("h1"), _ctrlSignals_T_736) @[Lookup.scala 34:39]
    node _ctrlSignals_T_738 = mux(_ctrlSignals_T_65, UInt<1>("h1"), _ctrlSignals_T_737) @[Lookup.scala 34:39]
    node _ctrlSignals_T_739 = mux(_ctrlSignals_T_63, UInt<1>("h1"), _ctrlSignals_T_738) @[Lookup.scala 34:39]
    node _ctrlSignals_T_740 = mux(_ctrlSignals_T_61, UInt<1>("h1"), _ctrlSignals_T_739) @[Lookup.scala 34:39]
    node _ctrlSignals_T_741 = mux(_ctrlSignals_T_59, UInt<1>("h1"), _ctrlSignals_T_740) @[Lookup.scala 34:39]
    node _ctrlSignals_T_742 = mux(_ctrlSignals_T_57, UInt<1>("h1"), _ctrlSignals_T_741) @[Lookup.scala 34:39]
    node _ctrlSignals_T_743 = mux(_ctrlSignals_T_55, UInt<1>("h1"), _ctrlSignals_T_742) @[Lookup.scala 34:39]
    node _ctrlSignals_T_744 = mux(_ctrlSignals_T_53, UInt<1>("h1"), _ctrlSignals_T_743) @[Lookup.scala 34:39]
    node _ctrlSignals_T_745 = mux(_ctrlSignals_T_51, UInt<1>("h1"), _ctrlSignals_T_744) @[Lookup.scala 34:39]
    node _ctrlSignals_T_746 = mux(_ctrlSignals_T_49, UInt<1>("h1"), _ctrlSignals_T_745) @[Lookup.scala 34:39]
    node _ctrlSignals_T_747 = mux(_ctrlSignals_T_47, UInt<1>("h1"), _ctrlSignals_T_746) @[Lookup.scala 34:39]
    node _ctrlSignals_T_748 = mux(_ctrlSignals_T_45, UInt<1>("h1"), _ctrlSignals_T_747) @[Lookup.scala 34:39]
    node _ctrlSignals_T_749 = mux(_ctrlSignals_T_43, UInt<1>("h1"), _ctrlSignals_T_748) @[Lookup.scala 34:39]
    node _ctrlSignals_T_750 = mux(_ctrlSignals_T_41, UInt<1>("h1"), _ctrlSignals_T_749) @[Lookup.scala 34:39]
    node _ctrlSignals_T_751 = mux(_ctrlSignals_T_39, UInt<1>("h1"), _ctrlSignals_T_750) @[Lookup.scala 34:39]
    node _ctrlSignals_T_752 = mux(_ctrlSignals_T_37, UInt<1>("h1"), _ctrlSignals_T_751) @[Lookup.scala 34:39]
    node _ctrlSignals_T_753 = mux(_ctrlSignals_T_35, UInt<1>("h1"), _ctrlSignals_T_752) @[Lookup.scala 34:39]
    node _ctrlSignals_T_754 = mux(_ctrlSignals_T_33, UInt<1>("h1"), _ctrlSignals_T_753) @[Lookup.scala 34:39]
    node _ctrlSignals_T_755 = mux(_ctrlSignals_T_31, UInt<1>("h1"), _ctrlSignals_T_754) @[Lookup.scala 34:39]
    node _ctrlSignals_T_756 = mux(_ctrlSignals_T_29, UInt<1>("h1"), _ctrlSignals_T_755) @[Lookup.scala 34:39]
    node _ctrlSignals_T_757 = mux(_ctrlSignals_T_27, UInt<1>("h1"), _ctrlSignals_T_756) @[Lookup.scala 34:39]
    node _ctrlSignals_T_758 = mux(_ctrlSignals_T_25, UInt<1>("h1"), _ctrlSignals_T_757) @[Lookup.scala 34:39]
    node _ctrlSignals_T_759 = mux(_ctrlSignals_T_23, UInt<1>("h1"), _ctrlSignals_T_758) @[Lookup.scala 34:39]
    node _ctrlSignals_T_760 = mux(_ctrlSignals_T_21, UInt<1>("h1"), _ctrlSignals_T_759) @[Lookup.scala 34:39]
    node _ctrlSignals_T_761 = mux(_ctrlSignals_T_19, UInt<1>("h1"), _ctrlSignals_T_760) @[Lookup.scala 34:39]
    node _ctrlSignals_T_762 = mux(_ctrlSignals_T_17, UInt<1>("h1"), _ctrlSignals_T_761) @[Lookup.scala 34:39]
    node _ctrlSignals_T_763 = mux(_ctrlSignals_T_15, UInt<1>("h1"), _ctrlSignals_T_762) @[Lookup.scala 34:39]
    node _ctrlSignals_T_764 = mux(_ctrlSignals_T_13, UInt<1>("h1"), _ctrlSignals_T_763) @[Lookup.scala 34:39]
    node _ctrlSignals_T_765 = mux(_ctrlSignals_T_11, UInt<1>("h1"), _ctrlSignals_T_764) @[Lookup.scala 34:39]
    node _ctrlSignals_T_766 = mux(_ctrlSignals_T_9, UInt<1>("h1"), _ctrlSignals_T_765) @[Lookup.scala 34:39]
    node _ctrlSignals_T_767 = mux(_ctrlSignals_T_7, UInt<1>("h1"), _ctrlSignals_T_766) @[Lookup.scala 34:39]
    node _ctrlSignals_T_768 = mux(_ctrlSignals_T_5, UInt<1>("h0"), _ctrlSignals_T_767) @[Lookup.scala 34:39]
    node _ctrlSignals_T_769 = mux(_ctrlSignals_T_3, UInt<1>("h0"), _ctrlSignals_T_768) @[Lookup.scala 34:39]
    node ctrlSignals_13 = mux(_ctrlSignals_T_1, UInt<1>("h0"), _ctrlSignals_T_769) @[Lookup.scala 34:39]
    node _ctrlSignals_T_770 = mux(_ctrlSignals_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ctrlSignals_T_771 = mux(_ctrlSignals_T_95, UInt<1>("h0"), _ctrlSignals_T_770) @[Lookup.scala 34:39]
    node _ctrlSignals_T_772 = mux(_ctrlSignals_T_93, UInt<1>("h0"), _ctrlSignals_T_771) @[Lookup.scala 34:39]
    node _ctrlSignals_T_773 = mux(_ctrlSignals_T_91, UInt<1>("h0"), _ctrlSignals_T_772) @[Lookup.scala 34:39]
    node _ctrlSignals_T_774 = mux(_ctrlSignals_T_89, UInt<1>("h0"), _ctrlSignals_T_773) @[Lookup.scala 34:39]
    node _ctrlSignals_T_775 = mux(_ctrlSignals_T_87, UInt<1>("h0"), _ctrlSignals_T_774) @[Lookup.scala 34:39]
    node _ctrlSignals_T_776 = mux(_ctrlSignals_T_85, UInt<1>("h0"), _ctrlSignals_T_775) @[Lookup.scala 34:39]
    node _ctrlSignals_T_777 = mux(_ctrlSignals_T_83, UInt<1>("h0"), _ctrlSignals_T_776) @[Lookup.scala 34:39]
    node _ctrlSignals_T_778 = mux(_ctrlSignals_T_81, UInt<1>("h0"), _ctrlSignals_T_777) @[Lookup.scala 34:39]
    node _ctrlSignals_T_779 = mux(_ctrlSignals_T_79, UInt<1>("h0"), _ctrlSignals_T_778) @[Lookup.scala 34:39]
    node _ctrlSignals_T_780 = mux(_ctrlSignals_T_77, UInt<1>("h0"), _ctrlSignals_T_779) @[Lookup.scala 34:39]
    node _ctrlSignals_T_781 = mux(_ctrlSignals_T_75, UInt<1>("h0"), _ctrlSignals_T_780) @[Lookup.scala 34:39]
    node _ctrlSignals_T_782 = mux(_ctrlSignals_T_73, UInt<1>("h1"), _ctrlSignals_T_781) @[Lookup.scala 34:39]
    node _ctrlSignals_T_783 = mux(_ctrlSignals_T_71, UInt<1>("h1"), _ctrlSignals_T_782) @[Lookup.scala 34:39]
    node _ctrlSignals_T_784 = mux(_ctrlSignals_T_69, UInt<1>("h1"), _ctrlSignals_T_783) @[Lookup.scala 34:39]
    node _ctrlSignals_T_785 = mux(_ctrlSignals_T_67, UInt<1>("h1"), _ctrlSignals_T_784) @[Lookup.scala 34:39]
    node _ctrlSignals_T_786 = mux(_ctrlSignals_T_65, UInt<1>("h1"), _ctrlSignals_T_785) @[Lookup.scala 34:39]
    node _ctrlSignals_T_787 = mux(_ctrlSignals_T_63, UInt<1>("h1"), _ctrlSignals_T_786) @[Lookup.scala 34:39]
    node _ctrlSignals_T_788 = mux(_ctrlSignals_T_61, UInt<1>("h1"), _ctrlSignals_T_787) @[Lookup.scala 34:39]
    node _ctrlSignals_T_789 = mux(_ctrlSignals_T_59, UInt<1>("h1"), _ctrlSignals_T_788) @[Lookup.scala 34:39]
    node _ctrlSignals_T_790 = mux(_ctrlSignals_T_57, UInt<1>("h1"), _ctrlSignals_T_789) @[Lookup.scala 34:39]
    node _ctrlSignals_T_791 = mux(_ctrlSignals_T_55, UInt<1>("h1"), _ctrlSignals_T_790) @[Lookup.scala 34:39]
    node _ctrlSignals_T_792 = mux(_ctrlSignals_T_53, UInt<1>("h0"), _ctrlSignals_T_791) @[Lookup.scala 34:39]
    node _ctrlSignals_T_793 = mux(_ctrlSignals_T_51, UInt<1>("h0"), _ctrlSignals_T_792) @[Lookup.scala 34:39]
    node _ctrlSignals_T_794 = mux(_ctrlSignals_T_49, UInt<1>("h0"), _ctrlSignals_T_793) @[Lookup.scala 34:39]
    node _ctrlSignals_T_795 = mux(_ctrlSignals_T_47, UInt<1>("h0"), _ctrlSignals_T_794) @[Lookup.scala 34:39]
    node _ctrlSignals_T_796 = mux(_ctrlSignals_T_45, UInt<1>("h0"), _ctrlSignals_T_795) @[Lookup.scala 34:39]
    node _ctrlSignals_T_797 = mux(_ctrlSignals_T_43, UInt<1>("h0"), _ctrlSignals_T_796) @[Lookup.scala 34:39]
    node _ctrlSignals_T_798 = mux(_ctrlSignals_T_41, UInt<1>("h0"), _ctrlSignals_T_797) @[Lookup.scala 34:39]
    node _ctrlSignals_T_799 = mux(_ctrlSignals_T_39, UInt<1>("h0"), _ctrlSignals_T_798) @[Lookup.scala 34:39]
    node _ctrlSignals_T_800 = mux(_ctrlSignals_T_37, UInt<1>("h0"), _ctrlSignals_T_799) @[Lookup.scala 34:39]
    node _ctrlSignals_T_801 = mux(_ctrlSignals_T_35, UInt<1>("h1"), _ctrlSignals_T_800) @[Lookup.scala 34:39]
    node _ctrlSignals_T_802 = mux(_ctrlSignals_T_33, UInt<1>("h1"), _ctrlSignals_T_801) @[Lookup.scala 34:39]
    node _ctrlSignals_T_803 = mux(_ctrlSignals_T_31, UInt<1>("h1"), _ctrlSignals_T_802) @[Lookup.scala 34:39]
    node _ctrlSignals_T_804 = mux(_ctrlSignals_T_29, UInt<1>("h0"), _ctrlSignals_T_803) @[Lookup.scala 34:39]
    node _ctrlSignals_T_805 = mux(_ctrlSignals_T_27, UInt<1>("h0"), _ctrlSignals_T_804) @[Lookup.scala 34:39]
    node _ctrlSignals_T_806 = mux(_ctrlSignals_T_25, UInt<1>("h0"), _ctrlSignals_T_805) @[Lookup.scala 34:39]
    node _ctrlSignals_T_807 = mux(_ctrlSignals_T_23, UInt<1>("h0"), _ctrlSignals_T_806) @[Lookup.scala 34:39]
    node _ctrlSignals_T_808 = mux(_ctrlSignals_T_21, UInt<1>("h0"), _ctrlSignals_T_807) @[Lookup.scala 34:39]
    node _ctrlSignals_T_809 = mux(_ctrlSignals_T_19, UInt<1>("h1"), _ctrlSignals_T_808) @[Lookup.scala 34:39]
    node _ctrlSignals_T_810 = mux(_ctrlSignals_T_17, UInt<1>("h1"), _ctrlSignals_T_809) @[Lookup.scala 34:39]
    node _ctrlSignals_T_811 = mux(_ctrlSignals_T_15, UInt<1>("h1"), _ctrlSignals_T_810) @[Lookup.scala 34:39]
    node _ctrlSignals_T_812 = mux(_ctrlSignals_T_13, UInt<1>("h1"), _ctrlSignals_T_811) @[Lookup.scala 34:39]
    node _ctrlSignals_T_813 = mux(_ctrlSignals_T_11, UInt<1>("h1"), _ctrlSignals_T_812) @[Lookup.scala 34:39]
    node _ctrlSignals_T_814 = mux(_ctrlSignals_T_9, UInt<1>("h1"), _ctrlSignals_T_813) @[Lookup.scala 34:39]
    node _ctrlSignals_T_815 = mux(_ctrlSignals_T_7, UInt<1>("h0"), _ctrlSignals_T_814) @[Lookup.scala 34:39]
    node _ctrlSignals_T_816 = mux(_ctrlSignals_T_5, UInt<1>("h0"), _ctrlSignals_T_815) @[Lookup.scala 34:39]
    node _ctrlSignals_T_817 = mux(_ctrlSignals_T_3, UInt<1>("h0"), _ctrlSignals_T_816) @[Lookup.scala 34:39]
    node ctrlSignals_14 = mux(_ctrlSignals_T_1, UInt<1>("h0"), _ctrlSignals_T_817) @[Lookup.scala 34:39]
    io.pc_sel <= ctrlSignals_0 @[pipeline_control.scala 112:16]
    node _io_inst_kill_T = bits(ctrlSignals_6, 0, 0) @[pipeline_control.scala 113:34]
    io.inst_kill <= _io_inst_kill_T @[pipeline_control.scala 113:16]
    io.a_sel <= ctrlSignals_1 @[pipeline_control.scala 116:17]
    io.b_sel <= ctrlSignals_2 @[pipeline_control.scala 117:17]
    io.imm_sel <= ctrlSignals_3 @[pipeline_control.scala 118:17]
    io.alu_op <= ctrlSignals_4 @[pipeline_control.scala 119:17]
    io.br_type <= ctrlSignals_5 @[pipeline_control.scala 120:17]
    io.st_type <= ctrlSignals_7 @[pipeline_control.scala 121:17]
    io.ld_type <= ctrlSignals_8 @[pipeline_control.scala 124:17]
    io.wb_mux_sel <= ctrlSignals_9 @[pipeline_control.scala 125:17]
    node _io_wb_en_T = bits(ctrlSignals_10, 0, 0) @[pipeline_control.scala 126:36]
    io.wb_en <= _io_wb_en_T @[pipeline_control.scala 126:17]
    io.csr_cmd <= ctrlSignals_11 @[pipeline_control.scala 127:17]
    io.illegal <= ctrlSignals_12 @[pipeline_control.scala 128:17]
    io.en_rs1 <= ctrlSignals_13 @[pipeline_control.scala 129:17]
    io.en_rs2 <= ctrlSignals_14 @[pipeline_control.scala 130:17]

  module Core :
    input clock : Clock
    input reset : Reset
    output io : { irq : { flip uart_irq : UInt<1>, flip spi_irq : UInt<1>, flip m1_irq : UInt<1>, flip m2_irq : UInt<1>, flip m3_irq : UInt<1>}, flip ibus : { flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, flip dbus : { flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}}

    inst dpath of Datapath @[core.scala 58:25]
    dpath.clock <= clock
    dpath.reset <= reset
    inst ctrl of Control @[core.scala 59:25]
    ctrl.clock <= clock
    ctrl.reset <= reset
    dpath.io.irq.m3_irq <= io.irq.m3_irq @[core.scala 63:17]
    dpath.io.irq.m2_irq <= io.irq.m2_irq @[core.scala 63:17]
    dpath.io.irq.m1_irq <= io.irq.m1_irq @[core.scala 63:17]
    dpath.io.irq.spi_irq <= io.irq.spi_irq @[core.scala 63:17]
    dpath.io.irq.uart_irq <= io.irq.uart_irq @[core.scala 63:17]
    dpath.io.ibus <= io.ibus @[core.scala 64:17]
    dpath.io.dbus <= io.dbus @[core.scala 65:17]
    dpath.io.ctrl <= ctrl.io @[core.scala 66:17]

  module DMem :
    input clock : Clock
    input reset : Reset
    output io : { flip dmem_addr : UInt<8>, flip dmem_wdata : UInt<32>, dmem_rdata : UInt<32>, flip wr_en : UInt<1>, flip st_type : UInt<4>}

    smem dmem : UInt<8>[4] [64] @[memory.scala 59:25]
    node addr = shr(io.dmem_addr, 2) @[memory.scala 61:27]
    node mask_shift = bits(io.dmem_addr, 1, 0) @[memory.scala 63:32]
    node data_shift = shl(mask_shift, 3) @[memory.scala 64:31]
    node _wmask_T = bits(mask_shift, 0, 0) @[memory.scala 66:36]
    node _wmask_T_1 = bits(mask_shift, 1, 1) @[memory.scala 66:36]
    node _wmask_T_2 = tail(io.st_type, 1) @[memory.scala 66:36]
    node _wmask_T_3 = head(io.st_type, 1) @[memory.scala 66:36]
    node _wmask_T_4 = cat(_wmask_T_2, _wmask_T_3) @[memory.scala 66:36]
    node _wmask_T_5 = mux(_wmask_T, _wmask_T_4, io.st_type) @[memory.scala 66:36]
    node _wmask_T_6 = tail(_wmask_T_5, 2) @[memory.scala 66:36]
    node _wmask_T_7 = head(_wmask_T_5, 2) @[memory.scala 66:36]
    node _wmask_T_8 = cat(_wmask_T_6, _wmask_T_7) @[memory.scala 66:36]
    node wmask = mux(_wmask_T_1, _wmask_T_8, _wmask_T_5) @[memory.scala 66:36]
    wire wmask_vec : UInt<1>[4] @[memory.scala 67:23]
    node _T = bits(io.wr_en, 0, 0) @[Bitwise.scala 77:15]
    node _T_1 = mux(_T, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _T_2 = and(wmask, _T_1) @[memory.scala 68:31]
    node _T_3 = bits(_T_2, 0, 0) @[memory.scala 68:62]
    node _T_4 = bits(_T_2, 1, 1) @[memory.scala 68:62]
    node _T_5 = bits(_T_2, 2, 2) @[memory.scala 68:62]
    node _T_6 = bits(_T_2, 3, 3) @[memory.scala 68:62]
    wire _WIRE : UInt<1>[4] @[memory.scala 68:23]
    _WIRE[0] <= _T_3 @[memory.scala 68:23]
    _WIRE[1] <= _T_4 @[memory.scala 68:23]
    _WIRE[2] <= _T_5 @[memory.scala 68:23]
    _WIRE[3] <= _T_6 @[memory.scala 68:23]
    wmask_vec <= _WIRE @[memory.scala 68:13]
    node _wdata_T = bits(data_shift, 0, 0) @[memory.scala 70:39]
    node _wdata_T_1 = bits(data_shift, 1, 1) @[memory.scala 70:39]
    node _wdata_T_2 = bits(data_shift, 2, 2) @[memory.scala 70:39]
    node _wdata_T_3 = bits(data_shift, 3, 3) @[memory.scala 70:39]
    node _wdata_T_4 = bits(data_shift, 4, 4) @[memory.scala 70:39]
    node _wdata_T_5 = tail(io.dmem_wdata, 1) @[memory.scala 70:39]
    node _wdata_T_6 = head(io.dmem_wdata, 1) @[memory.scala 70:39]
    node _wdata_T_7 = cat(_wdata_T_5, _wdata_T_6) @[memory.scala 70:39]
    node _wdata_T_8 = mux(_wdata_T, _wdata_T_7, io.dmem_wdata) @[memory.scala 70:39]
    node _wdata_T_9 = tail(_wdata_T_8, 2) @[memory.scala 70:39]
    node _wdata_T_10 = head(_wdata_T_8, 2) @[memory.scala 70:39]
    node _wdata_T_11 = cat(_wdata_T_9, _wdata_T_10) @[memory.scala 70:39]
    node _wdata_T_12 = mux(_wdata_T_1, _wdata_T_11, _wdata_T_8) @[memory.scala 70:39]
    node _wdata_T_13 = tail(_wdata_T_12, 4) @[memory.scala 70:39]
    node _wdata_T_14 = head(_wdata_T_12, 4) @[memory.scala 70:39]
    node _wdata_T_15 = cat(_wdata_T_13, _wdata_T_14) @[memory.scala 70:39]
    node _wdata_T_16 = mux(_wdata_T_2, _wdata_T_15, _wdata_T_12) @[memory.scala 70:39]
    node _wdata_T_17 = tail(_wdata_T_16, 8) @[memory.scala 70:39]
    node _wdata_T_18 = head(_wdata_T_16, 8) @[memory.scala 70:39]
    node _wdata_T_19 = cat(_wdata_T_17, _wdata_T_18) @[memory.scala 70:39]
    node _wdata_T_20 = mux(_wdata_T_3, _wdata_T_19, _wdata_T_16) @[memory.scala 70:39]
    node _wdata_T_21 = tail(_wdata_T_20, 16) @[memory.scala 70:39]
    node _wdata_T_22 = head(_wdata_T_20, 16) @[memory.scala 70:39]
    node _wdata_T_23 = cat(_wdata_T_21, _wdata_T_22) @[memory.scala 70:39]
    node wdata = mux(_wdata_T_4, _wdata_T_23, _wdata_T_20) @[memory.scala 70:39]
    wire wdata_vec : UInt<8>[4] @[memory.scala 71:23]
    node _wdata_vec_0_T = bits(wdata, 7, 0) @[memory.scala 73:26]
    wdata_vec[0] <= _wdata_vec_0_T @[memory.scala 73:18]
    node _wdata_vec_1_T = bits(wdata, 15, 8) @[memory.scala 73:26]
    wdata_vec[1] <= _wdata_vec_1_T @[memory.scala 73:18]
    node _wdata_vec_2_T = bits(wdata, 23, 16) @[memory.scala 73:26]
    wdata_vec[2] <= _wdata_vec_2_T @[memory.scala 73:18]
    node _wdata_vec_3_T = bits(wdata, 31, 24) @[memory.scala 73:26]
    wdata_vec[3] <= _wdata_vec_3_T @[memory.scala 73:18]
    when io.wr_en : @[memory.scala 76:19]
      write mport MPORT = dmem[addr], clock
      when wmask_vec[0] :
        MPORT[0] <= wdata_vec[0]
      when wmask_vec[1] :
        MPORT[1] <= wdata_vec[1]
      when wmask_vec[2] :
        MPORT[2] <= wdata_vec[2]
      when wmask_vec[3] :
        MPORT[3] <= wdata_vec[3]
    reg old_data_shift : UInt<5>, clock with :
      reset => (UInt<1>("h0"), old_data_shift) @[memory.scala 80:27]
    old_data_shift <= data_shift @[memory.scala 81:18]
    infer mport io_dmem_rdata_MPORT = dmem[addr], clock @[memory.scala 83:24]
    node io_dmem_rdata_lo = cat(io_dmem_rdata_MPORT[1], io_dmem_rdata_MPORT[0]) @[memory.scala 83:31]
    node io_dmem_rdata_hi = cat(io_dmem_rdata_MPORT[3], io_dmem_rdata_MPORT[2]) @[memory.scala 83:31]
    node _io_dmem_rdata_T = cat(io_dmem_rdata_hi, io_dmem_rdata_lo) @[memory.scala 83:31]
    node _io_dmem_rdata_T_1 = bits(old_data_shift, 0, 0) @[memory.scala 83:49]
    node _io_dmem_rdata_T_2 = bits(old_data_shift, 1, 1) @[memory.scala 83:49]
    node _io_dmem_rdata_T_3 = bits(old_data_shift, 2, 2) @[memory.scala 83:49]
    node _io_dmem_rdata_T_4 = bits(old_data_shift, 3, 3) @[memory.scala 83:49]
    node _io_dmem_rdata_T_5 = bits(old_data_shift, 4, 4) @[memory.scala 83:49]
    node _io_dmem_rdata_T_6 = bits(_io_dmem_rdata_T, 0, 0) @[memory.scala 83:49]
    node _io_dmem_rdata_T_7 = shr(_io_dmem_rdata_T, 1) @[memory.scala 83:49]
    node _io_dmem_rdata_T_8 = cat(_io_dmem_rdata_T_6, _io_dmem_rdata_T_7) @[memory.scala 83:49]
    node _io_dmem_rdata_T_9 = mux(_io_dmem_rdata_T_1, _io_dmem_rdata_T_8, _io_dmem_rdata_T) @[memory.scala 83:49]
    node _io_dmem_rdata_T_10 = bits(_io_dmem_rdata_T_9, 1, 0) @[memory.scala 83:49]
    node _io_dmem_rdata_T_11 = shr(_io_dmem_rdata_T_9, 2) @[memory.scala 83:49]
    node _io_dmem_rdata_T_12 = cat(_io_dmem_rdata_T_10, _io_dmem_rdata_T_11) @[memory.scala 83:49]
    node _io_dmem_rdata_T_13 = mux(_io_dmem_rdata_T_2, _io_dmem_rdata_T_12, _io_dmem_rdata_T_9) @[memory.scala 83:49]
    node _io_dmem_rdata_T_14 = bits(_io_dmem_rdata_T_13, 3, 0) @[memory.scala 83:49]
    node _io_dmem_rdata_T_15 = shr(_io_dmem_rdata_T_13, 4) @[memory.scala 83:49]
    node _io_dmem_rdata_T_16 = cat(_io_dmem_rdata_T_14, _io_dmem_rdata_T_15) @[memory.scala 83:49]
    node _io_dmem_rdata_T_17 = mux(_io_dmem_rdata_T_3, _io_dmem_rdata_T_16, _io_dmem_rdata_T_13) @[memory.scala 83:49]
    node _io_dmem_rdata_T_18 = bits(_io_dmem_rdata_T_17, 7, 0) @[memory.scala 83:49]
    node _io_dmem_rdata_T_19 = shr(_io_dmem_rdata_T_17, 8) @[memory.scala 83:49]
    node _io_dmem_rdata_T_20 = cat(_io_dmem_rdata_T_18, _io_dmem_rdata_T_19) @[memory.scala 83:49]
    node _io_dmem_rdata_T_21 = mux(_io_dmem_rdata_T_4, _io_dmem_rdata_T_20, _io_dmem_rdata_T_17) @[memory.scala 83:49]
    node _io_dmem_rdata_T_22 = bits(_io_dmem_rdata_T_21, 15, 0) @[memory.scala 83:49]
    node _io_dmem_rdata_T_23 = shr(_io_dmem_rdata_T_21, 16) @[memory.scala 83:49]
    node _io_dmem_rdata_T_24 = cat(_io_dmem_rdata_T_22, _io_dmem_rdata_T_23) @[memory.scala 83:49]
    node _io_dmem_rdata_T_25 = mux(_io_dmem_rdata_T_5, _io_dmem_rdata_T_24, _io_dmem_rdata_T_21) @[memory.scala 83:49]
    io.dmem_rdata <= _io_dmem_rdata_T_25 @[memory.scala 83:17]

  module DMem_Interface :
    input clock : Clock
    input reset : Reset
    output io : { wbs : { flip m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}

    inst dmem of DMem @[dmem_interface.scala 35:20]
    dmem.clock <= clock
    dmem.reset <= reset
    node _dmem_addr_match_T = bits(io.wbs.m2s.addr, 15, 12) @[dmem_interface.scala 37:41]
    node dmem_addr_match = eq(_dmem_addr_match_T, UInt<4>("h1")) @[dmem_interface.scala 37:79]
    node dmem_select = and(io.wbs.m2s.stb, dmem_addr_match) @[dmem_interface.scala 39:41]
    node _rd_en_T = eq(io.wbs.m2s.we, UInt<1>("h0")) @[dmem_interface.scala 40:26]
    node rd_en = and(_rd_en_T, dmem_select) @[dmem_interface.scala 40:41]
    node _dmem_io_dmem_addr_T = bits(io.wbs.m2s.addr, 7, 0) @[dmem_interface.scala 42:41]
    dmem.io.dmem_addr <= _dmem_io_dmem_addr_T @[dmem_interface.scala 42:23]
    dmem.io.dmem_wdata <= io.wbs.m2s.data @[dmem_interface.scala 43:23]
    node _dmem_io_wr_en_T = and(io.wbs.m2s.we, dmem_select) @[dmem_interface.scala 44:40]
    dmem.io.wr_en <= _dmem_io_wr_en_T @[dmem_interface.scala 44:23]
    dmem.io.st_type <= io.wbs.m2s.sel @[dmem_interface.scala 45:23]
    reg ack2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[dmem_interface.scala 48:28]
    node _dmem_res_en_T = eq(ack2, UInt<1>("h1")) @[dmem_interface.scala 49:27]
    node dmem_res_en = xor(_dmem_res_en_T, io.wbs.m2s.stb) @[dmem_interface.scala 49:49]
    when dmem_res_en : @[dmem_interface.scala 51:21]
      node _ack2_T = mux(io.wbs.m2s.stb, UInt<1>("h1"), UInt<1>("h0")) @[dmem_interface.scala 52:16]
      ack2 <= _ack2_T @[dmem_interface.scala 52:10]
    reg ack : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[dmem_interface.scala 55:28]
    node _ack_T = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[dmem_interface.scala 56:36]
    ack <= _ack_T @[dmem_interface.scala 56:18]
    node _io_wbs_ack_o_T = or(ack, ack2) @[dmem_interface.scala 57:25]
    io.wbs.ack_o <= _io_wbs_ack_o_T @[dmem_interface.scala 57:18]
    reg rd_resp : UInt<1>, clock with :
      reset => (UInt<1>("h0"), rd_resp) @[dmem_interface.scala 60:24]
    rd_resp <= rd_en @[dmem_interface.scala 61:18]
    node _io_wbs_data_o_T = mux(rd_resp, dmem.io.dmem_rdata, UInt<1>("h0")) @[dmem_interface.scala 62:24]
    io.wbs.data_o <= _io_wbs_data_o_T @[dmem_interface.scala 62:18]

  module IMem :
    input clock : Clock
    input reset : Reset
    output io : { flip imem_addr : UInt<32>, imem_rdata : UInt<32>, flip imem_wdata : UInt<32>, flip wr_en : UInt<1>, flip st_type : UInt<4>}

    smem imem : UInt<32> [512] @[memory.scala 32:25]
    node inst_address = shr(io.imem_addr, 2) @[memory.scala 34:35]
    when io.wr_en : @[memory.scala 37:19]
      node _T = bits(inst_address, 8, 0) @[memory.scala 38:9]
      infer mport MPORT = imem[_T], clock @[memory.scala 38:9]
      MPORT <= io.imem_wdata @[memory.scala 38:24]
    node _io_imem_rdata_T = bits(inst_address, 8, 0) @[memory.scala 41:24]
    infer mport io_imem_rdata_MPORT = imem[_io_imem_rdata_T], clock @[memory.scala 41:24]
    io.imem_rdata <= io_imem_rdata_MPORT @[memory.scala 41:17]

  module BMem :
    input clock : Clock
    input reset : Reset
    output io : { flip bmem_addr : UInt<32>, bmem_rdata : UInt<32>}

    node _addr_T = bits(io.bmem_addr, 9, 0) @[bmem.scala 24:26]
    node addr = div(_addr_T, UInt<3>("h4")) @[bmem.scala 24:33]
    reg bmem_data : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[bmem.scala 25:26]
    node _T = eq(UInt<1>("h0"), addr) @[bmem.scala 27:17]
    when _T : @[bmem.scala 27:17]
      bmem_data <= UInt<5>("h13") @[bmem.scala 28:24]
    else :
      node _T_1 = eq(UInt<1>("h1"), addr) @[bmem.scala 27:17]
      when _T_1 : @[bmem.scala 27:17]
        bmem_data <= UInt<23>("h40006f") @[bmem.scala 29:24]
      else :
        node _T_2 = eq(UInt<2>("h2"), addr) @[bmem.scala 27:17]
        when _T_2 : @[bmem.scala 27:17]
          bmem_data <= UInt<32>("hffffa117") @[bmem.scala 30:24]
        else :
          node _T_3 = eq(UInt<2>("h3"), addr) @[bmem.scala 27:17]
          when _T_3 : @[bmem.scala 27:17]
            bmem_data <= UInt<28>("hf810113") @[bmem.scala 31:24]
          else :
            node _T_4 = eq(UInt<3>("h4"), addr) @[bmem.scala 27:17]
            when _T_4 : @[bmem.scala 27:17]
              bmem_data <= UInt<11>("h513") @[bmem.scala 32:24]
            else :
              node _T_5 = eq(UInt<3>("h5"), addr) @[bmem.scala 27:17]
              when _T_5 : @[bmem.scala 27:17]
                bmem_data <= UInt<11>("h593") @[bmem.scala 33:24]
              else :
                node _T_6 = eq(UInt<3>("h6"), addr) @[bmem.scala 27:17]
                when _T_6 : @[bmem.scala 27:17]
                  bmem_data <= UInt<29>("h114000ef") @[bmem.scala 34:24]
                else :
                  node _T_7 = eq(UInt<3>("h7"), addr) @[bmem.scala 27:17]
                  when _T_7 : @[bmem.scala 27:17]
                    bmem_data <= UInt<32>("hfe010113") @[bmem.scala 35:24]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), addr) @[bmem.scala 27:17]
                    when _T_8 : @[bmem.scala 27:17]
                      bmem_data <= UInt<24>("h812e23") @[bmem.scala 36:24]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), addr) @[bmem.scala 27:17]
                      when _T_9 : @[bmem.scala 27:17]
                        bmem_data <= UInt<26>("h2010413") @[bmem.scala 37:24]
                      else :
                        node _T_10 = eq(UInt<4>("ha"), addr) @[bmem.scala 27:17]
                        when _T_10 : @[bmem.scala 27:17]
                          bmem_data <= UInt<19>("h50793") @[bmem.scala 38:25]
                        else :
                          node _T_11 = eq(UInt<4>("hb"), addr) @[bmem.scala 27:17]
                          when _T_11 : @[bmem.scala 27:17]
                            bmem_data <= UInt<32>("hfef407a3") @[bmem.scala 39:25]
                          else :
                            node _T_12 = eq(UInt<4>("hc"), addr) @[bmem.scala 27:17]
                            when _T_12 : @[bmem.scala 27:17]
                              bmem_data <= UInt<14>("h27b7") @[bmem.scala 40:25]
                            else :
                              node _T_13 = eq(UInt<4>("hd"), addr) @[bmem.scala 27:17]
                              when _T_13 : @[bmem.scala 27:17]
                                bmem_data <= UInt<32>("hfef44703") @[bmem.scala 41:25]
                              else :
                                node _T_14 = eq(UInt<4>("he"), addr) @[bmem.scala 27:17]
                                when _T_14 : @[bmem.scala 27:17]
                                  bmem_data <= UInt<24>("he78123") @[bmem.scala 42:25]
                                else :
                                  node _T_15 = eq(UInt<4>("hf"), addr) @[bmem.scala 27:17]
                                  when _T_15 : @[bmem.scala 27:17]
                                    bmem_data <= UInt<5>("h13") @[bmem.scala 43:25]
                                  else :
                                    node _T_16 = eq(UInt<5>("h10"), addr) @[bmem.scala 27:17]
                                    when _T_16 : @[bmem.scala 27:17]
                                      bmem_data <= UInt<25>("h1c12403") @[bmem.scala 44:25]
                                    else :
                                      node _T_17 = eq(UInt<5>("h11"), addr) @[bmem.scala 27:17]
                                      when _T_17 : @[bmem.scala 27:17]
                                        bmem_data <= UInt<26>("h2010113") @[bmem.scala 45:25]
                                      else :
                                        node _T_18 = eq(UInt<5>("h12"), addr) @[bmem.scala 27:17]
                                        when _T_18 : @[bmem.scala 27:17]
                                          bmem_data <= UInt<16>("h8067") @[bmem.scala 46:25]
                                        else :
                                          node _T_19 = eq(UInt<5>("h13"), addr) @[bmem.scala 27:17]
                                          when _T_19 : @[bmem.scala 27:17]
                                            bmem_data <= UInt<32>("hfe010113") @[bmem.scala 47:25]
                                          else :
                                            node _T_20 = eq(UInt<5>("h14"), addr) @[bmem.scala 27:17]
                                            when _T_20 : @[bmem.scala 27:17]
                                              bmem_data <= UInt<24>("h812e23") @[bmem.scala 48:25]
                                            else :
                                              node _T_21 = eq(UInt<5>("h15"), addr) @[bmem.scala 27:17]
                                              when _T_21 : @[bmem.scala 27:17]
                                                bmem_data <= UInt<26>("h2010413") @[bmem.scala 49:25]
                                              else :
                                                node _T_22 = eq(UInt<5>("h16"), addr) @[bmem.scala 27:17]
                                                when _T_22 : @[bmem.scala 27:17]
                                                  bmem_data <= UInt<19>("h50793") @[bmem.scala 50:25]
                                                else :
                                                  node _T_23 = eq(UInt<5>("h17"), addr) @[bmem.scala 27:17]
                                                  when _T_23 : @[bmem.scala 27:17]
                                                    bmem_data <= UInt<32>("hfef407a3") @[bmem.scala 51:25]
                                                  else :
                                                    node _T_24 = eq(UInt<5>("h18"), addr) @[bmem.scala 27:17]
                                                    when _T_24 : @[bmem.scala 27:17]
                                                      bmem_data <= UInt<5>("h13") @[bmem.scala 52:25]
                                                    else :
                                                      node _T_25 = eq(UInt<5>("h19"), addr) @[bmem.scala 27:17]
                                                      when _T_25 : @[bmem.scala 27:17]
                                                        bmem_data <= UInt<14>("h27b7") @[bmem.scala 53:25]
                                                      else :
                                                        node _T_26 = eq(UInt<5>("h1a"), addr) @[bmem.scala 27:17]
                                                        when _T_26 : @[bmem.scala 27:17]
                                                          bmem_data <= UInt<23>("h47c783") @[bmem.scala 54:25]
                                                        else :
                                                          node _T_27 = eq(UInt<5>("h1b"), addr) @[bmem.scala 27:17]
                                                          when _T_27 : @[bmem.scala 27:17]
                                                            bmem_data <= UInt<28>("hff7f793") @[bmem.scala 55:25]
                                                          else :
                                                            node _T_28 = eq(UInt<5>("h1c"), addr) @[bmem.scala 27:17]
                                                            when _T_28 : @[bmem.scala 27:17]
                                                              bmem_data <= UInt<22>("h27f793") @[bmem.scala 56:25]
                                                            else :
                                                              node _T_29 = eq(UInt<5>("h1d"), addr) @[bmem.scala 27:17]
                                                              when _T_29 : @[bmem.scala 27:17]
                                                                bmem_data <= UInt<32>("hfe0788e3") @[bmem.scala 57:25]
                                                              else :
                                                                node _T_30 = eq(UInt<5>("h1e"), addr) @[bmem.scala 27:17]
                                                                when _T_30 : @[bmem.scala 27:17]
                                                                  bmem_data <= UInt<14>("h27b7") @[bmem.scala 58:25]
                                                                else :
                                                                  node _T_31 = eq(UInt<5>("h1f"), addr) @[bmem.scala 27:17]
                                                                  when _T_31 : @[bmem.scala 27:17]
                                                                    bmem_data <= UInt<32>("hfef44703") @[bmem.scala 59:25]
                                                                  else :
                                                                    node _T_32 = eq(UInt<6>("h20"), addr) @[bmem.scala 27:17]
                                                                    when _T_32 : @[bmem.scala 27:17]
                                                                      bmem_data <= UInt<24>("he780a3") @[bmem.scala 60:25]
                                                                    else :
                                                                      node _T_33 = eq(UInt<6>("h21"), addr) @[bmem.scala 27:17]
                                                                      when _T_33 : @[bmem.scala 27:17]
                                                                        bmem_data <= UInt<5>("h13") @[bmem.scala 61:25]
                                                                      else :
                                                                        node _T_34 = eq(UInt<6>("h22"), addr) @[bmem.scala 27:17]
                                                                        when _T_34 : @[bmem.scala 27:17]
                                                                          bmem_data <= UInt<25>("h1c12403") @[bmem.scala 62:25]
                                                                        else :
                                                                          node _T_35 = eq(UInt<6>("h23"), addr) @[bmem.scala 27:17]
                                                                          when _T_35 : @[bmem.scala 27:17]
                                                                            bmem_data <= UInt<26>("h2010113") @[bmem.scala 63:25]
                                                                          else :
                                                                            node _T_36 = eq(UInt<6>("h24"), addr) @[bmem.scala 27:17]
                                                                            when _T_36 : @[bmem.scala 27:17]
                                                                              bmem_data <= UInt<16>("h8067") @[bmem.scala 64:25]
                                                                            else :
                                                                              node _T_37 = eq(UInt<6>("h25"), addr) @[bmem.scala 27:17]
                                                                              when _T_37 : @[bmem.scala 27:17]
                                                                                bmem_data <= UInt<32>("hfe010113") @[bmem.scala 65:25]
                                                                              else :
                                                                                node _T_38 = eq(UInt<6>("h26"), addr) @[bmem.scala 27:17]
                                                                                when _T_38 : @[bmem.scala 27:17]
                                                                                  bmem_data <= UInt<24>("h812e23") @[bmem.scala 66:25]
                                                                                else :
                                                                                  node _T_39 = eq(UInt<6>("h27"), addr) @[bmem.scala 27:17]
                                                                                  when _T_39 : @[bmem.scala 27:17]
                                                                                    bmem_data <= UInt<26>("h2010413") @[bmem.scala 67:25]
                                                                                  else :
                                                                                    node _T_40 = eq(UInt<6>("h28"), addr) @[bmem.scala 27:17]
                                                                                    when _T_40 : @[bmem.scala 27:17]
                                                                                      bmem_data <= UInt<19>("h50793") @[bmem.scala 68:25]
                                                                                    else :
                                                                                      node _T_41 = eq(UInt<6>("h29"), addr) @[bmem.scala 27:17]
                                                                                      when _T_41 : @[bmem.scala 27:17]
                                                                                        bmem_data <= UInt<32>("hfef407a3") @[bmem.scala 69:25]
                                                                                      else :
                                                                                        node _T_42 = eq(UInt<6>("h2a"), addr) @[bmem.scala 27:17]
                                                                                        when _T_42 : @[bmem.scala 27:17]
                                                                                          bmem_data <= UInt<14>("h37b7") @[bmem.scala 70:25]
                                                                                        else :
                                                                                          node _T_43 = eq(UInt<6>("h2b"), addr) @[bmem.scala 27:17]
                                                                                          when _T_43 : @[bmem.scala 27:17]
                                                                                            bmem_data <= UInt<22>("h27c783") @[bmem.scala 71:25]
                                                                                          else :
                                                                                            node _T_44 = eq(UInt<6>("h2c"), addr) @[bmem.scala 27:17]
                                                                                            when _T_44 : @[bmem.scala 27:17]
                                                                                              bmem_data <= UInt<28>("hff7f693") @[bmem.scala 72:25]
                                                                                            else :
                                                                                              node _T_45 = eq(UInt<6>("h2d"), addr) @[bmem.scala 27:17]
                                                                                              when _T_45 : @[bmem.scala 27:17]
                                                                                                bmem_data <= UInt<14>("h37b7") @[bmem.scala 73:25]
                                                                                              else :
                                                                                                node _T_46 = eq(UInt<6>("h2e"), addr) @[bmem.scala 27:17]
                                                                                                when _T_46 : @[bmem.scala 27:17]
                                                                                                  bmem_data <= UInt<32>("hfef44703") @[bmem.scala 74:25]
                                                                                                else :
                                                                                                  node _T_47 = eq(UInt<6>("h2f"), addr) @[bmem.scala 27:17]
                                                                                                  when _T_47 : @[bmem.scala 27:17]
                                                                                                    bmem_data <= UInt<24>("he6e733") @[bmem.scala 75:25]
                                                                                                  else :
                                                                                                    node _T_48 = eq(UInt<6>("h30"), addr) @[bmem.scala 27:17]
                                                                                                    when _T_48 : @[bmem.scala 27:17]
                                                                                                      bmem_data <= UInt<28>("hff77713") @[bmem.scala 76:25]
                                                                                                    else :
                                                                                                      node _T_49 = eq(UInt<6>("h31"), addr) @[bmem.scala 27:17]
                                                                                                      when _T_49 : @[bmem.scala 27:17]
                                                                                                        bmem_data <= UInt<24>("he78123") @[bmem.scala 77:25]
                                                                                                      else :
                                                                                                        node _T_50 = eq(UInt<6>("h32"), addr) @[bmem.scala 27:17]
                                                                                                        when _T_50 : @[bmem.scala 27:17]
                                                                                                          bmem_data <= UInt<5>("h13") @[bmem.scala 78:25]
                                                                                                        else :
                                                                                                          node _T_51 = eq(UInt<6>("h33"), addr) @[bmem.scala 27:17]
                                                                                                          when _T_51 : @[bmem.scala 27:17]
                                                                                                            bmem_data <= UInt<25>("h1c12403") @[bmem.scala 79:25]
                                                                                                          else :
                                                                                                            node _T_52 = eq(UInt<6>("h34"), addr) @[bmem.scala 27:17]
                                                                                                            when _T_52 : @[bmem.scala 27:17]
                                                                                                              bmem_data <= UInt<26>("h2010113") @[bmem.scala 80:25]
                                                                                                            else :
                                                                                                              node _T_53 = eq(UInt<6>("h35"), addr) @[bmem.scala 27:17]
                                                                                                              when _T_53 : @[bmem.scala 27:17]
                                                                                                                bmem_data <= UInt<16>("h8067") @[bmem.scala 81:25]
                                                                                                              else :
                                                                                                                node _T_54 = eq(UInt<6>("h36"), addr) @[bmem.scala 27:17]
                                                                                                                when _T_54 : @[bmem.scala 27:17]
                                                                                                                  bmem_data <= UInt<32>("hfe010113") @[bmem.scala 82:25]
                                                                                                                else :
                                                                                                                  node _T_55 = eq(UInt<6>("h37"), addr) @[bmem.scala 27:17]
                                                                                                                  when _T_55 : @[bmem.scala 27:17]
                                                                                                                    bmem_data <= UInt<24>("h812e23") @[bmem.scala 83:25]
                                                                                                                  else :
                                                                                                                    node _T_56 = eq(UInt<6>("h38"), addr) @[bmem.scala 27:17]
                                                                                                                    when _T_56 : @[bmem.scala 27:17]
                                                                                                                      bmem_data <= UInt<26>("h2010413") @[bmem.scala 84:25]
                                                                                                                    else :
                                                                                                                      node _T_57 = eq(UInt<6>("h39"), addr) @[bmem.scala 27:17]
                                                                                                                      when _T_57 : @[bmem.scala 27:17]
                                                                                                                        bmem_data <= UInt<19>("h50793") @[bmem.scala 85:25]
                                                                                                                      else :
                                                                                                                        node _T_58 = eq(UInt<6>("h3a"), addr) @[bmem.scala 27:17]
                                                                                                                        when _T_58 : @[bmem.scala 27:17]
                                                                                                                          bmem_data <= UInt<32>("hfef407a3") @[bmem.scala 86:25]
                                                                                                                        else :
                                                                                                                          node _T_59 = eq(UInt<6>("h3b"), addr) @[bmem.scala 27:17]
                                                                                                                          when _T_59 : @[bmem.scala 27:17]
                                                                                                                            bmem_data <= UInt<14>("h37b7") @[bmem.scala 87:25]
                                                                                                                          else :
                                                                                                                            node _T_60 = eq(UInt<6>("h3c"), addr) @[bmem.scala 27:17]
                                                                                                                            when _T_60 : @[bmem.scala 27:17]
                                                                                                                              bmem_data <= UInt<32>("hfef44703") @[bmem.scala 88:25]
                                                                                                                            else :
                                                                                                                              node _T_61 = eq(UInt<6>("h3d"), addr) @[bmem.scala 27:17]
                                                                                                                              when _T_61 : @[bmem.scala 27:17]
                                                                                                                                bmem_data <= UInt<24>("he780a3") @[bmem.scala 89:25]
                                                                                                                              else :
                                                                                                                                node _T_62 = eq(UInt<6>("h3e"), addr) @[bmem.scala 27:17]
                                                                                                                                when _T_62 : @[bmem.scala 27:17]
                                                                                                                                  bmem_data <= UInt<5>("h13") @[bmem.scala 90:25]
                                                                                                                                else :
                                                                                                                                  node _T_63 = eq(UInt<6>("h3f"), addr) @[bmem.scala 27:17]
                                                                                                                                  when _T_63 : @[bmem.scala 27:17]
                                                                                                                                    bmem_data <= UInt<14>("h37b7") @[bmem.scala 91:25]
                                                                                                                                  else :
                                                                                                                                    node _T_64 = eq(UInt<7>("h40"), addr) @[bmem.scala 27:17]
                                                                                                                                    when _T_64 : @[bmem.scala 27:17]
                                                                                                                                      bmem_data <= UInt<23>("h47c783") @[bmem.scala 92:25]
                                                                                                                                    else :
                                                                                                                                      node _T_65 = eq(UInt<7>("h41"), addr) @[bmem.scala 27:17]
                                                                                                                                      when _T_65 : @[bmem.scala 27:17]
                                                                                                                                        bmem_data <= UInt<28>("hff7f793") @[bmem.scala 93:25]
                                                                                                                                      else :
                                                                                                                                        node _T_66 = eq(UInt<7>("h42"), addr) @[bmem.scala 27:17]
                                                                                                                                        when _T_66 : @[bmem.scala 27:17]
                                                                                                                                          bmem_data <= UInt<25>("h107f793") @[bmem.scala 94:25]
                                                                                                                                        else :
                                                                                                                                          node _T_67 = eq(UInt<7>("h43"), addr) @[bmem.scala 27:17]
                                                                                                                                          when _T_67 : @[bmem.scala 27:17]
                                                                                                                                            bmem_data <= UInt<32>("hfe0788e3") @[bmem.scala 95:25]
                                                                                                                                          else :
                                                                                                                                            node _T_68 = eq(UInt<7>("h44"), addr) @[bmem.scala 27:17]
                                                                                                                                            when _T_68 : @[bmem.scala 27:17]
                                                                                                                                              bmem_data <= UInt<14>("h37b7") @[bmem.scala 96:25]
                                                                                                                                            else :
                                                                                                                                              node _T_69 = eq(UInt<7>("h45"), addr) @[bmem.scala 27:17]
                                                                                                                                              when _T_69 : @[bmem.scala 27:17]
                                                                                                                                                bmem_data <= UInt<19>("h7c783") @[bmem.scala 97:25]
                                                                                                                                              else :
                                                                                                                                                node _T_70 = eq(UInt<7>("h46"), addr) @[bmem.scala 27:17]
                                                                                                                                                when _T_70 : @[bmem.scala 27:17]
                                                                                                                                                  bmem_data <= UInt<28>("hff7f793") @[bmem.scala 98:25]
                                                                                                                                                else :
                                                                                                                                                  node _T_71 = eq(UInt<7>("h47"), addr) @[bmem.scala 27:17]
                                                                                                                                                  when _T_71 : @[bmem.scala 27:17]
                                                                                                                                                    bmem_data <= UInt<19>("h78513") @[bmem.scala 99:25]
                                                                                                                                                  else :
                                                                                                                                                    node _T_72 = eq(UInt<7>("h48"), addr) @[bmem.scala 27:17]
                                                                                                                                                    when _T_72 : @[bmem.scala 27:17]
                                                                                                                                                      bmem_data <= UInt<25>("h1c12403") @[bmem.scala 100:25]
                                                                                                                                                    else :
                                                                                                                                                      node _T_73 = eq(UInt<7>("h49"), addr) @[bmem.scala 27:17]
                                                                                                                                                      when _T_73 : @[bmem.scala 27:17]
                                                                                                                                                        bmem_data <= UInt<26>("h2010113") @[bmem.scala 101:25]
                                                                                                                                                      else :
                                                                                                                                                        node _T_74 = eq(UInt<7>("h4a"), addr) @[bmem.scala 27:17]
                                                                                                                                                        when _T_74 : @[bmem.scala 27:17]
                                                                                                                                                          bmem_data <= UInt<16>("h8067") @[bmem.scala 102:25]
                                                                                                                                                        else :
                                                                                                                                                          node _T_75 = eq(UInt<7>("h4b"), addr) @[bmem.scala 27:17]
                                                                                                                                                          when _T_75 : @[bmem.scala 27:17]
                                                                                                                                                            bmem_data <= UInt<32>("hff010113") @[bmem.scala 103:25]
                                                                                                                                                          else :
                                                                                                                                                            node _T_76 = eq(UInt<7>("h4c"), addr) @[bmem.scala 27:17]
                                                                                                                                                            when _T_76 : @[bmem.scala 27:17]
                                                                                                                                                              bmem_data <= UInt<21>("h112623") @[bmem.scala 104:25]
                                                                                                                                                            else :
                                                                                                                                                              node _T_77 = eq(UInt<7>("h4d"), addr) @[bmem.scala 27:17]
                                                                                                                                                              when _T_77 : @[bmem.scala 27:17]
                                                                                                                                                                bmem_data <= UInt<24>("h812423") @[bmem.scala 105:25]
                                                                                                                                                              else :
                                                                                                                                                                node _T_78 = eq(UInt<7>("h4e"), addr) @[bmem.scala 27:17]
                                                                                                                                                                when _T_78 : @[bmem.scala 27:17]
                                                                                                                                                                  bmem_data <= UInt<25>("h1010413") @[bmem.scala 106:25]
                                                                                                                                                                else :
                                                                                                                                                                  node _T_79 = eq(UInt<7>("h4f"), addr) @[bmem.scala 27:17]
                                                                                                                                                                  when _T_79 : @[bmem.scala 27:17]
                                                                                                                                                                    bmem_data <= UInt<25>("h1000513") @[bmem.scala 107:25]
                                                                                                                                                                  else :
                                                                                                                                                                    node _T_80 = eq(UInt<7>("h50"), addr) @[bmem.scala 27:17]
                                                                                                                                                                    when _T_80 : @[bmem.scala 27:17]
                                                                                                                                                                      bmem_data <= UInt<32>("heddff0ef") @[bmem.scala 108:25]
                                                                                                                                                                    else :
                                                                                                                                                                      node _T_81 = eq(UInt<7>("h51"), addr) @[bmem.scala 27:17]
                                                                                                                                                                      when _T_81 : @[bmem.scala 27:17]
                                                                                                                                                                        bmem_data <= UInt<24>("h800513") @[bmem.scala 109:25]
                                                                                                                                                                      else :
                                                                                                                                                                        node _T_82 = eq(UInt<7>("h52"), addr) @[bmem.scala 27:17]
                                                                                                                                                                        when _T_82 : @[bmem.scala 27:17]
                                                                                                                                                                          bmem_data <= UInt<32>("hf4dff0ef") @[bmem.scala 110:25]
                                                                                                                                                                        else :
                                                                                                                                                                          node _T_83 = eq(UInt<7>("h53"), addr) @[bmem.scala 27:17]
                                                                                                                                                                          when _T_83 : @[bmem.scala 27:17]
                                                                                                                                                                            bmem_data <= UInt<27>("h54000ef") @[bmem.scala 111:25]
                                                                                                                                                                          else :
                                                                                                                                                                            node _T_84 = eq(UInt<7>("h54"), addr) @[bmem.scala 27:17]
                                                                                                                                                                            when _T_84 : @[bmem.scala 27:17]
                                                                                                                                                                              bmem_data <= UInt<27>("h4f00513") @[bmem.scala 112:25]
                                                                                                                                                                            else :
                                                                                                                                                                              node _T_85 = eq(UInt<7>("h55"), addr) @[bmem.scala 27:17]
                                                                                                                                                                              when _T_85 : @[bmem.scala 27:17]
                                                                                                                                                                                bmem_data <= UInt<32>("hef9ff0ef") @[bmem.scala 113:25]
                                                                                                                                                                              else :
                                                                                                                                                                                node _T_86 = eq(UInt<7>("h56"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                when _T_86 : @[bmem.scala 27:17]
                                                                                                                                                                                  bmem_data <= UInt<27>("h6b00513") @[bmem.scala 114:25]
                                                                                                                                                                                else :
                                                                                                                                                                                  node _T_87 = eq(UInt<7>("h57"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                  when _T_87 : @[bmem.scala 27:17]
                                                                                                                                                                                    bmem_data <= UInt<32>("hef1ff0ef") @[bmem.scala 115:25]
                                                                                                                                                                                  else :
                                                                                                                                                                                    node _T_88 = eq(UInt<7>("h58"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                    when _T_88 : @[bmem.scala 27:17]
                                                                                                                                                                                      bmem_data <= UInt<25>("h1c000ef") @[bmem.scala 116:25]
                                                                                                                                                                                    else :
                                                                                                                                                                                      node _T_89 = eq(UInt<7>("h59"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                      when _T_89 : @[bmem.scala 27:17]
                                                                                                                                                                                        bmem_data <= UInt<11>("h793") @[bmem.scala 117:25]
                                                                                                                                                                                      else :
                                                                                                                                                                                        node _T_90 = eq(UInt<7>("h5a"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                        when _T_90 : @[bmem.scala 27:17]
                                                                                                                                                                                          bmem_data <= UInt<19>("h78513") @[bmem.scala 118:25]
                                                                                                                                                                                        else :
                                                                                                                                                                                          node _T_91 = eq(UInt<7>("h5b"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                          when _T_91 : @[bmem.scala 27:17]
                                                                                                                                                                                            bmem_data <= UInt<24>("hc12083") @[bmem.scala 119:25]
                                                                                                                                                                                          else :
                                                                                                                                                                                            node _T_92 = eq(UInt<7>("h5c"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                            when _T_92 : @[bmem.scala 27:17]
                                                                                                                                                                                              bmem_data <= UInt<24>("h812403") @[bmem.scala 120:25]
                                                                                                                                                                                            else :
                                                                                                                                                                                              node _T_93 = eq(UInt<7>("h5d"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                              when _T_93 : @[bmem.scala 27:17]
                                                                                                                                                                                                bmem_data <= UInt<25>("h1010113") @[bmem.scala 121:25]
                                                                                                                                                                                              else :
                                                                                                                                                                                                node _T_94 = eq(UInt<7>("h5e"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                when _T_94 : @[bmem.scala 27:17]
                                                                                                                                                                                                  bmem_data <= UInt<16>("h8067") @[bmem.scala 122:25]
                                                                                                                                                                                                else :
                                                                                                                                                                                                  node _T_95 = eq(UInt<7>("h5f"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                  when _T_95 : @[bmem.scala 27:17]
                                                                                                                                                                                                    bmem_data <= UInt<32>("hff010113") @[bmem.scala 123:25]
                                                                                                                                                                                                  else :
                                                                                                                                                                                                    node _T_96 = eq(UInt<7>("h60"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                    when _T_96 : @[bmem.scala 27:17]
                                                                                                                                                                                                      bmem_data <= UInt<24>("h812623") @[bmem.scala 124:25]
                                                                                                                                                                                                    else :
                                                                                                                                                                                                      node _T_97 = eq(UInt<7>("h61"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                      when _T_97 : @[bmem.scala 27:17]
                                                                                                                                                                                                        bmem_data <= UInt<25>("h1010413") @[bmem.scala 125:25]
                                                                                                                                                                                                      else :
                                                                                                                                                                                                        node _T_98 = eq(UInt<7>("h62"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                        when _T_98 : @[bmem.scala 27:17]
                                                                                                                                                                                                          bmem_data <= UInt<10>("h2b7") @[bmem.scala 126:25]
                                                                                                                                                                                                        else :
                                                                                                                                                                                                          node _T_99 = eq(UInt<7>("h63"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                          when _T_99 : @[bmem.scala 27:17]
                                                                                                                                                                                                            bmem_data <= UInt<18>("h28067") @[bmem.scala 127:25]
                                                                                                                                                                                                          else :
                                                                                                                                                                                                            node _T_100 = eq(UInt<7>("h64"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                            when _T_100 : @[bmem.scala 27:17]
                                                                                                                                                                                                              bmem_data <= UInt<5>("h13") @[bmem.scala 128:26]
                                                                                                                                                                                                            else :
                                                                                                                                                                                                              node _T_101 = eq(UInt<7>("h65"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                              when _T_101 : @[bmem.scala 27:17]
                                                                                                                                                                                                                bmem_data <= UInt<24>("hc12403") @[bmem.scala 129:26]
                                                                                                                                                                                                              else :
                                                                                                                                                                                                                node _T_102 = eq(UInt<7>("h66"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                when _T_102 : @[bmem.scala 27:17]
                                                                                                                                                                                                                  bmem_data <= UInt<25>("h1010113") @[bmem.scala 130:26]
                                                                                                                                                                                                                else :
                                                                                                                                                                                                                  node _T_103 = eq(UInt<7>("h67"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                  when _T_103 : @[bmem.scala 27:17]
                                                                                                                                                                                                                    bmem_data <= UInt<16>("h8067") @[bmem.scala 131:26]
                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                    node _T_104 = eq(UInt<7>("h68"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                    when _T_104 : @[bmem.scala 27:17]
                                                                                                                                                                                                                      bmem_data <= UInt<32>("hfd010113") @[bmem.scala 132:26]
                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                      node _T_105 = eq(UInt<7>("h69"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                      when _T_105 : @[bmem.scala 27:17]
                                                                                                                                                                                                                        bmem_data <= UInt<26>("h2112623") @[bmem.scala 133:26]
                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                        node _T_106 = eq(UInt<7>("h6a"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                        when _T_106 : @[bmem.scala 27:17]
                                                                                                                                                                                                                          bmem_data <= UInt<26>("h2812423") @[bmem.scala 134:26]
                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                          node _T_107 = eq(UInt<7>("h6b"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                          when _T_107 : @[bmem.scala 27:17]
                                                                                                                                                                                                                            bmem_data <= UInt<26>("h3010413") @[bmem.scala 135:26]
                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                            node _T_108 = eq(UInt<7>("h6c"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                            when _T_108 : @[bmem.scala 27:17]
                                                                                                                                                                                                                              bmem_data <= UInt<32>("hfe042623") @[bmem.scala 136:26]
                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                              node _T_109 = eq(UInt<7>("h6d"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                              when _T_109 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                bmem_data <= UInt<32>("hfe042223") @[bmem.scala 137:26]
                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                node _T_110 = eq(UInt<7>("h6e"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                when _T_110 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                  bmem_data <= UInt<32>("hfe042023") @[bmem.scala 138:26]
                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                  node _T_111 = eq(UInt<7>("h6f"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                  when _T_111 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hfe042423") @[bmem.scala 139:26]
                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                    node _T_112 = eq(UInt<7>("h70"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                    when _T_112 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                      bmem_data <= UInt<32>("hfec42503") @[bmem.scala 140:26]
                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                      node _T_113 = eq(UInt<7>("h71"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                      when _T_113 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                        bmem_data <= UInt<28>("h88000ef") @[bmem.scala 141:26]
                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                        node _T_114 = eq(UInt<7>("h72"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                        when _T_114 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hfca42e23") @[bmem.scala 142:26]
                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                          node _T_115 = eq(UInt<7>("h73"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                          when _T_115 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                            bmem_data <= UInt<32>("hfec42783") @[bmem.scala 143:26]
                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                            node _T_116 = eq(UInt<7>("h74"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                            when _T_116 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                              bmem_data <= UInt<23>("h478793") @[bmem.scala 144:26]
                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                              node _T_117 = eq(UInt<7>("h75"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                              when _T_117 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                bmem_data <= UInt<19>("h78513") @[bmem.scala 145:26]
                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                node _T_118 = eq(UInt<7>("h76"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                when _T_118 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                  bmem_data <= UInt<27>("h74000ef") @[bmem.scala 146:26]
                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                  node _T_119 = eq(UInt<7>("h77"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                  when _T_119 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hfca42c23") @[bmem.scala 147:26]
                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                    node _T_120 = eq(UInt<7>("h78"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                    when _T_120 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("hfec42783") @[bmem.scala 148:26]
                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                      node _T_121 = eq(UInt<7>("h79"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                      when _T_121 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                        bmem_data <= UInt<24>("h878793") @[bmem.scala 149:26]
                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                        node _T_122 = eq(UInt<7>("h7a"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                        when _T_122 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hfef42623") @[bmem.scala 150:26]
                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                          node _T_123 = eq(UInt<7>("h7b"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                          when _T_123 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                            bmem_data <= UInt<26>("h3c0006f") @[bmem.scala 151:26]
                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                            node _T_124 = eq(UInt<7>("h7c"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                            when _T_124 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("hfec42503") @[bmem.scala 152:26]
                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                              node _T_125 = eq(UInt<7>("h7d"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                              when _T_125 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                bmem_data <= UInt<27>("h58000ef") @[bmem.scala 153:26]
                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                node _T_126 = eq(UInt<7>("h7e"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                when _T_126 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                  bmem_data <= UInt<32>("hfea42023") @[bmem.scala 154:26]
                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                  node _T_127 = eq(UInt<7>("h7f"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                  when _T_127 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hfe842783") @[bmem.scala 155:26]
                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                    node _T_128 = eq(UInt<8>("h80"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                    when _T_128 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                      bmem_data <= UInt<21>("h178713") @[bmem.scala 156:26]
                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                      node _T_129 = eq(UInt<8>("h81"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                      when _T_129 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("hfee42423") @[bmem.scala 157:26]
                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                        node _T_130 = eq(UInt<8>("h82"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                        when _T_130 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                          bmem_data <= UInt<22>("h279793") @[bmem.scala 158:26]
                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                          node _T_131 = eq(UInt<8>("h83"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                          when _T_131 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("hfe442703") @[bmem.scala 159:26]
                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                            node _T_132 = eq(UInt<8>("h84"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                            when _T_132 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                              bmem_data <= UInt<24>("hf707b3") @[bmem.scala 160:26]
                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                              node _T_133 = eq(UInt<8>("h85"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                              when _T_133 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("hfe042703") @[bmem.scala 161:26]
                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                node _T_134 = eq(UInt<8>("h86"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                when _T_134 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                  bmem_data <= UInt<24>("he7a023") @[bmem.scala 162:26]
                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                  node _T_135 = eq(UInt<8>("h87"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                  when _T_135 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hfec42783") @[bmem.scala 163:26]
                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                    node _T_136 = eq(UInt<8>("h88"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                    when _T_136 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                      bmem_data <= UInt<23>("h478793") @[bmem.scala 164:26]
                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                      node _T_137 = eq(UInt<8>("h89"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                      when _T_137 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("hfef42623") @[bmem.scala 165:26]
                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                        node _T_138 = eq(UInt<8>("h8a"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                        when _T_138 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hfd842783") @[bmem.scala 166:26]
                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                          node _T_139 = eq(UInt<8>("h8b"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                          when _T_139 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                            bmem_data <= UInt<22>("h27d793") @[bmem.scala 167:26]
                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                            node _T_140 = eq(UInt<8>("h8c"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                            when _T_140 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("hfe842703") @[bmem.scala 168:26]
                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                              node _T_141 = eq(UInt<8>("h8d"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                              when _T_141 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("hfaf76ee3") @[bmem.scala 169:26]
                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                node _T_142 = eq(UInt<8>("h8e"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                when _T_142 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<5>("h13") @[bmem.scala 170:26]
                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                  node _T_143 = eq(UInt<8>("h8f"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                  when _T_143 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<26>("h2c12083") @[bmem.scala 171:26]
                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                    node _T_144 = eq(UInt<8>("h90"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                    when _T_144 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<26>("h2812403") @[bmem.scala 172:26]
                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                      node _T_145 = eq(UInt<8>("h91"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                      when _T_145 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<26>("h3010113") @[bmem.scala 173:26]
                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                        node _T_146 = eq(UInt<8>("h92"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                        when _T_146 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<16>("h8067") @[bmem.scala 174:26]
                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                          node _T_147 = eq(UInt<8>("h93"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                          when _T_147 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("hfd010113") @[bmem.scala 175:26]
                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                            node _T_148 = eq(UInt<8>("h94"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                            when _T_148 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<26>("h2112623") @[bmem.scala 176:26]
                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                              node _T_149 = eq(UInt<8>("h95"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                              when _T_149 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<26>("h2812423") @[bmem.scala 177:26]
                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                node _T_150 = eq(UInt<8>("h96"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                when _T_150 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<26>("h3010413") @[bmem.scala 178:26]
                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                  node _T_151 = eq(UInt<8>("h97"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                  when _T_151 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hfca42e23") @[bmem.scala 179:26]
                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                    node _T_152 = eq(UInt<8>("h98"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                    when _T_152 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<14>("h37b7") @[bmem.scala 180:26]
                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                      node _T_153 = eq(UInt<8>("h99"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                      when _T_153 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<23>("h57c783") @[bmem.scala 181:26]
                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                        node _T_154 = eq(UInt<8>("h9a"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                        when _T_154 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<28>("hff7f713") @[bmem.scala 182:26]
                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                          node _T_155 = eq(UInt<8>("h9b"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                          when _T_155 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<14>("h37b7") @[bmem.scala 183:26]
                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                            node _T_156 = eq(UInt<8>("h9c"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                            when _T_156 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<21>("h176713") @[bmem.scala 184:26]
                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                              node _T_157 = eq(UInt<8>("h9d"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                              when _T_157 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<28>("hff77713") @[bmem.scala 185:26]
                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                node _T_158 = eq(UInt<8>("h9e"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                when _T_158 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<24>("he782a3") @[bmem.scala 186:26]
                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                  node _T_159 = eq(UInt<8>("h9f"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                  when _T_159 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<22>("h300513") @[bmem.scala 187:26]
                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                    node _T_160 = eq(UInt<8>("ha0"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                    when _T_160 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("he59ff0ef") @[bmem.scala 188:26]
                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                      node _T_161 = eq(UInt<8>("ha1"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                      when _T_161 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("hfdc42503") @[bmem.scala 189:26]
                                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                                        node _T_162 = eq(UInt<8>("ha2"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                        when _T_162 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<27>("h78000ef") @[bmem.scala 190:26]
                                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                                          node _T_163 = eq(UInt<8>("ha3"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                          when _T_163 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("hfe042623") @[bmem.scala 191:26]
                                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                                            node _T_164 = eq(UInt<8>("ha4"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                            when _T_164 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<26>("h300006f") @[bmem.scala 192:26]
                                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                                              node _T_165 = eq(UInt<8>("ha5"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                              when _T_165 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<11>("h513") @[bmem.scala 193:26]
                                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                                node _T_166 = eq(UInt<8>("ha6"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                when _T_166 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<32>("he41ff0ef") @[bmem.scala 194:26]
                                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                                  node _T_167 = eq(UInt<8>("ha7"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                  when _T_167 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<19>("h50793") @[bmem.scala 195:26]
                                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                                    node _T_168 = eq(UInt<8>("ha8"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                    when _T_168 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<19>("h78713") @[bmem.scala 196:26]
                                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                                      node _T_169 = eq(UInt<8>("ha9"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                      when _T_169 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("hfec42783") @[bmem.scala 197:26]
                                                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                                                        node _T_170 = eq(UInt<8>("haa"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                        when _T_170 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hff040693") @[bmem.scala 198:26]
                                                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                                                          node _T_171 = eq(UInt<8>("hab"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                          when _T_171 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<24>("hf687b3") @[bmem.scala 199:26]
                                                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                                                            node _T_172 = eq(UInt<8>("hac"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                            when _T_172 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("hfee78c23") @[bmem.scala 200:26]
                                                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                                                              node _T_173 = eq(UInt<8>("had"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                              when _T_173 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("hfec42783") @[bmem.scala 201:26]
                                                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                                                node _T_174 = eq(UInt<8>("hae"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                when _T_174 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<21>("h178793") @[bmem.scala 202:26]
                                                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                                                  node _T_175 = eq(UInt<8>("haf"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                  when _T_175 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hfef42623") @[bmem.scala 203:26]
                                                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                                                    node _T_176 = eq(UInt<8>("hb0"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                    when _T_176 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("hfec42703") @[bmem.scala 204:26]
                                                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                                                      node _T_177 = eq(UInt<8>("hb1"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                      when _T_177 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<22>("h300793") @[bmem.scala 205:26]
                                                                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                                                                        node _T_178 = eq(UInt<8>("hb2"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                        when _T_178 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hfce7f6e3") @[bmem.scala 206:26]
                                                                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                                                                          node _T_179 = eq(UInt<8>("hb3"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                          when _T_179 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<14>("h37b7") @[bmem.scala 207:26]
                                                                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                                                                            node _T_180 = eq(UInt<8>("hb4"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                            when _T_180 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<23>("h57c783") @[bmem.scala 208:26]
                                                                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                                                                              node _T_181 = eq(UInt<8>("hb5"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                              when _T_181 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<28>("hff7f713") @[bmem.scala 209:26]
                                                                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                                                                node _T_182 = eq(UInt<8>("hb6"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                when _T_182 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<14>("h37b7") @[bmem.scala 210:26]
                                                                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                                                                  node _T_183 = eq(UInt<8>("hb7"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                  when _T_183 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hffe77713") @[bmem.scala 211:26]
                                                                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                                                                    node _T_184 = eq(UInt<8>("hb8"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                    when _T_184 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<28>("hff77713") @[bmem.scala 212:26]
                                                                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                                                                      node _T_185 = eq(UInt<8>("hb9"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                      when _T_185 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<24>("he782a3") @[bmem.scala 213:26]
                                                                                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                                                                                        node _T_186 = eq(UInt<8>("hba"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                        when _T_186 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hfe842783") @[bmem.scala 214:26]
                                                                                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                                                                                          node _T_187 = eq(UInt<8>("hbb"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                          when _T_187 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<19>("h78513") @[bmem.scala 215:26]
                                                                                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                                                                                            node _T_188 = eq(UInt<8>("hbc"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                            when _T_188 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<26>("h2c12083") @[bmem.scala 216:26]
                                                                                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                                                                                              node _T_189 = eq(UInt<8>("hbd"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                              when _T_189 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<26>("h2812403") @[bmem.scala 217:26]
                                                                                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                                                                                node _T_190 = eq(UInt<8>("hbe"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                when _T_190 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<26>("h3010113") @[bmem.scala 218:26]
                                                                                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                                                                                  node _T_191 = eq(UInt<8>("hbf"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                  when _T_191 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<16>("h8067") @[bmem.scala 219:26]
                                                                                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                                                                                    node _T_192 = eq(UInt<8>("hc0"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                    when _T_192 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("hfd010113") @[bmem.scala 220:26]
                                                                                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                                                                                      node _T_193 = eq(UInt<8>("hc1"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                      when _T_193 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<26>("h2112623") @[bmem.scala 221:26]
                                                                                                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                                                                                                        node _T_194 = eq(UInt<8>("hc2"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                        when _T_194 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<26>("h2812423") @[bmem.scala 222:26]
                                                                                                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                                                                                                          node _T_195 = eq(UInt<8>("hc3"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                          when _T_195 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<26>("h3010413") @[bmem.scala 223:26]
                                                                                                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                                                                                                            node _T_196 = eq(UInt<8>("hc4"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                            when _T_196 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("hfca42e23") @[bmem.scala 224:26]
                                                                                                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                                                                                                              node _T_197 = eq(UInt<8>("hc5"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                              when _T_197 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("hfdc42783") @[bmem.scala 225:26]
                                                                                                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                                                                                                node _T_198 = eq(UInt<8>("hc6"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                when _T_198 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<32>("hfef42423") @[bmem.scala 226:26]
                                                                                                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                                                                                                  node _T_199 = eq(UInt<8>("hc7"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                  when _T_199 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<22>("h200793") @[bmem.scala 227:26]
                                                                                                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                                                                                                    node _T_200 = eq(UInt<8>("hc8"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                    when _T_200 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("hfef42623") @[bmem.scala 228:26]
                                                                                                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                                                                                                      node _T_201 = eq(UInt<8>("hc9"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                      when _T_201 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<26>("h280006f") @[bmem.scala 229:26]
                                                                                                                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                                                                                                                        node _T_202 = eq(UInt<8>("hca"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                        when _T_202 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hfec42783") @[bmem.scala 230:26]
                                                                                                                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                                                                                                                          node _T_203 = eq(UInt<8>("hcb"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                          when _T_203 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("hff040713") @[bmem.scala 231:26]
                                                                                                                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                                                                                                                            node _T_204 = eq(UInt<8>("hcc"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                            when _T_204 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<24>("hf707b3") @[bmem.scala 232:26]
                                                                                                                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                                                                                                                              node _T_205 = eq(UInt<8>("hcd"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                              when _T_205 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("hff87c783") @[bmem.scala 233:26]
                                                                                                                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                                                                                                                node _T_206 = eq(UInt<8>("hce"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                when _T_206 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<19>("h78513") @[bmem.scala 234:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                                                                                                                  node _T_207 = eq(UInt<8>("hcf"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                  when _T_207 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("hd9dff0ef") @[bmem.scala 235:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                                                                                                                    node _T_208 = eq(UInt<8>("hd0"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                    when _T_208 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("hfec42783") @[bmem.scala 236:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                                                                                                                      node _T_209 = eq(UInt<8>("hd1"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                      when _T_209 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("hfff78793") @[bmem.scala 237:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                      else :
                                                                                                                                                                                                                                                                                                                                                                                                                                        node _T_210 = eq(UInt<8>("hd2"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                        when _T_210 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("hfef42623") @[bmem.scala 238:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                        else :
                                                                                                                                                                                                                                                                                                                                                                                                                                          node _T_211 = eq(UInt<8>("hd3"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                          when _T_211 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("hfec42783") @[bmem.scala 239:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                          else :
                                                                                                                                                                                                                                                                                                                                                                                                                                            node _T_212 = eq(UInt<8>("hd4"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                            when _T_212 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("hfc07dce3") @[bmem.scala 240:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                            else :
                                                                                                                                                                                                                                                                                                                                                                                                                                              node _T_213 = eq(UInt<8>("hd5"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                              when _T_213 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<5>("h13") @[bmem.scala 241:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                              else :
                                                                                                                                                                                                                                                                                                                                                                                                                                                node _T_214 = eq(UInt<8>("hd6"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                when _T_214 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<26>("h2c12083") @[bmem.scala 242:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                else :
                                                                                                                                                                                                                                                                                                                                                                                                                                                  node _T_215 = eq(UInt<8>("hd7"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  when _T_215 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<26>("h2812403") @[bmem.scala 243:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  else :
                                                                                                                                                                                                                                                                                                                                                                                                                                                    node _T_216 = eq(UInt<8>("hd8"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    when _T_216 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<26>("h3010113") @[bmem.scala 244:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    else :
                                                                                                                                                                                                                                                                                                                                                                                                                                                      node _T_217 = eq(UInt<8>("hd9"), addr) @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                      when _T_217 : @[bmem.scala 27:17]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<16>("h8067") @[bmem.scala 245:26]
    io.bmem_rdata <= bmem_data @[bmem.scala 248:17]

  module IMem_Interface :
    input clock : Clock
    input reset : Reset
    output io : { ibus : { flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, wbs : { flip m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}

    inst imem of IMem @[imem_interface.scala 40:20]
    imem.clock <= clock
    imem.reset <= reset
    inst bmem of BMem @[imem_interface.scala 41:20]
    bmem.clock <= clock
    bmem.reset <= reset
    node ibus_imem_addr = bits(io.ibus.addr, 10, 0) @[imem_interface.scala 47:41]
    node ibus_bmem_addr = bits(io.ibus.addr, 9, 0) @[imem_interface.scala 48:41]
    node wbs_imem_addr = bits(io.wbs.m2s.addr, 10, 0) @[imem_interface.scala 49:44]
    reg ack : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[imem_interface.scala 54:31]
    reg wb_select : UInt<4>, clock with :
      reset => (UInt<1>("h0"), wb_select) @[imem_interface.scala 55:27]
    node _wb_rd_en_T = eq(io.wbs.m2s.we, UInt<1>("h0")) @[imem_interface.scala 57:24]
    node wb_rd_en = and(_wb_rd_en_T, io.wbs.m2s.stb) @[imem_interface.scala 57:39]
    node wb_wr_en = and(io.wbs.m2s.we, io.wbs.m2s.stb) @[imem_interface.scala 58:38]
    node _imem_wbs_addr_match_T = bits(io.wbs.m2s.addr, 15, 12) @[imem_interface.scala 63:46]
    node _imem_wbs_addr_match_T_1 = orr(_imem_wbs_addr_match_T) @[imem_interface.scala 63:84]
    node imem_wbs_addr_match = eq(_imem_wbs_addr_match_T_1, UInt<1>("h0")) @[imem_interface.scala 63:29]
    node imem_wbs_write = and(imem_wbs_addr_match, wb_wr_en) @[imem_interface.scala 64:46]
    wire imem_wbs_sel : UInt<1>
    imem_wbs_sel <= UInt<1>("h0")
    node _imem_wbs_sel_T = or(wb_rd_en, wb_wr_en) @[imem_interface.scala 70:33]
    node _imem_wbs_sel_T_1 = and(_imem_wbs_sel_T, imem_wbs_addr_match) @[imem_interface.scala 70:46]
    imem_wbs_sel <= _imem_wbs_sel_T_1 @[imem_interface.scala 70:19]
    reg imem_ibus_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[imem_interface.scala 71:32]
    node _imem_ibus_valid_T = eq(imem_wbs_sel, UInt<1>("h0")) @[imem_interface.scala 72:22]
    imem_ibus_valid <= _imem_ibus_valid_T @[imem_interface.scala 72:19]
    wire rd_imem_const : UInt<32>
    rd_imem_const <= UInt<32>("h0")
    wire rd_imem_inst : UInt<32>
    rd_imem_inst <= UInt<32>("h0")
    node imem_addr = mux(imem_wbs_sel, wbs_imem_addr, ibus_imem_addr) @[imem_interface.scala 80:27]
    imem.io.imem_addr <= imem_addr @[imem_interface.scala 81:21]
    imem.io.imem_wdata <= io.wbs.m2s.data @[imem_interface.scala 87:22]
    imem.io.wr_en <= imem_wbs_write @[imem_interface.scala 88:17]
    imem.io.st_type <= io.wbs.m2s.sel @[imem_interface.scala 89:19]
    when imem_ibus_valid : @[imem_interface.scala 92:23]
      rd_imem_inst <= imem.io.imem_rdata @[imem_interface.scala 93:16]
    else :
      rd_imem_const <= imem.io.imem_rdata @[imem_interface.scala 95:17]
    when imem_wbs_sel : @[imem_interface.scala 98:20]
      ack <= io.wbs.m2s.stb @[imem_interface.scala 99:12]
    wire rconst_data : UInt<32>
    rconst_data <= UInt<32>("h0")
    wb_select <= io.wbs.m2s.sel @[imem_interface.scala 104:16]
    node _T = eq(wb_select, UInt<4>("h1")) @[imem_interface.scala 106:18]
    when _T : @[imem_interface.scala 106:45]
      node _rconst_data_T = bits(rd_imem_const, 7, 0) @[imem_interface.scala 107:33]
      rconst_data <= _rconst_data_T @[imem_interface.scala 107:17]
    else :
      node _T_1 = eq(wb_select, UInt<4>("h2")) @[imem_interface.scala 108:24]
      when _T_1 : @[imem_interface.scala 108:52]
        node _rconst_data_T_1 = bits(rd_imem_const, 15, 8) @[imem_interface.scala 109:33]
        rconst_data <= _rconst_data_T_1 @[imem_interface.scala 109:17]
      else :
        node _T_2 = eq(wb_select, UInt<4>("h4")) @[imem_interface.scala 110:24]
        when _T_2 : @[imem_interface.scala 110:52]
          node _rconst_data_T_2 = bits(rd_imem_const, 23, 16) @[imem_interface.scala 111:33]
          rconst_data <= _rconst_data_T_2 @[imem_interface.scala 111:17]
        else :
          node _T_3 = eq(wb_select, UInt<4>("h8")) @[imem_interface.scala 112:24]
          when _T_3 : @[imem_interface.scala 112:52]
            node _rconst_data_T_3 = bits(rd_imem_const, 31, 24) @[imem_interface.scala 113:33]
            rconst_data <= _rconst_data_T_3 @[imem_interface.scala 113:17]
          else :
            node _T_4 = eq(wb_select, UInt<4>("h3")) @[imem_interface.scala 114:24]
            when _T_4 : @[imem_interface.scala 114:52]
              node _rconst_data_T_4 = bits(rd_imem_const, 15, 0) @[imem_interface.scala 115:33]
              rconst_data <= _rconst_data_T_4 @[imem_interface.scala 115:17]
            else :
              node _T_5 = eq(wb_select, UInt<4>("hc")) @[imem_interface.scala 116:24]
              when _T_5 : @[imem_interface.scala 116:54]
                node _rconst_data_T_5 = bits(rd_imem_const, 31, 16) @[imem_interface.scala 117:33]
                rconst_data <= _rconst_data_T_5 @[imem_interface.scala 117:17]
              else :
                node _rconst_data_T_6 = bits(rd_imem_const, 31, 0) @[imem_interface.scala 119:33]
                rconst_data <= _rconst_data_T_6 @[imem_interface.scala 119:17]
    io.wbs.ack_o <= ack @[imem_interface.scala 123:18]
    io.wbs.data_o <= rconst_data @[imem_interface.scala 124:18]
    reg bmem_ibus_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[imem_interface.scala 127:31]
    node _bmem_ibus_sel_T = bits(io.ibus.addr, 15, 12) @[imem_interface.scala 128:34]
    node _bmem_ibus_sel_T_1 = eq(_bmem_ibus_sel_T, UInt<4>("h7")) @[imem_interface.scala 128:66]
    bmem_ibus_sel <= _bmem_ibus_sel_T_1 @[imem_interface.scala 128:18]
    bmem.io.bmem_addr <= ibus_bmem_addr @[imem_interface.scala 130:21]
    node _io_ibus_inst_T = mux(bmem_ibus_sel, bmem.io.bmem_rdata, rd_imem_inst) @[imem_interface.scala 137:25]
    io.ibus.inst <= _io_ibus_inst_T @[imem_interface.scala 137:19]
    node _io_ibus_valid_T = mux(bmem_ibus_sel, UInt<1>("h1"), imem_ibus_valid) @[imem_interface.scala 138:25]
    io.ibus.valid <= _io_ibus_valid_T @[imem_interface.scala 138:19]

  module WBM_DBus :
    input clock : Clock
    input reset : Reset
    output io : { dbus : { flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}, wbm : { m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, flip ack_i : UInt<1>, flip data_i : UInt<32>}}

    wire st_sel_vec : UInt<4>
    st_sel_vec <= UInt<4>("h0")
    node _T = eq(io.dbus.st_type, UInt<2>("h1")) @[wbm_dbus.scala 35:19]
    when _T : @[wbm_dbus.scala 35:40]
      st_sel_vec <= UInt<4>("hf") @[wbm_dbus.scala 36:18]
    else :
      node _T_1 = eq(io.dbus.st_type, UInt<2>("h2")) @[wbm_dbus.scala 38:26]
      when _T_1 : @[wbm_dbus.scala 38:47]
        st_sel_vec <= UInt<4>("h3") @[wbm_dbus.scala 39:18]
      else :
        node _T_2 = eq(io.dbus.st_type, UInt<2>("h3")) @[wbm_dbus.scala 41:26]
        when _T_2 : @[wbm_dbus.scala 41:46]
          st_sel_vec <= UInt<4>("h1") @[wbm_dbus.scala 42:18]
    node ld_align = bits(io.dbus.addr, 1, 0) @[wbm_dbus.scala 46:30]
    wire ld_sel_vec : UInt<4>
    ld_sel_vec <= UInt<4>("h0")
    node _T_3 = eq(io.dbus.ld_type, UInt<3>("h1")) @[wbm_dbus.scala 51:16]
    when _T_3 : @[wbm_dbus.scala 51:37]
      ld_sel_vec <= UInt<4>("hf") @[wbm_dbus.scala 52:16]
    else :
      node _T_4 = eq(io.dbus.ld_type, UInt<3>("h2")) @[wbm_dbus.scala 54:23]
      node _T_5 = eq(io.dbus.ld_type, UInt<3>("h4")) @[wbm_dbus.scala 54:54]
      node _T_6 = or(_T_4, _T_5) @[wbm_dbus.scala 54:43]
      when _T_6 : @[wbm_dbus.scala 54:76]
        node _ld_sel_vec_T = bits(ld_align, 1, 1) @[wbm_dbus.scala 55:34]
        node _ld_sel_vec_T_1 = mux(_ld_sel_vec_T, UInt<4>("hc"), UInt<4>("h3")) @[wbm_dbus.scala 55:25]
        ld_sel_vec <= _ld_sel_vec_T_1 @[wbm_dbus.scala 55:18]
      else :
        node _T_7 = eq(io.dbus.ld_type, UInt<3>("h3")) @[wbm_dbus.scala 57:23]
        node _T_8 = eq(io.dbus.ld_type, UInt<3>("h5")) @[wbm_dbus.scala 57:54]
        node _T_9 = or(_T_7, _T_8) @[wbm_dbus.scala 57:43]
        when _T_9 : @[wbm_dbus.scala 57:75]
          node _T_10 = eq(ld_align, UInt<2>("h3")) @[wbm_dbus.scala 58:21]
          when _T_10 : @[wbm_dbus.scala 58:32]
            ld_sel_vec <= UInt<4>("h8") @[wbm_dbus.scala 59:20]
          else :
            node _T_11 = eq(ld_align, UInt<2>("h2")) @[wbm_dbus.scala 60:27]
            when _T_11 : @[wbm_dbus.scala 60:37]
              ld_sel_vec <= UInt<4>("h4") @[wbm_dbus.scala 61:20]
            else :
              node _T_12 = eq(ld_align, UInt<1>("h1")) @[wbm_dbus.scala 62:27]
              when _T_12 : @[wbm_dbus.scala 62:37]
                ld_sel_vec <= UInt<4>("h2") @[wbm_dbus.scala 63:20]
              else :
                ld_sel_vec <= UInt<4>("h1") @[wbm_dbus.scala 65:20]
    node _io_wbm_m2s_addr_T = bits(io.dbus.addr, 15, 0) @[wbm_dbus.scala 71:34]
    io.wbm.m2s.addr <= _io_wbm_m2s_addr_T @[wbm_dbus.scala 71:19]
    io.wbm.m2s.data <= io.dbus.wdata @[wbm_dbus.scala 72:19]
    io.wbm.m2s.we <= io.dbus.wr_en @[wbm_dbus.scala 73:19]
    node _io_wbm_m2s_sel_T = orr(io.dbus.st_type) @[wbm_dbus.scala 74:37]
    node _io_wbm_m2s_sel_T_1 = mux(_io_wbm_m2s_sel_T, st_sel_vec, ld_sel_vec) @[wbm_dbus.scala 74:25]
    io.wbm.m2s.sel <= _io_wbm_m2s_sel_T_1 @[wbm_dbus.scala 74:19]
    node _io_wbm_m2s_stb_T = bits(io.dbus.rd_en, 0, 0) @[wbm_dbus.scala 75:36]
    node _io_wbm_m2s_stb_T_1 = bits(io.dbus.wr_en, 0, 0) @[wbm_dbus.scala 75:60]
    node _io_wbm_m2s_stb_T_2 = or(_io_wbm_m2s_stb_T, _io_wbm_m2s_stb_T_1) @[wbm_dbus.scala 75:43]
    io.wbm.m2s.stb <= _io_wbm_m2s_stb_T_2 @[wbm_dbus.scala 75:19]
    io.wbm.m2s.cyc <= UInt<1>("h1") @[wbm_dbus.scala 76:19]
    io.dbus.rdata <= io.wbm.data_i @[wbm_dbus.scala 78:19]
    io.dbus.valid <= io.wbm.ack_i @[wbm_dbus.scala 79:19]

  module UARTTx :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, out : UInt<1>, flip div : UInt<10>, flip nstop : UInt<2>}

    reg prescaler : UInt<10>, clock with :
      reset => (reset, UInt<1>("h0")) @[uart_tx.scala 23:26]
    node pulse = eq(prescaler, UInt<1>("h0")) @[uart_tx.scala 24:30]
    reg counter : UInt<4>, clock with :
      reset => (reset, UInt<1>("h0")) @[uart_tx.scala 27:26]
    reg shifter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), shifter) @[uart_tx.scala 28:22]
    reg out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[uart_tx.scala 29:26]
    io.out <= out @[uart_tx.scala 30:17]
    node busy = neq(counter, UInt<1>("h0")) @[uart_tx.scala 32:28]
    node _state1_T = eq(busy, UInt<1>("h0")) @[uart_tx.scala 33:34]
    node state1 = and(io.in.valid, _state1_T) @[uart_tx.scala 33:31]
    node _io_in_ready_T = eq(busy, UInt<1>("h0")) @[uart_tx.scala 35:20]
    io.in.ready <= _io_in_ready_T @[uart_tx.scala 35:17]
    when state1 : @[uart_tx.scala 37:16]
      node _shifter_T = cat(io.in.bits, UInt<1>("h0")) @[Cat.scala 33:92]
      shifter <= _shifter_T @[uart_tx.scala 38:14]
      node _counter_T = eq(io.nstop, UInt<1>("h0")) @[uart_tx.scala 40:45]
      node _counter_T_1 = eq(io.nstop, UInt<1>("h1")) @[uart_tx.scala 40:45]
      node _counter_T_2 = mux(_counter_T, UInt<4>("hb"), UInt<1>("h0")) @[Mux.scala 27:73]
      node _counter_T_3 = mux(_counter_T_1, UInt<4>("hc"), UInt<1>("h0")) @[Mux.scala 27:73]
      node _counter_T_4 = or(_counter_T_2, _counter_T_3) @[Mux.scala 27:73]
      wire _counter_WIRE : UInt<4> @[Mux.scala 27:73]
      _counter_WIRE <= _counter_T_4 @[Mux.scala 27:73]
      counter <= _counter_WIRE @[uart_tx.scala 39:14]
    when busy : @[uart_tx.scala 44:16]
      node _prescaler_T = sub(io.div, UInt<1>("h1")) @[uart_tx.scala 45:37]
      node _prescaler_T_1 = tail(_prescaler_T, 1) @[uart_tx.scala 45:37]
      node _prescaler_T_2 = sub(prescaler, UInt<1>("h1")) @[uart_tx.scala 45:55]
      node _prescaler_T_3 = tail(_prescaler_T_2, 1) @[uart_tx.scala 45:55]
      node _prescaler_T_4 = mux(pulse, _prescaler_T_1, _prescaler_T_3) @[uart_tx.scala 45:21]
      prescaler <= _prescaler_T_4 @[uart_tx.scala 45:15]
      when pulse : @[uart_tx.scala 47:17]
        node _counter_T_5 = sub(counter, UInt<1>("h1")) @[uart_tx.scala 48:26]
        node _counter_T_6 = tail(_counter_T_5, 1) @[uart_tx.scala 48:26]
        counter <= _counter_T_6 @[uart_tx.scala 48:15]
        node _shifter_T_1 = shr(shifter, 1) @[uart_tx.scala 49:38]
        node _shifter_T_2 = cat(UInt<1>("h1"), _shifter_T_1) @[Cat.scala 33:92]
        shifter <= _shifter_T_2 @[uart_tx.scala 49:15]
        node _out_T = bits(shifter, 0, 0) @[uart_tx.scala 50:25]
        out <= _out_T @[uart_tx.scala 50:15]

  module UARTRx :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<1>, out : { valid : UInt<1>, bits : UInt<8>}, flip div : UInt<10>}

    reg data_count : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_count) @[uart_rx.scala 23:34]
    node data_last = eq(data_count, UInt<1>("h0")) @[uart_rx.scala 24:43]
    reg prescaler : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[uart_rx.scala 27:38]
    node pulse = eq(prescaler, UInt<1>("h0")) @[uart_rx.scala 28:42]
    node _prescaler_next_T = sub(io.div, UInt<1>("h1")) @[uart_rx.scala 29:50]
    node _prescaler_next_T_1 = tail(_prescaler_next_T, 1) @[uart_rx.scala 29:50]
    node _prescaler_next_T_2 = sub(prescaler, UInt<1>("h1")) @[uart_rx.scala 29:68]
    node _prescaler_next_T_3 = tail(_prescaler_next_T_2, 1) @[uart_rx.scala 29:68]
    node prescaler_next = mux(pulse, _prescaler_next_T_1, _prescaler_next_T_3) @[uart_rx.scala 29:34]
    reg debounce : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[uart_rx.scala 32:38]
    node _debounce_max_T = div(io.div, UInt<2>("h2")) @[uart_rx.scala 33:52]
    node debounce_max = eq(debounce, _debounce_max_T) @[uart_rx.scala 33:41]
    reg shifter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[uart_rx.scala 36:27]
    reg valid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid) @[uart_rx.scala 37:23]
    valid <= UInt<1>("h0") @[uart_rx.scala 38:18]
    io.out.valid <= valid @[uart_rx.scala 39:18]
    io.out.bits <= shifter @[uart_rx.scala 40:18]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[uart_rx.scala 44:27]
    node _T = eq(UInt<1>("h0"), state) @[uart_rx.scala 46:18]
    when _T : @[uart_rx.scala 46:18]
      node _T_1 = eq(io.in, UInt<1>("h0")) @[uart_rx.scala 48:13]
      when _T_1 : @[uart_rx.scala 48:21]
        node _debounce_T = add(debounce, UInt<1>("h1")) @[uart_rx.scala 50:30]
        node _debounce_T_1 = tail(_debounce_T, 1) @[uart_rx.scala 50:30]
        debounce <= _debounce_T_1 @[uart_rx.scala 50:18]
        when debounce_max : @[uart_rx.scala 51:29]
          state <= UInt<1>("h1") @[uart_rx.scala 52:22]
          data_count <= UInt<4>("h8") @[uart_rx.scala 53:22]
          prescaler <= prescaler_next @[uart_rx.scala 54:22]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[uart_rx.scala 46:18]
      when _T_2 : @[uart_rx.scala 46:18]
        prescaler <= prescaler_next @[uart_rx.scala 60:17]
        when pulse : @[uart_rx.scala 61:20]
          node _data_count_T = sub(data_count, UInt<1>("h1")) @[uart_rx.scala 62:34]
          node _data_count_T_1 = tail(_data_count_T, 1) @[uart_rx.scala 62:34]
          data_count <= _data_count_T_1 @[uart_rx.scala 62:20]
          when data_last : @[uart_rx.scala 64:26]
            state <= UInt<1>("h0") @[uart_rx.scala 65:22]
            valid <= UInt<1>("h1") @[uart_rx.scala 66:22]
            debounce <= UInt<1>("h0") @[uart_rx.scala 67:22]
          else :
            node _shifter_T = shr(shifter, 1) @[uart_rx.scala 70:44]
            node _shifter_T_1 = cat(io.in, _shifter_T) @[Cat.scala 33:92]
            shifter <= _shifter_T_1 @[uart_rx.scala 70:22]

  module UART :
    input clock : Clock
    input reset : Reset
    output io : { flip uart_select : UInt<1>, txd : UInt<1>, flip rxd : UInt<1>, uartInt : UInt<1>, wbs : { flip m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}

    inst txm of UARTTx @[uart.scala 53:19]
    txm.clock <= clock
    txm.reset <= reset
    inst rxm of UARTRx @[uart.scala 54:19]
    rxm.clock <= clock
    rxm.reset <= reset
    reg txen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[uart.scala 57:27]
    reg rxen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[uart.scala 58:27]
    reg tx_data_r : UInt<8>, clock with :
      reset => (reset, UInt<8>("h4a")) @[uart.scala 60:27]
    reg rx_data_r : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[uart.scala 61:27]
    reg control_r : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[uart.scala 62:27]
    reg baud_r : UInt<10>, clock with :
      reset => (reset, UInt<10>("h8")) @[uart.scala 63:27]
    reg status_r : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[uart.scala 64:27]
    reg int_mask_r : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[uart.scala 65:27]
    reg nstop : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[uart.scala 70:27]
    txen <= UInt<1>("h0") @[uart.scala 73:19]
    txm.io.in.valid <= txen @[uart.scala 74:19]
    txm.io.in.bits <= tx_data_r @[uart.scala 75:19]
    txm.io.div <= baud_r @[uart.scala 76:19]
    txm.io.nstop <= nstop @[uart.scala 77:19]
    rxm.io.div <= baud_r @[uart.scala 78:19]
    rxm.io.in <= io.rxd @[uart.scala 81:19]
    io.txd <= txm.io.out @[uart.scala 82:19]
    node addr = bits(io.wbs.m2s.addr, 7, 0) @[uart.scala 85:36]
    node _rd_en_T = eq(io.wbs.m2s.we, UInt<1>("h0")) @[uart.scala 86:21]
    node rd_en = and(_rd_en_T, io.wbs.m2s.stb) @[uart.scala 86:36]
    node wr_en = and(io.wbs.m2s.we, io.wbs.m2s.stb) @[uart.scala 87:35]
    node _sel_reg_rx_T = eq(addr, UInt<1>("h0")) @[uart.scala 91:32]
    node sel_reg_rx = and(_sel_reg_rx_T, io.uart_select) @[uart.scala 91:56]
    node _sel_reg_tx_T = eq(addr, UInt<1>("h1")) @[uart.scala 92:32]
    node sel_reg_tx = and(_sel_reg_tx_T, io.uart_select) @[uart.scala 92:56]
    node _sel_reg_baud_T = eq(addr, UInt<2>("h2")) @[uart.scala 93:32]
    node sel_reg_baud = and(_sel_reg_baud_T, io.uart_select) @[uart.scala 93:54]
    node _sel_reg_control_T = eq(addr, UInt<2>("h3")) @[uart.scala 94:32]
    node sel_reg_control = and(_sel_reg_control_T, io.uart_select) @[uart.scala 94:57]
    node _sel_reg_status_T = eq(addr, UInt<3>("h4")) @[uart.scala 95:32]
    node sel_reg_status = and(_sel_reg_status_T, io.uart_select) @[uart.scala 95:56]
    node _sel_reg_int_mask_T = eq(addr, UInt<3>("h5")) @[uart.scala 96:32]
    node sel_reg_int_mask = and(_sel_reg_int_mask_T, io.uart_select) @[uart.scala 96:58]
    reg ack : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[uart.scala 99:28]
    io.wbs.ack_o <= ack @[uart.scala 100:19]
    node _ack_T = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[uart.scala 101:37]
    ack <= _ack_T @[uart.scala 101:19]
    reg rd_data : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[uart.scala 104:28]
    node _T = and(rd_en, sel_reg_control) @[uart.scala 106:14]
    when _T : @[uart.scala 106:33]
      rd_data <= control_r @[uart.scala 107:15]
    else :
      node _T_1 = and(rd_en, sel_reg_baud) @[uart.scala 108:20]
      when _T_1 : @[uart.scala 108:36]
        rd_data <= baud_r @[uart.scala 109:15]
      else :
        node _T_2 = and(rd_en, sel_reg_status) @[uart.scala 110:20]
        when _T_2 : @[uart.scala 110:38]
          rd_data <= status_r @[uart.scala 111:15]
        else :
          node _T_3 = and(rd_en, sel_reg_rx) @[uart.scala 112:20]
          when _T_3 : @[uart.scala 112:34]
            rd_data <= rx_data_r @[uart.scala 113:15]
          else :
            rd_data <= UInt<1>("h0") @[uart.scala 115:15]
    io.wbs.data_o <= rd_data @[uart.scala 117:18]
    node _io_uartInt_T = and(status_r, int_mask_r) @[uart.scala 120:31]
    node _io_uartInt_T_1 = orr(_io_uartInt_T) @[uart.scala 120:45]
    io.uartInt <= _io_uartInt_T_1 @[uart.scala 120:18]
    when wr_en : @[uart.scala 123:15]
      when sel_reg_tx : @[uart.scala 124:22]
        node _tx_data_r_T = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 125:36]
        tx_data_r <= _tx_data_r_T @[uart.scala 125:18]
        txen <= UInt<1>("h1") @[uart.scala 126:18]
      else :
        when sel_reg_baud : @[uart.scala 128:29]
          node _baud_r_T = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 129:36]
          baud_r <= _baud_r_T @[uart.scala 129:18]
        else :
          when sel_reg_control : @[uart.scala 131:31]
            node _control_r_T = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 132:36]
            control_r <= _control_r_T @[uart.scala 132:18]
          else :
            when sel_reg_int_mask : @[uart.scala 134:32]
              node _int_mask_r_T = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 135:36]
              int_mask_r <= _int_mask_r_T @[uart.scala 135:18]
    when rxm.io.out.valid : @[uart.scala 140:25]
      rx_data_r <= rxm.io.out.bits @[uart.scala 141:18]
      node _status_r_T = bits(status_r, 7, 1) @[uart.scala 142:33]
      node _status_r_T_1 = cat(_status_r_T, UInt<1>("h1")) @[Cat.scala 33:92]
      status_r <= _status_r_T_1 @[uart.scala 142:18]
    else :
      node _T_4 = and(wr_en, sel_reg_status) @[uart.scala 143:20]
      when _T_4 : @[uart.scala 143:38]
        node _status_r_T_2 = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 144:36]
        status_r <= _status_r_T_2 @[uart.scala 144:18]
      else :
        node _status_r_T_3 = bits(status_r, 7, 2) @[uart.scala 146:33]
        node _status_r_T_4 = bits(status_r, 0, 0) @[uart.scala 146:65]
        node status_r_hi = cat(_status_r_T_3, txm.io.in.ready) @[Cat.scala 33:92]
        node _status_r_T_5 = cat(status_r_hi, _status_r_T_4) @[Cat.scala 33:92]
        status_r <= _status_r_T_5 @[uart.scala 146:18]

  module SPI :
    input clock : Clock
    input reset : Reset
    output io : { flip spi_select : UInt<1>, spi_cs : UInt<1>, spi_clk : UInt<1>, spi_mosi : UInt<1>, flip spi_miso : UInt<1>, spi_intr : UInt<1>, wbs : { flip m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}

    reg ack_o : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 65:25]
    reg rd_data : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[spi.scala 66:25]
    reg cs_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[spi.scala 68:23]
    reg sclk_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 69:23]
    reg mosi_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 70:23]
    wire miso_r : UInt<1>
    miso_r <= UInt<1>("h0")
    wire wr_en : UInt<1>
    wr_en <= UInt<1>("h0")
    wire rd_en : UInt<1>
    rd_en <= UInt<1>("h0")
    reg read_wait_done : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 75:31]
    wire latch_s_data : UInt<8>
    latch_s_data <= UInt<8>("h0")
    reg reg_rxdata : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[spi.scala 78:28]
    reg reg_txdata : UInt<8>, clock with :
      reset => (reset, UInt<8>("h35")) @[spi.scala 79:28]
    reg reg_ssmask : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 80:28]
    reg rx_shift_data : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[spi.scala 82:30]
    reg tx_shift_data : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[spi.scala 83:30]
    reg rx_latch_flag : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 84:30]
    reg bit_iroe : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 87:27]
    reg bit_itoe : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 88:27]
    reg bit_itrdy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 89:27]
    reg bit_irrdy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 90:27]
    reg bit_ie : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 91:27]
    reg bit_sso : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[spi.scala 92:27]
    reg bit_toe : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 95:27]
    reg bit_roe : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 96:27]
    reg bit_trdy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[spi.scala 97:27]
    reg bit_rrdy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 98:27]
    reg bit_tmt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[spi.scala 99:27]
    reg bit_e : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 100:27]
    node addr = bits(io.wbs.m2s.addr, 7, 0) @[spi.scala 106:33]
    node _rd_en_T = eq(io.wbs.m2s.we, UInt<1>("h0")) @[spi.scala 108:19]
    node _rd_en_T_1 = and(_rd_en_T, io.wbs.m2s.stb) @[spi.scala 108:34]
    node _rd_en_T_2 = and(_rd_en_T_1, io.wbs.m2s.cyc) @[spi.scala 108:52]
    rd_en <= _rd_en_T_2 @[spi.scala 108:16]
    node _wr_en_T = and(io.wbs.m2s.we, io.wbs.m2s.stb) @[spi.scala 109:33]
    node _wr_en_T_1 = and(_wr_en_T, io.wbs.m2s.cyc) @[spi.scala 109:51]
    wr_en <= _wr_en_T_1 @[spi.scala 109:16]
    latch_s_data <= io.wbs.m2s.data @[spi.scala 110:16]
    node _sel_reg_rx_T = eq(addr, UInt<1>("h0")) @[spi.scala 113:32]
    node sel_reg_rx = and(_sel_reg_rx_T, io.spi_select) @[spi.scala 113:54]
    node _sel_reg_tx_T = eq(addr, UInt<1>("h1")) @[spi.scala 114:32]
    node sel_reg_tx = and(_sel_reg_tx_T, io.spi_select) @[spi.scala 114:54]
    node _sel_reg_baud_T = eq(addr, UInt<2>("h2")) @[spi.scala 115:32]
    node sel_reg_baud = and(_sel_reg_baud_T, io.spi_select) @[spi.scala 115:52]
    node _sel_reg_control_T = eq(addr, UInt<2>("h3")) @[spi.scala 116:32]
    node sel_reg_control = and(_sel_reg_control_T, io.spi_select) @[spi.scala 116:55]
    node _sel_reg_status_T = eq(addr, UInt<3>("h4")) @[spi.scala 117:32]
    node sel_reg_status = and(_sel_reg_status_T, io.spi_select) @[spi.scala 117:54]
    node _sel_reg_ssmask_T = eq(addr, UInt<3>("h5")) @[spi.scala 118:32]
    node sel_reg_ssmask = and(_sel_reg_ssmask_T, io.spi_select) @[spi.scala 118:55]
    when rx_latch_flag : @[spi.scala 121:23]
      reg_rxdata <= rx_shift_data @[spi.scala 122:16]
    node _T = and(wr_en, sel_reg_tx) @[spi.scala 126:14]
    node _T_1 = and(_T, bit_trdy) @[spi.scala 126:28]
    when _T_1 : @[spi.scala 126:41]
      reg_txdata <= latch_s_data @[spi.scala 127:16]
    node _bit_e_T = or(bit_toe, bit_roe) @[spi.scala 131:19]
    bit_e <= _bit_e_T @[spi.scala 131:8]
    node reg_status_lo_hi = cat(bit_toe, bit_roe) @[Cat.scala 33:92]
    node reg_status_lo = cat(reg_status_lo_hi, UInt<2>("h0")) @[Cat.scala 33:92]
    node reg_status_hi_lo = cat(bit_trdy, bit_tmt) @[Cat.scala 33:92]
    node reg_status_hi_hi = cat(bit_e, bit_rrdy) @[Cat.scala 33:92]
    node reg_status_hi = cat(reg_status_hi_hi, reg_status_hi_lo) @[Cat.scala 33:92]
    node reg_status = cat(reg_status_hi, reg_status_lo) @[Cat.scala 33:92]
    node reg_control_lo_lo = cat(bit_itoe, bit_iroe) @[Cat.scala 33:92]
    node reg_control_lo_hi = cat(bit_itrdy, UInt<1>("h0")) @[Cat.scala 33:92]
    node reg_control_lo = cat(reg_control_lo_hi, reg_control_lo_lo) @[Cat.scala 33:92]
    node reg_control_hi_lo = cat(bit_ie, bit_irrdy) @[Cat.scala 33:92]
    node reg_control_hi_hi = cat(bit_sso, UInt<1>("h0")) @[Cat.scala 33:92]
    node reg_control_hi = cat(reg_control_hi_hi, reg_control_hi_lo) @[Cat.scala 33:92]
    node reg_control = cat(reg_control_hi, reg_control_lo) @[Cat.scala 33:92]
    node _T_2 = and(wr_en, sel_reg_control) @[spi.scala 138:14]
    when _T_2 : @[spi.scala 138:34]
      node _bit_iroe_T = bits(latch_s_data, 0, 0) @[spi.scala 139:30]
      bit_iroe <= _bit_iroe_T @[spi.scala 139:15]
      node _bit_itoe_T = bits(latch_s_data, 1, 1) @[spi.scala 140:30]
      bit_itoe <= _bit_itoe_T @[spi.scala 140:15]
      node _bit_itrdy_T = bits(latch_s_data, 3, 3) @[spi.scala 141:30]
      bit_itrdy <= _bit_itrdy_T @[spi.scala 141:15]
      node _bit_irrdy_T = bits(latch_s_data, 4, 4) @[spi.scala 142:30]
      bit_irrdy <= _bit_irrdy_T @[spi.scala 142:15]
      node _bit_ie_T = bits(latch_s_data, 5, 5) @[spi.scala 143:30]
      bit_ie <= _bit_ie_T @[spi.scala 143:15]
      node _bit_sso_T = bits(latch_s_data, 7, 7) @[spi.scala 144:30]
      bit_sso <= _bit_sso_T @[spi.scala 144:15]
    node _io_spi_intr_T = and(bit_iroe, bit_roe) @[spi.scala 147:37]
    node _io_spi_intr_T_1 = and(bit_itoe, bit_toe) @[spi.scala 147:58]
    node _io_spi_intr_T_2 = or(_io_spi_intr_T, _io_spi_intr_T_1) @[spi.scala 147:47]
    node _io_spi_intr_T_3 = and(bit_ie, _io_spi_intr_T_2) @[spi.scala 147:25]
    node _io_spi_intr_T_4 = and(bit_itrdy, bit_trdy) @[spi.scala 147:83]
    node _io_spi_intr_T_5 = or(_io_spi_intr_T_3, _io_spi_intr_T_4) @[spi.scala 147:70]
    node _io_spi_intr_T_6 = and(bit_irrdy, bit_rrdy) @[spi.scala 147:108]
    node _io_spi_intr_T_7 = or(_io_spi_intr_T_5, _io_spi_intr_T_6) @[spi.scala 147:95]
    io.spi_intr <= _io_spi_intr_T_7 @[spi.scala 147:14]
    when ack_o : @[spi.scala 152:15]
      ack_o <= UInt<1>("h0") @[spi.scala 153:10]
    else :
      node _T_3 = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[spi.scala 154:21]
      node _T_4 = or(io.wbs.m2s.we, read_wait_done) @[spi.scala 154:39]
      node _T_5 = and(_T_3, _T_4) @[spi.scala 154:30]
      when _T_5 : @[spi.scala 154:59]
        ack_o <= UInt<1>("h1") @[spi.scala 155:10]
    io.wbs.ack_o <= ack_o @[spi.scala 157:15]
    when ack_o : @[spi.scala 159:15]
      read_wait_done <= UInt<1>("h0") @[spi.scala 160:19]
    else :
      node _T_6 = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[spi.scala 161:21]
      node _T_7 = not(io.wbs.m2s.we) @[spi.scala 161:35]
      node _T_8 = and(_T_6, _T_7) @[spi.scala 161:30]
      when _T_8 : @[spi.scala 161:43]
        read_wait_done <= UInt<1>("h1") @[spi.scala 162:20]
    reg clock_cnt : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[spi.scala 166:31]
    reg data_cnt : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[spi.scala 167:31]
    reg pending_data : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 168:31]
    wire c_status : UInt<3>
    c_status <= UInt<3>("h0")
    reg n_status : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[spi.scala 170:31]
    reg p_status : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[spi.scala 171:31]
    node _T_9 = and(wr_en, sel_reg_tx) @[spi.scala 173:17]
    when _T_9 : @[spi.scala 173:32]
      pending_data <= UInt<1>("h1") @[spi.scala 174:20]
    else :
      node _T_10 = eq(c_status, UInt<3>("h1")) @[spi.scala 175:27]
      when _T_10 : @[spi.scala 175:40]
        pending_data <= UInt<1>("h0") @[spi.scala 176:20]
    when rd_en : @[spi.scala 179:18]
      wire _rd_data_WIRE : UInt<8> @[spi.scala 180:81]
      _rd_data_WIRE <= reg_txdata @[spi.scala 180:81]
      node _rd_data_T = mux(sel_reg_ssmask, reg_ssmask, UInt<8>("h0")) @[spi.scala 181:78]
      node _rd_data_T_1 = mux(sel_reg_control, reg_control, _rd_data_T) @[spi.scala 181:44]
      node _rd_data_T_2 = mux(sel_reg_status, reg_status, _rd_data_T_1) @[spi.scala 181:12]
      node _rd_data_T_3 = mux(sel_reg_tx, _rd_data_WIRE, _rd_data_T_2) @[spi.scala 180:49]
      node _rd_data_T_4 = mux(sel_reg_rx, reg_rxdata, _rd_data_T_3) @[spi.scala 180:21]
      rd_data <= _rd_data_T_4 @[spi.scala 180:15]
    io.wbs.data_o <= rd_data @[spi.scala 183:18]
    node _T_11 = and(wr_en, sel_reg_ssmask) @[spi.scala 185:16]
    when _T_11 : @[spi.scala 185:35]
      node _reg_ssmask_T = bits(latch_s_data, 0, 0) @[spi.scala 186:33]
      reg_ssmask <= _reg_ssmask_T @[spi.scala 186:18]
    node _io_spi_cs_T = not(reg_ssmask) @[spi.scala 198:16]
    io.spi_cs <= _io_spi_cs_T @[spi.scala 198:13]
    node _T_12 = eq(c_status, UInt<3>("h3")) @[spi.scala 201:21]
    node _T_13 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 201:49]
    node _T_14 = and(_T_12, _T_13) @[spi.scala 201:35]
    when _T_14 : @[spi.scala 201:67]
      node _sclk_r_T = not(sclk_r) @[spi.scala 202:18]
      sclk_r <= _sclk_r_T @[spi.scala 202:14]
    io.spi_clk <= sclk_r @[spi.scala 204:16]
    miso_r <= io.spi_miso @[spi.scala 206:12]
    node _T_15 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 208:22]
    node _T_16 = eq(UInt<1>("h0"), sclk_r) @[spi.scala 208:59]
    node _T_17 = and(_T_15, _T_16) @[spi.scala 208:39]
    node _T_18 = eq(c_status, UInt<3>("h3")) @[spi.scala 208:84]
    node _T_19 = and(_T_17, _T_18) @[spi.scala 208:71]
    when _T_19 : @[spi.scala 208:99]
      when UInt<1>("h0") : @[spi.scala 209:38]
        node _rx_shift_data_T = bits(rx_shift_data, 7, 1) @[spi.scala 210:51]
        node _rx_shift_data_T_1 = cat(miso_r, _rx_shift_data_T) @[Cat.scala 33:92]
        rx_shift_data <= _rx_shift_data_T_1 @[spi.scala 210:23]
      else :
        node _rx_shift_data_T_2 = cat(rx_shift_data, miso_r) @[Cat.scala 33:92]
        rx_shift_data <= _rx_shift_data_T_2 @[spi.scala 212:23]
    node _T_20 = eq(p_status, UInt<3>("h3")) @[spi.scala 217:20]
    node _T_21 = neq(n_status, UInt<3>("h3")) @[spi.scala 217:47]
    node _T_22 = and(_T_20, _T_21) @[spi.scala 217:34]
    when _T_22 : @[spi.scala 217:62]
      rx_latch_flag <= UInt<1>("h1") @[spi.scala 218:21]
    else :
      when rx_latch_flag : @[spi.scala 219:33]
        rx_latch_flag <= UInt<1>("h0") @[spi.scala 220:21]
    node _T_23 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 223:20]
    node _T_24 = eq(n_status, UInt<3>("h0")) @[spi.scala 223:49]
    node _T_25 = or(_T_23, _T_24) @[spi.scala 223:36]
    when _T_25 : @[spi.scala 223:63]
      clock_cnt <= UInt<1>("h0") @[spi.scala 224:17]
    else :
      node _clock_cnt_T = add(clock_cnt, UInt<1>("h1")) @[spi.scala 226:30]
      node _clock_cnt_T_1 = tail(_clock_cnt_T, 1) @[spi.scala 226:30]
      clock_cnt <= _clock_cnt_T_1 @[spi.scala 226:17]
    c_status <= n_status @[spi.scala 229:13]
    p_status <= n_status @[spi.scala 230:13]
    node _ACTUAL_MAX_T = eq(UInt<1>("h0"), UInt<1>("h0")) @[spi.scala 232:52]
    node _ACTUAL_MAX_T_1 = mux(_ACTUAL_MAX_T, UInt<6>("h7"), UInt<6>("h8")) @[spi.scala 232:33]
    wire ACTUAL_MAX : UInt
    ACTUAL_MAX <= _ACTUAL_MAX_T_1
    node _T_26 = eq(c_status, UInt<3>("h0")) @[spi.scala 234:19]
    when _T_26 : @[spi.scala 234:32]
      when pending_data : @[spi.scala 235:26]
        n_status <= UInt<3>("h1") @[spi.scala 236:18]
      else :
        n_status <= UInt<3>("h0") @[spi.scala 238:18]
    else :
      node _T_27 = eq(c_status, UInt<3>("h1")) @[spi.scala 240:27]
      when _T_27 : @[spi.scala 240:40]
        node _T_28 = eq(UInt<2>("h2"), UInt<1>("h0")) @[spi.scala 241:25]
        when _T_28 : @[spi.scala 241:34]
          n_status <= UInt<3>("h3") @[spi.scala 242:18]
        else :
          n_status <= UInt<3>("h2") @[spi.scala 244:18]
      else :
        node _T_29 = eq(c_status, UInt<3>("h2")) @[spi.scala 246:27]
        when _T_29 : @[spi.scala 246:40]
          node _T_30 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 247:23]
          node _T_31 = eq(data_cnt, UInt<1>("h1")) @[spi.scala 247:53]
          node _T_32 = and(_T_30, _T_31) @[spi.scala 247:40]
          when _T_32 : @[spi.scala 247:76]
            n_status <= UInt<3>("h3") @[spi.scala 248:18]
          else :
            n_status <= UInt<3>("h2") @[spi.scala 250:18]
        else :
          node _T_33 = eq(c_status, UInt<3>("h3")) @[spi.scala 252:27]
          when _T_33 : @[spi.scala 252:41]
            node _T_34 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 253:23]
            node _T_35 = eq(data_cnt, ACTUAL_MAX) @[spi.scala 253:53]
            node _T_36 = and(_T_34, _T_35) @[spi.scala 253:40]
            node _T_37 = neq(sclk_r, UInt<1>("h0")) @[spi.scala 253:80]
            node _T_38 = and(_T_36, _T_37) @[spi.scala 253:69]
            when _T_38 : @[spi.scala 253:105]
              n_status <= UInt<3>("h4") @[spi.scala 254:18]
            else :
              n_status <= UInt<3>("h3") @[spi.scala 256:18]
          else :
            node _T_39 = eq(c_status, UInt<3>("h4")) @[spi.scala 258:27]
            when _T_39 : @[spi.scala 258:46]
              node _T_40 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 259:22]
              when _T_40 : @[spi.scala 259:39]
                when UInt<1>("h1") : @[spi.scala 260:40]
                  n_status <= UInt<3>("h5") @[spi.scala 261:20]
                else :
                  n_status <= UInt<3>("h0") @[spi.scala 263:20]
            else :
              node _T_41 = eq(c_status, UInt<3>("h5")) @[spi.scala 266:27]
              when _T_41 : @[spi.scala 266:44]
                node _T_42 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 267:23]
                node _T_43 = eq(data_cnt, UInt<2>("h2")) @[spi.scala 267:53]
                node _T_44 = and(_T_42, _T_43) @[spi.scala 267:40]
                when _T_44 : @[spi.scala 267:77]
                  n_status <= UInt<3>("h0") @[spi.scala 268:18]
                else :
                  n_status <= UInt<3>("h5") @[spi.scala 270:18]
              else :
                n_status <= UInt<3>("h0") @[spi.scala 273:16]
    node _T_45 = eq(c_status, UInt<3>("h2")) @[spi.scala 276:19]
    node _T_46 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 276:46]
    node _T_47 = and(_T_45, _T_46) @[spi.scala 276:32]
    node _T_48 = eq(data_cnt, UInt<1>("h1")) @[spi.scala 276:76]
    node _T_49 = and(_T_47, _T_48) @[spi.scala 276:63]
    when _T_49 : @[spi.scala 276:99]
      data_cnt <= UInt<1>("h0") @[spi.scala 277:16]
    else :
      node _T_50 = eq(c_status, UInt<3>("h3")) @[spi.scala 278:28]
      node _T_51 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 278:56]
      node _T_52 = and(_T_50, _T_51) @[spi.scala 278:42]
      node _T_53 = eq(data_cnt, ACTUAL_MAX) @[spi.scala 278:86]
      node _T_54 = and(_T_52, _T_53) @[spi.scala 278:73]
      node _T_55 = neq(UInt<1>("h0"), sclk_r) @[spi.scala 278:125]
      node _T_56 = and(_T_54, _T_55) @[spi.scala 278:102]
      when _T_56 : @[spi.scala 278:138]
        data_cnt <= UInt<1>("h0") @[spi.scala 279:16]
      else :
        node _T_57 = eq(c_status, UInt<3>("h5")) @[spi.scala 280:28]
        node _T_58 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 280:59]
        node _T_59 = and(_T_57, _T_58) @[spi.scala 280:45]
        node _T_60 = eq(data_cnt, UInt<2>("h2")) @[spi.scala 280:89]
        node _T_61 = and(_T_59, _T_60) @[spi.scala 280:76]
        when _T_61 : @[spi.scala 280:113]
          data_cnt <= UInt<1>("h0") @[spi.scala 281:16]
        else :
          node _T_62 = eq(c_status, UInt<3>("h2")) @[spi.scala 282:29]
          node _T_63 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 282:56]
          node _T_64 = and(_T_62, _T_63) @[spi.scala 282:42]
          node _T_65 = eq(c_status, UInt<3>("h3")) @[spi.scala 282:88]
          node _T_66 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 282:116]
          node _T_67 = and(_T_65, _T_66) @[spi.scala 282:102]
          node _T_68 = neq(UInt<1>("h0"), UInt<1>("h0")) @[spi.scala 282:152]
          node _T_69 = neq(_T_68, sclk_r) @[spi.scala 282:161]
          node _T_70 = and(_T_67, _T_69) @[spi.scala 282:133]
          node _T_71 = or(_T_64, _T_70) @[spi.scala 282:74]
          node _T_72 = eq(c_status, UInt<3>("h5")) @[spi.scala 282:188]
          node _T_73 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 282:219]
          node _T_74 = and(_T_72, _T_73) @[spi.scala 282:205]
          node _T_75 = or(_T_71, _T_74) @[spi.scala 282:174]
          when _T_75 : @[spi.scala 282:238]
            node _data_cnt_T = add(data_cnt, UInt<1>("h1")) @[spi.scala 283:28]
            node _data_cnt_T_1 = tail(_data_cnt_T, 1) @[spi.scala 283:28]
            data_cnt <= _data_cnt_T_1 @[spi.scala 283:16]
    reg wait_one_tick_done : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[spi.scala 286:37]
    node _T_76 = eq(UInt<1>("h0"), UInt<1>("h0")) @[spi.scala 288:25]
    when _T_76 : @[spi.scala 288:47]
      wait_one_tick_done <= UInt<1>("h1") @[spi.scala 289:26]
    else :
      node _T_77 = eq(c_status, UInt<3>("h3")) @[spi.scala 290:28]
      node _T_78 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 290:56]
      node _T_79 = and(_T_77, _T_78) @[spi.scala 290:42]
      node _T_80 = eq(data_cnt, UInt<1>("h1")) @[spi.scala 290:86]
      node _T_81 = and(_T_79, _T_80) @[spi.scala 290:73]
      when _T_81 : @[spi.scala 290:96]
        wait_one_tick_done <= UInt<1>("h1") @[spi.scala 291:26]
      else :
        node _T_82 = eq(data_cnt, UInt<1>("h0")) @[spi.scala 292:27]
        when _T_82 : @[spi.scala 292:36]
          wait_one_tick_done <= UInt<1>("h0") @[spi.scala 293:26]
    node _T_83 = eq(c_status, UInt<3>("h2")) @[spi.scala 297:22]
    when _T_83 : @[spi.scala 297:37]
      node _mosi_r_T = bits(reg_txdata, 0, 0) @[spi.scala 298:57]
      node _mosi_r_T_1 = bits(reg_txdata, 7, 7) @[spi.scala 298:72]
      node _mosi_r_T_2 = mux(UInt<1>("h0"), _mosi_r_T, _mosi_r_T_1) @[spi.scala 298:20]
      mosi_r <= _mosi_r_T_2 @[spi.scala 298:14]
      node _tx_shift_data_T = bits(reg_txdata, 7, 1) @[spi.scala 299:81]
      node _tx_shift_data_T_1 = cat(UInt<1>("h0"), _tx_shift_data_T) @[Cat.scala 33:92]
      node _tx_shift_data_T_2 = cat(reg_txdata, UInt<1>("h0")) @[Cat.scala 33:92]
      node _tx_shift_data_T_3 = mux(UInt<1>("h0"), _tx_shift_data_T_1, _tx_shift_data_T_2) @[spi.scala 299:27]
      tx_shift_data <= _tx_shift_data_T_3 @[spi.scala 299:21]
    else :
      node _T_84 = eq(c_status, UInt<3>("h3")) @[spi.scala 300:28]
      node _T_85 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 300:56]
      node _T_86 = and(_T_84, _T_85) @[spi.scala 300:42]
      node _T_87 = xor(UInt<1>("h0"), sclk_r) @[spi.scala 300:93]
      node _T_88 = neq(_T_87, UInt<1>("h0")) @[spi.scala 300:104]
      node _T_89 = and(_T_86, _T_88) @[spi.scala 300:73]
      when _T_89 : @[spi.scala 300:114]
        when wait_one_tick_done : @[spi.scala 301:32]
          node _mosi_r_T_3 = bits(tx_shift_data, 0, 0) @[spi.scala 302:62]
          node _mosi_r_T_4 = bits(tx_shift_data, 7, 7) @[spi.scala 302:80]
          node _mosi_r_T_5 = mux(UInt<1>("h0"), _mosi_r_T_3, _mosi_r_T_4) @[spi.scala 302:22]
          mosi_r <= _mosi_r_T_5 @[spi.scala 302:16]
          node _tx_shift_data_T_4 = bits(tx_shift_data, 7, 1) @[spi.scala 303:86]
          node _tx_shift_data_T_5 = cat(UInt<1>("h0"), _tx_shift_data_T_4) @[Cat.scala 33:92]
          node _tx_shift_data_T_6 = cat(tx_shift_data, UInt<1>("h0")) @[Cat.scala 33:92]
          node _tx_shift_data_T_7 = mux(UInt<1>("h0"), _tx_shift_data_T_5, _tx_shift_data_T_6) @[spi.scala 303:29]
          tx_shift_data <= _tx_shift_data_T_7 @[spi.scala 303:23]
    io.spi_mosi <= mosi_r @[spi.scala 306:15]
    node _T_90 = eq(n_status, UInt<3>("h3")) @[spi.scala 308:21]
    when _T_90 : @[spi.scala 308:36]
      bit_trdy <= UInt<1>("h1") @[spi.scala 309:16]
    else :
      node _T_91 = and(wr_en, sel_reg_tx) @[spi.scala 310:24]
      when _T_91 : @[spi.scala 310:39]
        bit_trdy <= UInt<1>("h0") @[spi.scala 311:16]
    node _T_92 = eq(bit_trdy, UInt<1>("h0")) @[spi.scala 314:12]
    node _T_93 = and(_T_92, wr_en) @[spi.scala 314:22]
    node _T_94 = and(_T_93, sel_reg_tx) @[spi.scala 314:31]
    when _T_94 : @[spi.scala 314:46]
      bit_toe <= UInt<1>("h1") @[spi.scala 315:15]
    else :
      node _T_95 = and(wr_en, sel_reg_status) @[spi.scala 316:24]
      when _T_95 : @[spi.scala 316:43]
        bit_toe <= UInt<1>("h0") @[spi.scala 317:15]
    node _T_96 = eq(c_status, UInt<3>("h4")) @[spi.scala 320:21]
    node _T_97 = eq(clock_cnt, UInt<2>("h3")) @[spi.scala 320:54]
    node _T_98 = and(_T_96, _T_97) @[spi.scala 320:40]
    when _T_98 : @[spi.scala 320:72]
      when bit_rrdy : @[spi.scala 321:22]
        bit_roe <= UInt<1>("h1") @[spi.scala 322:17]
      else :
        bit_rrdy <= UInt<1>("h1") @[spi.scala 324:18]
    else :
      node _T_99 = and(rd_en, sel_reg_rx) @[spi.scala 326:24]
      when _T_99 : @[spi.scala 326:39]
        bit_rrdy <= UInt<1>("h0") @[spi.scala 327:16]
        bit_roe <= UInt<1>("h0") @[spi.scala 328:15]
    node _T_100 = neq(c_status, UInt<3>("h0")) @[spi.scala 331:21]
    node _T_101 = or(_T_100, pending_data) @[spi.scala 331:34]
    when _T_101 : @[spi.scala 331:51]
      bit_tmt <= UInt<1>("h0") @[spi.scala 332:15]
    else :
      bit_tmt <= UInt<1>("h1") @[spi.scala 334:15]

  module Interlink_Module :
    input clock : Clock
    input reset : Reset
    output io : { flip bus_adr_i : UInt<32>, flip bus_sel_i : UInt<4>, flip bus_we_i : UInt<1>, flip bus_cyc_i : UInt<1>, flip bus_stb_i : UInt<1>, bus_ack_o : UInt<1>, bus_dat_o : UInt<32>, tmr_val_we : UInt<1>, flip tmr_val_do : UInt<32>, tmr_dat_we : UInt<1>, flip tmr_dat_do : UInt<32>, tmr_duty_we : UInt<1>, flip tmr_duty_do : UInt<32>, tmr_cfg_we : UInt<1>, flip tmr_cfg_do : UInt<32>, tmr_step_we : UInt<1>, flip tmr_step_do : UInt<32>, qei_count_we : UInt<1>, flip qei_count_do : UInt<32>, qei_cfg_we : UInt<1>, flip qei_cfg_do : UInt<32>, flip qei_speed_do : SInt<16>, pid_kp_we : UInt<1>, flip pid_kp_do : SInt<16>, pid_ki_we : UInt<1>, flip pid_ki_do : SInt<16>, pid_kd_we : UInt<1>, flip pid_kd_do : SInt<16>, pid_ref_we : UInt<1>, flip pid_ref_do : SInt<16>, pid_fb_we : UInt<1>, flip pid_fb_do : SInt<16>, pid_cfg_we : UInt<1>, flip pid_cfg_do : SInt<16>, flip motor_select : UInt<1>}

    node _bus_valid_T = and(io.bus_stb_i, io.bus_cyc_i) @[interlink.scala 92:53]
    wire bus_valid : UInt<1>
    bus_valid <= _bus_valid_T
    wire tmr_cfg_do : UInt<32> @[interlink.scala 95:27]
    wire tmr_step_do : UInt<32> @[interlink.scala 96:27]
    wire tmr_val_do : UInt<32> @[interlink.scala 97:27]
    wire tmr_dat_do : UInt<32> @[interlink.scala 98:27]
    wire tmr_duty_do : UInt<32> @[interlink.scala 99:27]
    node reg_offset = bits(io.bus_adr_i, 11, 0) @[interlink.scala 102:35]
    node _tmr_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 104:50]
    node _tmr_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h0")) @[interlink.scala 104:81]
    node _tmr_cfg_sel_T_2 = and(_tmr_cfg_sel_T, _tmr_cfg_sel_T_1) @[interlink.scala 104:66]
    wire tmr_cfg_sel : UInt<1>
    tmr_cfg_sel <= _tmr_cfg_sel_T_2
    node _tmr_val_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 105:50]
    node _tmr_val_sel_T_1 = eq(reg_offset, UInt<12>("h4")) @[interlink.scala 105:81]
    node _tmr_val_sel_T_2 = and(_tmr_val_sel_T, _tmr_val_sel_T_1) @[interlink.scala 105:66]
    wire tmr_val_sel : UInt<1>
    tmr_val_sel <= _tmr_val_sel_T_2
    node _tmr_dat_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 106:50]
    node _tmr_dat_sel_T_1 = eq(reg_offset, UInt<12>("h8")) @[interlink.scala 106:81]
    node _tmr_dat_sel_T_2 = and(_tmr_dat_sel_T, _tmr_dat_sel_T_1) @[interlink.scala 106:66]
    wire tmr_dat_sel : UInt<1>
    tmr_dat_sel <= _tmr_dat_sel_T_2
    node _tmr_duty_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 107:50]
    node _tmr_duty_sel_T_1 = eq(reg_offset, UInt<12>("hc")) @[interlink.scala 107:81]
    node _tmr_duty_sel_T_2 = and(_tmr_duty_sel_T, _tmr_duty_sel_T_1) @[interlink.scala 107:66]
    wire tmr_duty_sel : UInt<1>
    tmr_duty_sel <= _tmr_duty_sel_T_2
    node _tmr_step_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 108:50]
    node _tmr_step_sel_T_1 = eq(reg_offset, UInt<12>("h10")) @[interlink.scala 108:81]
    node _tmr_step_sel_T_2 = and(_tmr_step_sel_T, _tmr_step_sel_T_1) @[interlink.scala 108:66]
    wire tmr_step_sel : UInt<1>
    tmr_step_sel <= _tmr_step_sel_T_2
    node _tmr_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 110:72]
    node _tmr_cfg_we_T_1 = and(_tmr_cfg_we_T, io.bus_we_i) @[interlink.scala 110:76]
    node _tmr_cfg_we_T_2 = mux(tmr_cfg_sel, _tmr_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 110:43]
    wire tmr_cfg_we : UInt<1>
    tmr_cfg_we <= _tmr_cfg_we_T_2
    node _tmr_val_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 111:72]
    node _tmr_val_we_T_1 = and(_tmr_val_we_T, io.bus_we_i) @[interlink.scala 111:76]
    node _tmr_val_we_T_2 = mux(tmr_val_sel, _tmr_val_we_T_1, UInt<1>("h0")) @[interlink.scala 111:43]
    wire tmr_val_we : UInt<1>
    tmr_val_we <= _tmr_val_we_T_2
    node _tmr_dat_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 112:72]
    node _tmr_dat_we_T_1 = and(_tmr_dat_we_T, io.bus_we_i) @[interlink.scala 112:76]
    node _tmr_dat_we_T_2 = mux(tmr_dat_sel, _tmr_dat_we_T_1, UInt<1>("h0")) @[interlink.scala 112:43]
    wire tmr_dat_we : UInt<1>
    tmr_dat_we <= _tmr_dat_we_T_2
    node _tmr_duty_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 113:73]
    node _tmr_duty_we_T_1 = and(_tmr_duty_we_T, io.bus_we_i) @[interlink.scala 113:77]
    node _tmr_duty_we_T_2 = mux(tmr_duty_sel, _tmr_duty_we_T_1, UInt<1>("h0")) @[interlink.scala 113:43]
    wire tmr_duty_we : UInt<1>
    tmr_duty_we <= _tmr_duty_we_T_2
    node _tmr_step_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 114:73]
    node _tmr_step_we_T_1 = and(_tmr_step_we_T, io.bus_we_i) @[interlink.scala 114:77]
    node _tmr_step_we_T_2 = mux(tmr_step_sel, _tmr_step_we_T_1, UInt<1>("h0")) @[interlink.scala 114:43]
    wire tmr_step_we : UInt<1>
    tmr_step_we <= _tmr_step_we_T_2
    node _reg_dat_re_T = neq(io.bus_sel_i, UInt<1>("h0")) @[interlink.scala 116:71]
    node _reg_dat_re_T_1 = eq(_reg_dat_re_T, UInt<1>("h0")) @[interlink.scala 116:56]
    node _reg_dat_re_T_2 = and(tmr_dat_sel, _reg_dat_re_T_1) @[interlink.scala 116:52]
    node _reg_dat_re_T_3 = not(io.bus_we_i) @[interlink.scala 116:84]
    node _reg_dat_re_T_4 = and(_reg_dat_re_T_2, _reg_dat_re_T_3) @[interlink.scala 116:80]
    wire reg_dat_re : UInt<1>
    reg_dat_re <= _reg_dat_re_T_4
    node _tmr_sel_T = or(tmr_cfg_sel, tmr_val_sel) @[interlink.scala 118:35]
    node _tmr_sel_T_1 = or(_tmr_sel_T, tmr_dat_sel) @[interlink.scala 118:50]
    node _tmr_sel_T_2 = or(_tmr_sel_T_1, tmr_duty_sel) @[interlink.scala 118:65]
    node tmr_sel = or(_tmr_sel_T_2, tmr_step_sel) @[interlink.scala 118:81]
    node _tmr_do_T = mux(tmr_step_sel, tmr_step_do, tmr_dat_do) @[interlink.scala 120:57]
    node _tmr_do_T_1 = mux(tmr_duty_sel, tmr_duty_do, _tmr_do_T) @[interlink.scala 120:26]
    node _tmr_do_T_2 = mux(tmr_val_sel, tmr_val_do, _tmr_do_T_1) @[interlink.scala 119:57]
    node tmr_do = mux(tmr_cfg_sel, tmr_cfg_do, _tmr_do_T_2) @[interlink.scala 119:26]
    wire qei_count_do : UInt<32> @[interlink.scala 123:27]
    node _qei_count_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 124:50]
    node _qei_count_sel_T_1 = eq(reg_offset, UInt<12>("h100")) @[interlink.scala 124:81]
    node _qei_count_sel_T_2 = and(_qei_count_sel_T, _qei_count_sel_T_1) @[interlink.scala 124:66]
    wire qei_count_sel : UInt<1>
    qei_count_sel <= _qei_count_sel_T_2
    node _qei_count_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 125:74]
    node _qei_count_we_T_1 = and(_qei_count_we_T, io.bus_we_i) @[interlink.scala 125:78]
    node _qei_count_we_T_2 = mux(qei_count_sel, _qei_count_we_T_1, UInt<1>("h0")) @[interlink.scala 125:43]
    wire qei_count_we : UInt<1>
    qei_count_we <= _qei_count_we_T_2
    wire qei_cfg_do : UInt<32> @[interlink.scala 127:27]
    node _qei_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 128:50]
    node _qei_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h108")) @[interlink.scala 128:81]
    node _qei_cfg_sel_T_2 = and(_qei_cfg_sel_T, _qei_cfg_sel_T_1) @[interlink.scala 128:66]
    wire qei_cfg_sel : UInt<1>
    qei_cfg_sel <= _qei_cfg_sel_T_2
    node _qei_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 129:72]
    node _qei_cfg_we_T_1 = and(_qei_cfg_we_T, io.bus_we_i) @[interlink.scala 129:76]
    node _qei_cfg_we_T_2 = mux(qei_cfg_sel, _qei_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 129:43]
    wire qei_cfg_we : UInt<1>
    qei_cfg_we <= _qei_cfg_we_T_2
    wire qei_speed_do : UInt<32> @[interlink.scala 131:27]
    node _qei_speed_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 132:50]
    node _qei_speed_sel_T_1 = eq(reg_offset, UInt<12>("h104")) @[interlink.scala 132:81]
    node _qei_speed_sel_T_2 = and(_qei_speed_sel_T, _qei_speed_sel_T_1) @[interlink.scala 132:66]
    wire qei_speed_sel : UInt<1>
    qei_speed_sel <= _qei_speed_sel_T_2
    node _qei_speed_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 133:74]
    node _qei_speed_we_T_1 = and(_qei_speed_we_T, io.bus_we_i) @[interlink.scala 133:78]
    node _qei_speed_we_T_2 = mux(qei_speed_sel, _qei_speed_we_T_1, UInt<1>("h0")) @[interlink.scala 133:43]
    wire qei_speed_we : UInt<1>
    qei_speed_we <= _qei_speed_we_T_2
    node _qei_sel_T = or(qei_count_sel, qei_cfg_sel) @[interlink.scala 136:37]
    node qei_sel = or(_qei_sel_T, qei_speed_sel) @[interlink.scala 136:52]
    node _qei_do_T = mux(qei_cfg_sel, qei_cfg_do, qei_count_do) @[interlink.scala 137:59]
    node qei_do = mux(qei_speed_sel, qei_speed_do, _qei_do_T) @[interlink.scala 137:26]
    wire pid_kp_do : SInt<16> @[interlink.scala 140:27]
    node _pid_kp_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 141:50]
    node _pid_kp_sel_T_1 = eq(reg_offset, UInt<12>("h200")) @[interlink.scala 141:81]
    node _pid_kp_sel_T_2 = and(_pid_kp_sel_T, _pid_kp_sel_T_1) @[interlink.scala 141:66]
    wire pid_kp_sel : UInt<1>
    pid_kp_sel <= _pid_kp_sel_T_2
    node _pid_kp_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 142:71]
    node _pid_kp_we_T_1 = and(_pid_kp_we_T, io.bus_we_i) @[interlink.scala 142:75]
    node _pid_kp_we_T_2 = mux(pid_kp_sel, _pid_kp_we_T_1, UInt<1>("h0")) @[interlink.scala 142:43]
    wire pid_kp_we : UInt<1>
    pid_kp_we <= _pid_kp_we_T_2
    wire pid_ki_do : SInt<16> @[interlink.scala 144:27]
    node _pid_ki_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 145:50]
    node _pid_ki_sel_T_1 = eq(reg_offset, UInt<12>("h204")) @[interlink.scala 145:81]
    node _pid_ki_sel_T_2 = and(_pid_ki_sel_T, _pid_ki_sel_T_1) @[interlink.scala 145:66]
    wire pid_ki_sel : UInt<1>
    pid_ki_sel <= _pid_ki_sel_T_2
    node _pid_ki_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 146:71]
    node _pid_ki_we_T_1 = and(_pid_ki_we_T, io.bus_we_i) @[interlink.scala 146:75]
    node _pid_ki_we_T_2 = mux(pid_ki_sel, _pid_ki_we_T_1, UInt<1>("h0")) @[interlink.scala 146:43]
    wire pid_ki_we : UInt<1>
    pid_ki_we <= _pid_ki_we_T_2
    wire pid_kd_do : SInt<16> @[interlink.scala 148:27]
    node _pid_kd_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 149:50]
    node _pid_kd_sel_T_1 = eq(reg_offset, UInt<12>("h208")) @[interlink.scala 149:81]
    node _pid_kd_sel_T_2 = and(_pid_kd_sel_T, _pid_kd_sel_T_1) @[interlink.scala 149:66]
    wire pid_kd_sel : UInt<1>
    pid_kd_sel <= _pid_kd_sel_T_2
    node _pid_kd_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 150:71]
    node _pid_kd_we_T_1 = and(_pid_kd_we_T, io.bus_we_i) @[interlink.scala 150:75]
    node _pid_kd_we_T_2 = mux(pid_kd_sel, _pid_kd_we_T_1, UInt<1>("h0")) @[interlink.scala 150:43]
    wire pid_kd_we : UInt<1>
    pid_kd_we <= _pid_kd_we_T_2
    wire pid_ref_do : SInt<16> @[interlink.scala 152:27]
    node _pid_ref_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 153:50]
    node _pid_ref_sel_T_1 = eq(reg_offset, UInt<12>("h20c")) @[interlink.scala 153:81]
    node _pid_ref_sel_T_2 = and(_pid_ref_sel_T, _pid_ref_sel_T_1) @[interlink.scala 153:66]
    wire pid_ref_sel : UInt<1>
    pid_ref_sel <= _pid_ref_sel_T_2
    node _pid_ref_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 154:72]
    node _pid_ref_we_T_1 = and(_pid_ref_we_T, io.bus_we_i) @[interlink.scala 154:76]
    node _pid_ref_we_T_2 = mux(pid_ref_sel, _pid_ref_we_T_1, UInt<1>("h0")) @[interlink.scala 154:43]
    wire pid_ref_we : UInt<1>
    pid_ref_we <= _pid_ref_we_T_2
    wire pid_fb_do : SInt<16> @[interlink.scala 156:27]
    node _pid_fb_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 157:50]
    node _pid_fb_sel_T_1 = eq(reg_offset, UInt<12>("h210")) @[interlink.scala 157:81]
    node _pid_fb_sel_T_2 = and(_pid_fb_sel_T, _pid_fb_sel_T_1) @[interlink.scala 157:66]
    wire pid_fb_sel : UInt<1>
    pid_fb_sel <= _pid_fb_sel_T_2
    node _pid_fb_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 158:71]
    node _pid_fb_we_T_1 = and(_pid_fb_we_T, io.bus_we_i) @[interlink.scala 158:75]
    node _pid_fb_we_T_2 = mux(pid_fb_sel, _pid_fb_we_T_1, UInt<1>("h0")) @[interlink.scala 158:43]
    wire pid_fb_we : UInt<1>
    pid_fb_we <= _pid_fb_we_T_2
    wire pid_cfg_do : SInt<16> @[interlink.scala 160:27]
    node _pid_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 161:50]
    node _pid_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h214")) @[interlink.scala 161:81]
    node _pid_cfg_sel_T_2 = and(_pid_cfg_sel_T, _pid_cfg_sel_T_1) @[interlink.scala 161:66]
    wire pid_cfg_sel : UInt<1>
    pid_cfg_sel <= _pid_cfg_sel_T_2
    node _pid_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 162:72]
    node _pid_cfg_we_T_1 = and(_pid_cfg_we_T, io.bus_we_i) @[interlink.scala 162:76]
    node _pid_cfg_we_T_2 = mux(pid_cfg_sel, _pid_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 162:43]
    wire pid_cfg_we : UInt<1>
    pid_cfg_we <= _pid_cfg_we_T_2
    node _pid_sel_T = or(pid_kp_sel, pid_ki_sel) @[interlink.scala 164:34]
    node _pid_sel_T_1 = or(_pid_sel_T, pid_kd_sel) @[interlink.scala 164:48]
    node _pid_sel_T_2 = or(_pid_sel_T_1, pid_ref_sel) @[interlink.scala 164:62]
    node _pid_sel_T_3 = or(_pid_sel_T_2, pid_fb_sel) @[interlink.scala 164:77]
    node pid_sel = or(_pid_sel_T_3, pid_cfg_sel) @[interlink.scala 164:91]
    node _pid_do_T = mux(pid_fb_sel, pid_fb_do, pid_cfg_do) @[interlink.scala 168:46]
    node _pid_do_T_1 = mux(pid_ref_sel, pid_ref_do, _pid_do_T) @[interlink.scala 167:46]
    node _pid_do_T_2 = mux(pid_kd_sel, pid_kd_do, _pid_do_T_1) @[interlink.scala 166:46]
    node _pid_do_T_3 = mux(pid_ki_sel, pid_ki_do, _pid_do_T_2) @[interlink.scala 165:53]
    node pid_do = mux(pid_kp_sel, pid_kp_do, _pid_do_T_3) @[interlink.scala 165:26]
    reg wb_ack_o : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[interlink.scala 171:30]
    reg wb_data_o : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[interlink.scala 172:30]
    node _wb_data_o_T = asUInt(pid_do) @[interlink.scala 173:92]
    node _wb_data_o_T_1 = mux(pid_sel, _wb_data_o_T, UInt<1>("h0")) @[interlink.scala 173:69]
    node _wb_data_o_T_2 = mux(qei_sel, qei_do, _wb_data_o_T_1) @[interlink.scala 173:48]
    node _wb_data_o_T_3 = mux(tmr_sel, tmr_do, _wb_data_o_T_2) @[interlink.scala 173:27]
    wb_data_o <= _wb_data_o_T_3 @[interlink.scala 173:21]
    node _wb_ack_o_T = or(tmr_sel, qei_sel) @[interlink.scala 174:32]
    node _wb_ack_o_T_1 = or(_wb_ack_o_T, pid_sel) @[interlink.scala 174:43]
    wb_ack_o <= _wb_ack_o_T_1 @[interlink.scala 174:21]
    io.bus_dat_o <= wb_data_o @[interlink.scala 176:21]
    io.bus_ack_o <= wb_ack_o @[interlink.scala 177:21]
    io.tmr_val_we <= tmr_val_we @[interlink.scala 180:21]
    tmr_val_do <= io.tmr_val_do @[interlink.scala 181:21]
    io.tmr_dat_we <= tmr_dat_we @[interlink.scala 182:21]
    tmr_dat_do <= io.tmr_dat_do @[interlink.scala 183:21]
    io.tmr_duty_we <= tmr_duty_we @[interlink.scala 184:21]
    tmr_duty_do <= io.tmr_duty_do @[interlink.scala 185:21]
    io.tmr_cfg_we <= tmr_cfg_we @[interlink.scala 186:21]
    tmr_cfg_do <= io.tmr_cfg_do @[interlink.scala 187:21]
    io.tmr_step_we <= tmr_step_we @[interlink.scala 188:21]
    tmr_step_do <= io.tmr_step_do @[interlink.scala 189:21]
    io.qei_count_we <= qei_count_we @[interlink.scala 191:21]
    qei_count_do <= io.qei_count_do @[interlink.scala 192:21]
    io.qei_cfg_we <= qei_cfg_we @[interlink.scala 193:21]
    qei_cfg_do <= io.qei_cfg_do @[interlink.scala 194:21]
    node _qei_speed_do_T = asUInt(io.qei_speed_do) @[interlink.scala 195:46]
    qei_speed_do <= _qei_speed_do_T @[interlink.scala 195:21]
    io.pid_kp_we <= pid_kp_we @[interlink.scala 197:21]
    pid_kp_do <= io.pid_kp_do @[interlink.scala 198:21]
    io.pid_ki_we <= pid_ki_we @[interlink.scala 199:21]
    pid_ki_do <= io.pid_ki_do @[interlink.scala 200:21]
    io.pid_kd_we <= pid_kd_we @[interlink.scala 201:21]
    pid_kd_do <= io.pid_kd_do @[interlink.scala 202:21]
    io.pid_ref_we <= pid_ref_we @[interlink.scala 203:21]
    pid_ref_do <= io.pid_ref_do @[interlink.scala 204:21]
    io.pid_fb_we <= pid_fb_we @[interlink.scala 205:21]
    pid_fb_do <= io.pid_fb_do @[interlink.scala 206:21]
    io.pid_cfg_we <= pid_cfg_we @[interlink.scala 207:21]
    pid_cfg_do <= io.pid_cfg_do @[interlink.scala 208:21]

  module PWM :
    input clock : Clock
    input reset : Reset
    output io : { flip reg_val_we : UInt<1>, flip reg_val_di : UInt<32>, reg_val_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, flip reg_dat_we : UInt<1>, flip reg_dat_di : UInt<32>, reg_dat_do : UInt<32>, flip reg_duty_we : UInt<1>, flip reg_duty_di : UInt<32>, reg_duty_do : UInt<32>, flip reg_step_we : UInt<1>, flip reg_step_di : UInt<32>, reg_step_do : UInt<32>, flip reg_pid_out : SInt<16>, pwm_h : UInt<1>, pwm_l : UInt<1>, irq_out : UInt<1>, rawirq_out : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>}

    reg value_cur : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 51:32]
    reg value_reload : UInt<32>, clock with :
      reset => (reset, UInt<8>("hff")) @[pwm.scala 52:32]
    reg pwm_duty : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 53:32]
    reg reg_duty : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 54:32]
    wire value_cur_plus : UInt<32> @[pwm.scala 56:29]
    wire value_cur_minus : UInt<32> @[pwm.scala 57:29]
    wire loc_enable : UInt<1> @[pwm.scala 59:29]
    reg enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 60:32]
    reg stop_out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 62:32]
    reg irq_out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 63:32]
    reg lastenable : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastenable) @[pwm.scala 66:28]
    reg updown : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 69:32]
    reg irq_ena : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 72:32]
    reg pid_out_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 75:32]
    reg pwm_db : UInt<4>, clock with :
      reset => (reset, UInt<2>("h2")) @[pwm.scala 78:32]
    reg step1step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 81:32]
    reg step1dir : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 82:32]
    reg step2step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 83:32]
    reg step2dir : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 84:32]
    io.reg_duty_do <= pwm_duty @[pwm.scala 87:23]
    when io.reg_duty_we : @[pwm.scala 88:24]
      reg_duty <= io.reg_duty_di @[pwm.scala 89:14]
    node io_reg_step_do_lo_hi = cat(step2dir, io.x_homed) @[Cat.scala 33:92]
    node io_reg_step_do_lo = cat(io_reg_step_do_lo_hi, io.y_homed) @[Cat.scala 33:92]
    node io_reg_step_do_hi_lo = cat(step1dir, step2step) @[Cat.scala 33:92]
    node io_reg_step_do_hi_hi = cat(UInt<26>("h0"), step1step) @[Cat.scala 33:92]
    node io_reg_step_do_hi = cat(io_reg_step_do_hi_hi, io_reg_step_do_hi_lo) @[Cat.scala 33:92]
    node _io_reg_step_do_T = cat(io_reg_step_do_hi, io_reg_step_do_lo) @[Cat.scala 33:92]
    io.reg_step_do <= _io_reg_step_do_T @[pwm.scala 92:23]
    when io.reg_step_we : @[pwm.scala 93:24]
      node _step1step_T = bits(io.reg_cfg_di, 5, 5) @[pwm.scala 94:39]
      step1step <= _step1step_T @[pwm.scala 94:23]
      node _step1dir_T = bits(io.reg_cfg_di, 4, 4) @[pwm.scala 95:39]
      step1dir <= _step1dir_T @[pwm.scala 95:23]
      node _step2step_T = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 96:39]
      step2step <= _step2step_T @[pwm.scala 96:23]
      node _step2dir_T = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 97:39]
      step2dir <= _step2dir_T @[pwm.scala 97:23]
    when stop_out : @[pwm.scala 100:18]
      when pid_out_sel : @[pwm.scala 101:22]
        node _pwm_duty_T = asUInt(io.reg_pid_out) @[pwm.scala 102:40]
        pwm_duty <= _pwm_duty_T @[pwm.scala 102:16]
      else :
        pwm_duty <= reg_duty @[pwm.scala 104:16]
    reg proc_offset : UInt<32>, clock with :
      reset => (UInt<1>("h0"), proc_offset) @[pwm.scala 108:24]
    reg pwm_ld : UInt<1>, clock with :
      reset => (UInt<1>("h0"), pwm_ld) @[pwm.scala 109:24]
    reg pwm_hd : UInt<1>, clock with :
      reset => (UInt<1>("h0"), pwm_hd) @[pwm.scala 110:24]
    node pwm_db_twice = dshl(pwm_db, UInt<1>("h1")) @[pwm.scala 113:30]
    node _proc_offset_T = geq(pwm_duty, pwm_db_twice) @[pwm.scala 115:37]
    node _proc_offset_T_1 = sub(value_reload, pwm_db_twice) @[pwm.scala 115:84]
    node _proc_offset_T_2 = tail(_proc_offset_T_1, 1) @[pwm.scala 115:84]
    node _proc_offset_T_3 = leq(pwm_duty, _proc_offset_T_2) @[pwm.scala 115:67]
    node _proc_offset_T_4 = and(_proc_offset_T, _proc_offset_T_3) @[pwm.scala 115:54]
    node _proc_offset_T_5 = lt(pwm_duty, pwm_db_twice) @[pwm.scala 116:36]
    node _proc_offset_T_6 = sub(value_reload, pwm_db_twice) @[pwm.scala 116:80]
    node _proc_offset_T_7 = tail(_proc_offset_T_6, 1) @[pwm.scala 116:80]
    node _proc_offset_T_8 = mux(_proc_offset_T_5, pwm_db_twice, _proc_offset_T_7) @[pwm.scala 116:26]
    node _proc_offset_T_9 = mux(_proc_offset_T_4, pwm_duty, _proc_offset_T_8) @[pwm.scala 115:26]
    proc_offset <= _proc_offset_T_9 @[pwm.scala 115:20]
    node _pwm_hd_T = sub(proc_offset, pwm_db) @[pwm.scala 117:48]
    node _pwm_hd_T_1 = tail(_pwm_hd_T, 1) @[pwm.scala 117:48]
    node _pwm_hd_T_2 = lt(value_cur, _pwm_hd_T_1) @[pwm.scala 117:33]
    pwm_hd <= _pwm_hd_T_2 @[pwm.scala 117:20]
    node _pwm_ld_T = gt(value_cur, proc_offset) @[pwm.scala 118:34]
    node _pwm_ld_T_1 = sub(value_reload, pwm_db) @[pwm.scala 118:79]
    node _pwm_ld_T_2 = tail(_pwm_ld_T_1, 1) @[pwm.scala 118:79]
    node _pwm_ld_T_3 = lt(value_cur, _pwm_ld_T_2) @[pwm.scala 118:63]
    node _pwm_ld_T_4 = and(_pwm_ld_T, _pwm_ld_T_3) @[pwm.scala 118:49]
    pwm_ld <= _pwm_ld_T_4 @[pwm.scala 118:20]
    node _io_pwm_h_T = and(pwm_hd, enable) @[pwm.scala 119:30]
    io.pwm_h <= _io_pwm_h_T @[pwm.scala 119:20]
    node _io_pwm_l_T = and(pwm_ld, enable) @[pwm.scala 120:30]
    io.pwm_l <= _io_pwm_l_T @[pwm.scala 120:20]
    io.irq_out <= irq_out @[pwm.scala 123:20]
    node _io_rawirq_out_T = not(irq_out) @[pwm.scala 124:34]
    node _io_rawirq_out_T_1 = and(stop_out, _io_rawirq_out_T) @[pwm.scala 124:32]
    io.rawirq_out <= _io_rawirq_out_T_1 @[pwm.scala 124:20]
    node _io_reg_cfg_do_T = bits(pwm_db, 3, 0) @[pwm.scala 127:44]
    node io_reg_cfg_do_lo_hi = cat(irq_ena, updown) @[Cat.scala 33:92]
    node io_reg_cfg_do_lo = cat(io_reg_cfg_do_lo_hi, enable) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi_hi = cat(UInt<24>("h0"), _io_reg_cfg_do_T) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi = cat(io_reg_cfg_do_hi_hi, pid_out_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T_1 = cat(io_reg_cfg_do_hi, io_reg_cfg_do_lo) @[Cat.scala 33:92]
    io.reg_cfg_do <= _io_reg_cfg_do_T_1 @[pwm.scala 127:20]
    when io.reg_cfg_we : @[pwm.scala 128:23]
      node _enable_T = bits(io.reg_cfg_di, 0, 0) @[pwm.scala 129:35]
      enable <= _enable_T @[pwm.scala 129:19]
      node _updown_T = bits(io.reg_cfg_di, 1, 1) @[pwm.scala 130:35]
      updown <= _updown_T @[pwm.scala 130:19]
      node _irq_ena_T = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 131:35]
      irq_ena <= _irq_ena_T @[pwm.scala 131:19]
      node _pid_out_sel_T = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 132:35]
      pid_out_sel <= _pid_out_sel_T @[pwm.scala 132:19]
      node _pwm_db_T = bits(io.reg_cfg_di, 7, 4) @[pwm.scala 133:36]
      node _pwm_db_T_1 = add(_pwm_db_T, UInt<2>("h2")) @[pwm.scala 133:42]
      node _pwm_db_T_2 = tail(_pwm_db_T_1, 1) @[pwm.scala 133:42]
      pwm_db <= _pwm_db_T_2 @[pwm.scala 133:19]
    io.reg_val_do <= value_reload @[pwm.scala 137:19]
    node _T = orr(io.reg_val_we) @[pwm.scala 138:25]
    when _T : @[pwm.scala 138:29]
      value_reload <= io.reg_val_di @[pwm.scala 139:19]
    io.reg_dat_do <= value_cur @[pwm.scala 143:19]
    node _value_cur_plus_T = add(value_cur, UInt<1>("h1")) @[pwm.scala 144:39]
    node _value_cur_plus_T_1 = tail(_value_cur_plus_T, 1) @[pwm.scala 144:39]
    value_cur_plus <= _value_cur_plus_T_1 @[pwm.scala 144:19]
    node _value_cur_minus_T = sub(value_cur, UInt<1>("h1")) @[pwm.scala 145:39]
    node _value_cur_minus_T_1 = tail(_value_cur_minus_T, 1) @[pwm.scala 145:39]
    value_cur_minus <= _value_cur_minus_T_1 @[pwm.scala 145:19]
    loc_enable <= enable @[pwm.scala 146:19]
    lastenable <= loc_enable @[pwm.scala 149:19]
    node _T_1 = orr(io.reg_dat_we) @[pwm.scala 150:25]
    when _T_1 : @[pwm.scala 150:29]
      value_cur <= io.reg_dat_di @[pwm.scala 151:19]
    else :
      node _T_2 = eq(loc_enable, UInt<1>("h1")) @[pwm.scala 152:27]
      when _T_2 : @[pwm.scala 152:39]
        node _irq_out_T = not(irq_out) @[pwm.scala 155:47]
        node _irq_out_T_1 = and(stop_out, _irq_out_T) @[pwm.scala 155:45]
        node _irq_out_T_2 = mux(irq_ena, _irq_out_T_1, UInt<1>("h0")) @[pwm.scala 155:23]
        irq_out <= _irq_out_T_2 @[pwm.scala 155:17]
        node _T_3 = eq(updown, UInt<1>("h1")) @[pwm.scala 157:19]
        when _T_3 : @[pwm.scala 157:31]
          node _T_4 = eq(lastenable, UInt<1>("h0")) @[pwm.scala 158:25]
          when _T_4 : @[pwm.scala 158:38]
            value_cur <= UInt<32>("h0") @[pwm.scala 159:21]
            stop_out <= UInt<1>("h0") @[pwm.scala 160:21]
          else :
            node _T_5 = eq(value_cur, value_reload) @[pwm.scala 163:33]
            when _T_5 : @[pwm.scala 163:58]
              value_cur <= UInt<32>("h0") @[pwm.scala 164:23]
              stop_out <= UInt<1>("h1") @[pwm.scala 165:23]
            else :
              value_cur <= value_cur_plus @[pwm.scala 167:23]
              stop_out <= UInt<1>("h0") @[pwm.scala 168:23]
        else :
          node _T_6 = eq(lastenable, UInt<1>("h0")) @[pwm.scala 173:25]
          when _T_6 : @[pwm.scala 173:38]
            value_cur <= value_reload @[pwm.scala 174:23]
            stop_out <= UInt<1>("h0") @[pwm.scala 175:23]
          else :
            node _T_7 = eq(value_cur, UInt<32>("h0")) @[pwm.scala 178:35]
            when _T_7 : @[pwm.scala 178:50]
              value_cur <= value_reload @[pwm.scala 179:25]
              stop_out <= UInt<1>("h1") @[pwm.scala 180:25]
            else :
              value_cur <= value_cur_minus @[pwm.scala 182:25]
              stop_out <= UInt<1>("h0") @[pwm.scala 183:25]

  module Quad_Encoder :
    input clock : Clock
    input reset : Reset
    output io : { flip quad_a : UInt<1>, flip quad_b : UInt<1>, flip raw_irq : UInt<1>, flip reg_count_we : UInt<1>, flip reg_count_di : UInt<32>, reg_count_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, reg_speed_do : SInt<16>, fb_period : UInt<1>}

    reg quad_a_delayed : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 35:33]
    reg quad_b_delayed : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 36:33]
    reg count_reg : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 37:33]
    reg count_reg_2 : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 38:33]
    reg period_count : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 39:33]
    reg speed_enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[qei.scala 41:33]
    reg count_sel_2x : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[qei.scala 42:33]
    reg count_old : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 43:33]
    reg qei_output : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 44:33]
    reg qei_speed_count : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 45:33]
    reg qei_period_count : UInt<16>, clock with :
      reset => (reset, UInt<13>("h1fff")) @[qei.scala 46:33]
    reg period_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 47:33]
    io.reg_count_do <= count_reg @[qei.scala 49:23]
    node _quad_a_delayed_T = bits(quad_a_delayed, 1, 1) @[qei.scala 51:44]
    node _quad_a_delayed_T_1 = bits(quad_a_delayed, 0, 0) @[qei.scala 51:63]
    node quad_a_delayed_hi = cat(_quad_a_delayed_T, _quad_a_delayed_T_1) @[Cat.scala 33:92]
    node _quad_a_delayed_T_2 = cat(quad_a_delayed_hi, io.quad_a) @[Cat.scala 33:92]
    quad_a_delayed <= _quad_a_delayed_T_2 @[qei.scala 51:23]
    node _quad_b_delayed_T = bits(quad_b_delayed, 1, 1) @[qei.scala 52:44]
    node _quad_b_delayed_T_1 = bits(quad_b_delayed, 0, 0) @[qei.scala 52:63]
    node quad_b_delayed_hi = cat(_quad_b_delayed_T, _quad_b_delayed_T_1) @[Cat.scala 33:92]
    node _quad_b_delayed_T_2 = cat(quad_b_delayed_hi, io.quad_b) @[Cat.scala 33:92]
    quad_b_delayed <= _quad_b_delayed_T_2 @[qei.scala 52:23]
    node _count_2x_T = bits(quad_a_delayed, 1, 1) @[qei.scala 54:57]
    node _count_2x_T_1 = bits(quad_a_delayed, 2, 2) @[qei.scala 54:75]
    node _count_2x_T_2 = xor(_count_2x_T, _count_2x_T_1) @[qei.scala 54:60]
    wire count_2x : UInt<1>
    count_2x <= _count_2x_T_2
    node _count_4x_T = bits(quad_a_delayed, 1, 1) @[qei.scala 55:57]
    node _count_4x_T_1 = bits(quad_a_delayed, 2, 2) @[qei.scala 55:75]
    node _count_4x_T_2 = xor(_count_4x_T, _count_4x_T_1) @[qei.scala 55:60]
    node _count_4x_T_3 = bits(quad_b_delayed, 1, 1) @[qei.scala 55:93]
    node _count_4x_T_4 = xor(_count_4x_T_2, _count_4x_T_3) @[qei.scala 55:78]
    node _count_4x_T_5 = bits(quad_b_delayed, 2, 2) @[qei.scala 55:111]
    node _count_4x_T_6 = xor(_count_4x_T_4, _count_4x_T_5) @[qei.scala 55:96]
    wire count_4x : UInt<1>
    count_4x <= _count_4x_T_6
    node _count_direction_T = bits(quad_a_delayed, 1, 1) @[qei.scala 56:57]
    node _count_direction_T_1 = bits(quad_b_delayed, 2, 2) @[qei.scala 56:75]
    node _count_direction_T_2 = xor(_count_direction_T, _count_direction_T_1) @[qei.scala 56:60]
    wire count_direction : UInt<1>
    count_direction <= _count_direction_T_2
    node count_pulses = mux(count_sel_2x, count_2x, count_4x) @[qei.scala 57:29]
    when count_pulses : @[qei.scala 62:22]
      when count_direction : @[qei.scala 63:27]
        node _count_reg_T = add(count_reg, UInt<1>("h1")) @[qei.scala 64:36]
        node _count_reg_T_1 = tail(_count_reg_T, 1) @[qei.scala 64:36]
        count_reg <= _count_reg_T_1 @[qei.scala 64:23]
      else :
        node _count_reg_T_2 = sub(count_reg, UInt<1>("h1")) @[qei.scala 66:36]
        node _count_reg_T_3 = tail(_count_reg_T_2, 1) @[qei.scala 66:36]
        count_reg <= _count_reg_T_3 @[qei.scala 66:23]
    node _T = or(io.raw_irq, count_pulses) @[qei.scala 71:20]
    when _T : @[qei.scala 71:37]
      when io.raw_irq : @[qei.scala 72:23]
        qei_speed_count <= count_reg_2 @[qei.scala 73:23]
        count_reg_2 <= UInt<1>("h0") @[qei.scala 74:23]
      else :
        node _count_reg_2_T = add(count_reg_2, UInt<1>("h1")) @[qei.scala 76:38]
        node _count_reg_2_T_1 = tail(_count_reg_2_T, 1) @[qei.scala 76:38]
        count_reg_2 <= _count_reg_2_T_1 @[qei.scala 76:23]
    when period_sel : @[qei.scala 81:20]
      when count_pulses : @[qei.scala 82:24]
        qei_period_count <= period_count @[qei.scala 83:24]
        period_count <= UInt<1>("h0") @[qei.scala 84:24]
      else :
        node _T_1 = eq(period_count, UInt<8>("hff")) @[qei.scala 85:29]
        when _T_1 : @[qei.scala 85:40]
          qei_period_count <= period_count @[qei.scala 86:24]
          period_count <= UInt<1>("h0") @[qei.scala 87:24]
        else :
          node _period_count_T = add(period_count, UInt<1>("h1")) @[qei.scala 89:40]
          node _period_count_T_1 = tail(_period_count_T, 1) @[qei.scala 89:40]
          period_count <= _period_count_T_1 @[qei.scala 89:24]
    node _qei_output_T = mux(period_sel, qei_period_count, qei_speed_count) @[qei.scala 94:30]
    qei_output <= _qei_output_T @[qei.scala 94:24]
    node io_reg_cfg_do_lo = cat(speed_enable, count_sel_2x) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi = cat(UInt<29>("h0"), period_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T = cat(io_reg_cfg_do_hi, io_reg_cfg_do_lo) @[Cat.scala 33:92]
    io.reg_cfg_do <= _io_reg_cfg_do_T @[qei.scala 97:24]
    node _io_reg_speed_do_T = bits(qei_output, 15, 0) @[qei.scala 100:37]
    node _io_reg_speed_do_T_1 = asSInt(_io_reg_speed_do_T) @[qei.scala 100:50]
    io.reg_speed_do <= _io_reg_speed_do_T_1 @[qei.scala 100:24]
    io.fb_period <= period_sel @[qei.scala 101:24]
    when io.reg_count_we : @[qei.scala 103:25]
      count_reg <= io.reg_count_di @[qei.scala 104:24]
    else :
      when io.reg_cfg_we : @[qei.scala 105:28]
        node _count_sel_2x_T = bits(io.reg_cfg_di, 0, 0) @[qei.scala 106:40]
        count_sel_2x <= _count_sel_2x_T @[qei.scala 106:24]
        node _speed_enable_T = bits(io.reg_cfg_di, 1, 1) @[qei.scala 107:40]
        speed_enable <= _speed_enable_T @[qei.scala 107:24]
        node _period_sel_T = bits(io.reg_cfg_di, 2, 2) @[qei.scala 108:40]
        period_sel <= _period_sel_T @[qei.scala 108:24]

  module vedic_2x2 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_1 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_2 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_3 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_4 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_5 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_6 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_7 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_8 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_9 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_10 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_11 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_12 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_13 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_14 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_15 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_1 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_2 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_3 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_16 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_17 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_18 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_19 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_20 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_21 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_22 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_23 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_27 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_24 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_25 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_26 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_27 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_28 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_29 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_30 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_31 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_28 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_29 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_30 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_31 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_4 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_5 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_6 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_7 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_32 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_33 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_34 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_35 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_32 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_33 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_34 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_35 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_36 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_37 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_38 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_39 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_36 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_37 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_38 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_39 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_40 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_41 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_42 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_43 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_40 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_41 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_42 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_43 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_44 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_45 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_46 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_47 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_44 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_45 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_46 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_47 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_8 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_9 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_10 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_11 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_48 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_49 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_50 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_51 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_48 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_49 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_50 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_51 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_1 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_2 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_12 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module vedic_2x2_52 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_53 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_54 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_55 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_52 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_53 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_54 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_55 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_56 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_57 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_58 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_59 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_56 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_57 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_58 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_59 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_60 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_61 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_62 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_63 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_60 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_61 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_62 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_63 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_64 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_65 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_66 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_67 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_64 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_65 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_66 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_67 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_13 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_14 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_15 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_16 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_68 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_69 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_70 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_71 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_68 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_69 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_70 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_71 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_72 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_73 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_74 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_75 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_72 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_73 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_74 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_75 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_76 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_77 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_78 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_79 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_76 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_77 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_78 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_79 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_80 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_81 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_82 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_83 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_80 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_81 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_82 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_83 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_17 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_18 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_19 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_20 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_84 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_85 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_86 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_87 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_84 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_85 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_86 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_87 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_88 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_89 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_90 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_91 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_88 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_89 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_90 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_91 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_92 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_93 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_94 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_95 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_92 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_93 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_94 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_95 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_96 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_97 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_98 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_99 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_96 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_97 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_98 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_99 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_21 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_22 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_23 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_24 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_100 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_101 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_102 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_103 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_100 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_101 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_102 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_103 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_3 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_4 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_5 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_25 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module vedic_2x2_104 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_105 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_106 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_107 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_104 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_105 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_106 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_107 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_108 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_109 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_110 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_111 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_27 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_108 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_109 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_110 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_111 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_112 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_113 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_114 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_115 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_28 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_112 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_113 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_114 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_115 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_116 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_117 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_118 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_119 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_29 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_116 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_117 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_118 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_119 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_26 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_27 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_28 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_29 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_120 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_121 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_122 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_123 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_30 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_120 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_121 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_122 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_123 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_124 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_125 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_126 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_127 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_31 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_124 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_125 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_126 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_127 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_128 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_129 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_130 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_131 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_32 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_128 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_129 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_130 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_131 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_132 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_133 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_134 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_135 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_33 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_132 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_133 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_134 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_135 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_30 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_31 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_32 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_33 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_136 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_137 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_138 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_139 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_34 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_136 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_137 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_138 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_139 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_140 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_141 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_142 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_143 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_35 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_140 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_141 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_142 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_143 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_144 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_145 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_146 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_147 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_36 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_144 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_145 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_146 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_147 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_148 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_149 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_150 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_151 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_37 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_148 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_149 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_150 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_151 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_34 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_35 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_36 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_37 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_152 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_153 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_154 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_155 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_38 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_152 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_153 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_154 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_155 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_6 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_7 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_8 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_38 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module PID_Controller :
    input clock : Clock
    input reset : Reset
    output io : { flip fb_period : UInt<1>, flip raw_irq : UInt<1>, flip reg_kp_we : UInt<1>, flip reg_kp_di : SInt<16>, reg_kp_do : SInt<16>, flip reg_ki_we : UInt<1>, flip reg_ki_di : SInt<16>, reg_ki_do : SInt<16>, flip reg_kd_we : UInt<1>, flip reg_kd_di : SInt<16>, reg_kd_do : SInt<16>, flip reg_ref_we : UInt<1>, flip reg_ref_di : SInt<16>, reg_ref_do : SInt<16>, flip reg_fb_we : UInt<1>, flip reg_fb_di : SInt<16>, reg_fb_do : SInt<16>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : SInt<16>, reg_cfg_do : SInt<16>, flip speed_fb_in : SInt<16>, pid_out : SInt<16>}

    reg kp : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<2>("h1"))) @[pid.scala 56:26]
    reg ki : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 57:26]
    reg kd : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 58:26]
    reg ref : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<6>("h14"))) @[pid.scala 59:26]
    reg feedback : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 60:26]
    reg sigma_old : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 61:26]
    reg fb_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pid.scala 62:26]
    reg e_prev1 : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 64:26]
    reg e_prev2 : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 65:26]
    reg reg_pid_out : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 66:28]
    io.reg_kp_do <= kp @[pid.scala 69:17]
    when io.reg_kp_we : @[pid.scala 70:22]
      kp <= io.reg_kp_di @[pid.scala 71:8]
    io.reg_ki_do <= ki @[pid.scala 74:17]
    when io.reg_ki_we : @[pid.scala 75:22]
      ki <= io.reg_ki_di @[pid.scala 76:8]
    io.reg_kd_do <= kd @[pid.scala 79:17]
    when io.reg_kd_we : @[pid.scala 80:22]
      kd <= io.reg_kd_di @[pid.scala 81:8]
    io.reg_ref_do <= ref @[pid.scala 85:17]
    when io.reg_ref_we : @[pid.scala 86:23]
      ref <= io.reg_ref_di @[pid.scala 87:9]
    io.reg_fb_do <= feedback @[pid.scala 90:17]
    when fb_sel : @[pid.scala 92:16]
      when io.reg_fb_we : @[pid.scala 93:24]
        feedback <= io.reg_fb_di @[pid.scala 94:15]
    else :
      feedback <= io.speed_fb_in @[pid.scala 97:15]
    node _io_reg_cfg_do_T = cat(UInt<31>("h0"), fb_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T_1 = asSInt(_io_reg_cfg_do_T) @[pid.scala 100:49]
    io.reg_cfg_do <= _io_reg_cfg_do_T_1 @[pid.scala 100:17]
    when io.reg_cfg_we : @[pid.scala 101:23]
      node _fb_sel_T = bits(io.reg_cfg_di, 0, 0) @[pid.scala 102:28]
      fb_sel <= _fb_sel_T @[pid.scala 102:12]
    node _delta_err_T = sub(e_prev1, e_prev2) @[pid.scala 106:27]
    node _delta_err_T_1 = tail(_delta_err_T, 1) @[pid.scala 106:27]
    node delta_err = asSInt(_delta_err_T_1) @[pid.scala 106:27]
    node _sigma_new_T = add(e_prev1, sigma_old) @[pid.scala 107:27]
    node _sigma_new_T_1 = tail(_sigma_new_T, 1) @[pid.scala 107:27]
    node sigma_new = asSInt(_sigma_new_T_1) @[pid.scala 107:27]
    inst mul_kp of vedic_16x16 @[pid.scala 110:25]
    mul_kp.clock <= clock
    mul_kp.reset <= reset
    mul_kp.io.a <= e_prev1 @[pid.scala 111:17]
    node _mul_kp_io_b_T = asUInt(kp) @[pid.scala 112:29]
    mul_kp.io.b <= _mul_kp_io_b_T @[pid.scala 112:17]
    node _prop_out_T = bits(mul_kp.io.c, 15, 0) @[pid.scala 113:30]
    node prop_out = asSInt(_prop_out_T) @[pid.scala 113:43]
    inst mul_ki of vedic_16x16_1 @[pid.scala 116:25]
    mul_ki.clock <= clock
    mul_ki.reset <= reset
    mul_ki.io.a <= sigma_new @[pid.scala 117:17]
    node _mul_ki_io_b_T = asUInt(ki) @[pid.scala 118:29]
    mul_ki.io.b <= _mul_ki_io_b_T @[pid.scala 118:17]
    node _integral_out_T = bits(mul_ki.io.c, 15, 0) @[pid.scala 119:33]
    node integral_out = asSInt(_integral_out_T) @[pid.scala 119:46]
    inst mul_kd of vedic_16x16_2 @[pid.scala 122:25]
    mul_kd.clock <= clock
    mul_kd.reset <= reset
    mul_kd.io.a <= delta_err @[pid.scala 123:17]
    node _mul_kd_io_b_T = asUInt(kd) @[pid.scala 124:29]
    mul_kd.io.b <= _mul_kd_io_b_T @[pid.scala 124:17]
    node _derivative_out_T = bits(mul_kd.io.c, 15, 0) @[pid.scala 125:35]
    node derivative_out = asSInt(_derivative_out_T) @[pid.scala 125:48]
    node _pi_sum_T = add(prop_out, integral_out) @[pid.scala 128:28]
    node _pi_sum_T_1 = tail(_pi_sum_T, 1) @[pid.scala 128:28]
    node pi_sum = asSInt(_pi_sum_T_1) @[pid.scala 128:28]
    node _pi_sum_overflow_T = bits(prop_out, 15, 15) @[pid.scala 129:34]
    node _pi_sum_overflow_T_1 = bits(integral_out, 15, 15) @[pid.scala 129:54]
    node _pi_sum_overflow_T_2 = and(_pi_sum_overflow_T, _pi_sum_overflow_T_1) @[pid.scala 129:39]
    node _pi_sum_overflow_T_3 = bits(pi_sum, 15, 15) @[pid.scala 129:69]
    node _pi_sum_overflow_T_4 = eq(_pi_sum_overflow_T_3, UInt<1>("h0")) @[pid.scala 129:62]
    node _pi_sum_overflow_T_5 = and(_pi_sum_overflow_T_2, _pi_sum_overflow_T_4) @[pid.scala 129:59]
    node _pi_sum_overflow_T_6 = bits(prop_out, 15, 15) @[pid.scala 130:35]
    node _pi_sum_overflow_T_7 = eq(_pi_sum_overflow_T_6, UInt<1>("h0")) @[pid.scala 130:26]
    node _pi_sum_overflow_T_8 = bits(integral_out, 15, 15) @[pid.scala 130:56]
    node _pi_sum_overflow_T_9 = eq(_pi_sum_overflow_T_8, UInt<1>("h0")) @[pid.scala 130:43]
    node _pi_sum_overflow_T_10 = and(_pi_sum_overflow_T_7, _pi_sum_overflow_T_9) @[pid.scala 130:40]
    node _pi_sum_overflow_T_11 = bits(pi_sum, 15, 15) @[pid.scala 130:70]
    node _pi_sum_overflow_T_12 = and(_pi_sum_overflow_T_10, _pi_sum_overflow_T_11) @[pid.scala 130:61]
    node pi_sum_overflow = or(_pi_sum_overflow_T_5, _pi_sum_overflow_T_12) @[pid.scala 129:75]
    when io.raw_irq : @[pid.scala 132:20]
      when io.fb_period : @[pid.scala 134:23]
        node _e_prev1_T = sub(feedback, ref) @[pid.scala 135:29]
        node _e_prev1_T_1 = tail(_e_prev1_T, 1) @[pid.scala 135:29]
        node _e_prev1_T_2 = asSInt(_e_prev1_T_1) @[pid.scala 135:29]
        e_prev1 <= _e_prev1_T_2 @[pid.scala 135:17]
      else :
        node _e_prev1_T_3 = sub(ref, feedback) @[pid.scala 137:24]
        node _e_prev1_T_4 = tail(_e_prev1_T_3, 1) @[pid.scala 137:24]
        node _e_prev1_T_5 = asSInt(_e_prev1_T_4) @[pid.scala 137:24]
        e_prev1 <= _e_prev1_T_5 @[pid.scala 137:17]
      e_prev2 <= e_prev1 @[pid.scala 139:17]
      sigma_old <= sigma_new @[pid.scala 140:17]
      node _reg_pid_out_T = add(pi_sum, derivative_out) @[pid.scala 141:27]
      node _reg_pid_out_T_1 = tail(_reg_pid_out_T, 1) @[pid.scala 141:27]
      node _reg_pid_out_T_2 = asSInt(_reg_pid_out_T_1) @[pid.scala 141:27]
      reg_pid_out <= _reg_pid_out_T_2 @[pid.scala 141:17]
    node _io_pid_out_T = bits(reg_pid_out, 15, 15) @[pid.scala 144:54]
    node _io_pid_out_T_1 = or(pi_sum_overflow, _io_pid_out_T) @[pid.scala 144:40]
    node _io_pid_out_T_2 = mux(_io_pid_out_T_1, asSInt(UInt<1>("h0")), reg_pid_out) @[pid.scala 144:23]
    io.pid_out <= _io_pid_out_T_2 @[pid.scala 144:17]

  module Motor_Top :
    input clock : Clock
    input reset : Reset
    output io : { wbs : { flip m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}, motor_gpio : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, flip motor_select : UInt<1>, motor_irq : UInt<1>}

    inst interlink of Interlink_Module @[motor_top.scala 53:26]
    interlink.clock <= clock
    interlink.reset <= reset
    interlink.io.motor_select <= io.motor_select @[motor_top.scala 57:29]
    interlink.io.bus_stb_i <= io.wbs.m2s.stb @[motor_top.scala 60:29]
    interlink.io.bus_cyc_i <= io.wbs.m2s.cyc @[motor_top.scala 61:29]
    interlink.io.bus_adr_i <= io.wbs.m2s.addr @[motor_top.scala 62:29]
    interlink.io.bus_sel_i <= io.wbs.m2s.sel @[motor_top.scala 63:29]
    interlink.io.bus_we_i <= io.wbs.m2s.we @[motor_top.scala 64:29]
    io.wbs.data_o <= interlink.io.bus_dat_o @[motor_top.scala 65:29]
    io.wbs.ack_o <= interlink.io.bus_ack_o @[motor_top.scala 66:29]
    inst pwm of PWM @[motor_top.scala 69:37]
    pwm.clock <= clock
    pwm.reset <= reset
    pwm.io.x_homed <= io.motor_gpio.x_homed @[motor_top.scala 71:29]
    pwm.io.y_homed <= io.motor_gpio.y_homed @[motor_top.scala 72:29]
    pwm.io.reg_val_we <= interlink.io.tmr_val_we @[motor_top.scala 74:29]
    pwm.io.reg_val_di <= io.wbs.m2s.data @[motor_top.scala 75:29]
    interlink.io.tmr_val_do <= pwm.io.reg_val_do @[motor_top.scala 76:29]
    pwm.io.reg_cfg_we <= interlink.io.tmr_cfg_we @[motor_top.scala 78:29]
    pwm.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 79:29]
    interlink.io.tmr_cfg_do <= pwm.io.reg_cfg_do @[motor_top.scala 80:29]
    pwm.io.reg_step_we <= interlink.io.tmr_step_we @[motor_top.scala 82:29]
    pwm.io.reg_step_di <= io.wbs.m2s.data @[motor_top.scala 83:29]
    interlink.io.tmr_step_do <= pwm.io.reg_step_do @[motor_top.scala 84:29]
    pwm.io.reg_dat_we <= interlink.io.tmr_dat_we @[motor_top.scala 86:29]
    pwm.io.reg_dat_di <= io.wbs.m2s.data @[motor_top.scala 87:29]
    interlink.io.tmr_dat_do <= pwm.io.reg_dat_do @[motor_top.scala 88:29]
    pwm.io.reg_duty_we <= interlink.io.tmr_duty_we @[motor_top.scala 89:29]
    pwm.io.reg_duty_di <= io.wbs.m2s.data @[motor_top.scala 90:29]
    interlink.io.tmr_duty_do <= pwm.io.reg_duty_do @[motor_top.scala 91:29]
    node _io_motor_gpio_step1step_T = bits(pwm.io.reg_step_do, 5, 5) @[motor_top.scala 93:50]
    io.motor_gpio.step1step <= _io_motor_gpio_step1step_T @[motor_top.scala 93:29]
    node _io_motor_gpio_step1dir_T = bits(pwm.io.reg_step_do, 4, 4) @[motor_top.scala 94:50]
    io.motor_gpio.step1dir <= _io_motor_gpio_step1dir_T @[motor_top.scala 94:29]
    node _io_motor_gpio_step2step_T = bits(pwm.io.reg_step_do, 3, 3) @[motor_top.scala 95:50]
    io.motor_gpio.step2step <= _io_motor_gpio_step2step_T @[motor_top.scala 95:29]
    node _io_motor_gpio_step2dir_T = bits(pwm.io.reg_step_do, 2, 2) @[motor_top.scala 96:50]
    io.motor_gpio.step2dir <= _io_motor_gpio_step2dir_T @[motor_top.scala 96:29]
    wire pid_out : SInt<16> @[motor_top.scala 99:35]
    pwm.io.reg_pid_out <= pid_out @[motor_top.scala 101:29]
    io.motor_irq <= pwm.io.irq_out @[motor_top.scala 102:29]
    io.motor_gpio.pwm_high <= pwm.io.pwm_h @[motor_top.scala 105:29]
    io.motor_gpio.pwm_low <= pwm.io.pwm_l @[motor_top.scala 106:29]
    inst qei of Quad_Encoder @[motor_top.scala 110:37]
    qei.clock <= clock
    qei.reset <= reset
    qei.io.quad_a <= io.motor_gpio.qei_ch_a @[motor_top.scala 111:29]
    qei.io.quad_b <= io.motor_gpio.qei_ch_b @[motor_top.scala 112:29]
    qei.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 113:29]
    qei.io.reg_count_we <= interlink.io.qei_count_we @[motor_top.scala 115:29]
    qei.io.reg_count_di <= io.wbs.m2s.data @[motor_top.scala 116:29]
    interlink.io.qei_count_do <= qei.io.reg_count_do @[motor_top.scala 117:29]
    qei.io.reg_cfg_we <= interlink.io.qei_cfg_we @[motor_top.scala 119:29]
    qei.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 120:29]
    interlink.io.qei_cfg_do <= qei.io.reg_cfg_do @[motor_top.scala 121:29]
    interlink.io.qei_speed_do <= qei.io.reg_speed_do @[motor_top.scala 123:29]
    inst pid of PID_Controller @[motor_top.scala 126:37]
    pid.clock <= clock
    pid.reset <= reset
    pid.io.fb_period <= qei.io.fb_period @[motor_top.scala 127:29]
    pid.io.speed_fb_in <= qei.io.reg_speed_do @[motor_top.scala 128:29]
    pid.io.reg_kp_we <= interlink.io.pid_kp_we @[motor_top.scala 130:29]
    node _pid_io_reg_kp_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 131:41]
    node _pid_io_reg_kp_di_T_1 = asSInt(_pid_io_reg_kp_di_T) @[motor_top.scala 131:53]
    pid.io.reg_kp_di <= _pid_io_reg_kp_di_T_1 @[motor_top.scala 131:29]
    interlink.io.pid_kp_do <= pid.io.reg_kp_do @[motor_top.scala 132:29]
    pid.io.reg_ki_we <= interlink.io.pid_ki_we @[motor_top.scala 134:29]
    node _pid_io_reg_ki_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 135:41]
    node _pid_io_reg_ki_di_T_1 = asSInt(_pid_io_reg_ki_di_T) @[motor_top.scala 135:53]
    pid.io.reg_ki_di <= _pid_io_reg_ki_di_T_1 @[motor_top.scala 135:29]
    interlink.io.pid_ki_do <= pid.io.reg_ki_do @[motor_top.scala 136:29]
    pid.io.reg_kd_we <= interlink.io.pid_kd_we @[motor_top.scala 138:29]
    node _pid_io_reg_kd_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 139:41]
    node _pid_io_reg_kd_di_T_1 = asSInt(_pid_io_reg_kd_di_T) @[motor_top.scala 139:53]
    pid.io.reg_kd_di <= _pid_io_reg_kd_di_T_1 @[motor_top.scala 139:29]
    interlink.io.pid_kd_do <= pid.io.reg_kd_do @[motor_top.scala 140:29]
    pid.io.reg_ref_we <= interlink.io.pid_ref_we @[motor_top.scala 142:29]
    node _pid_io_reg_ref_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 143:41]
    node _pid_io_reg_ref_di_T_1 = asSInt(_pid_io_reg_ref_di_T) @[motor_top.scala 143:54]
    pid.io.reg_ref_di <= _pid_io_reg_ref_di_T_1 @[motor_top.scala 143:29]
    interlink.io.pid_ref_do <= pid.io.reg_ref_do @[motor_top.scala 144:29]
    pid.io.reg_fb_we <= interlink.io.pid_fb_we @[motor_top.scala 146:29]
    node _pid_io_reg_fb_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 147:41]
    node _pid_io_reg_fb_di_T_1 = asSInt(_pid_io_reg_fb_di_T) @[motor_top.scala 147:54]
    pid.io.reg_fb_di <= _pid_io_reg_fb_di_T_1 @[motor_top.scala 147:29]
    interlink.io.pid_fb_do <= pid.io.reg_fb_do @[motor_top.scala 148:29]
    pid.io.reg_cfg_we <= interlink.io.pid_cfg_we @[motor_top.scala 150:29]
    node _pid_io_reg_cfg_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 151:41]
    node _pid_io_reg_cfg_di_T_1 = asSInt(_pid_io_reg_cfg_di_T) @[motor_top.scala 151:54]
    pid.io.reg_cfg_di <= _pid_io_reg_cfg_di_T_1 @[motor_top.scala 151:29]
    interlink.io.pid_cfg_do <= pid.io.reg_cfg_do @[motor_top.scala 152:29]
    pid_out <= pid.io.pid_out @[motor_top.scala 154:29]
    pid.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 155:29]

  module Interlink_Module_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip bus_adr_i : UInt<32>, flip bus_sel_i : UInt<4>, flip bus_we_i : UInt<1>, flip bus_cyc_i : UInt<1>, flip bus_stb_i : UInt<1>, bus_ack_o : UInt<1>, bus_dat_o : UInt<32>, tmr_val_we : UInt<1>, flip tmr_val_do : UInt<32>, tmr_dat_we : UInt<1>, flip tmr_dat_do : UInt<32>, tmr_duty_we : UInt<1>, flip tmr_duty_do : UInt<32>, tmr_cfg_we : UInt<1>, flip tmr_cfg_do : UInt<32>, tmr_step_we : UInt<1>, flip tmr_step_do : UInt<32>, qei_count_we : UInt<1>, flip qei_count_do : UInt<32>, qei_cfg_we : UInt<1>, flip qei_cfg_do : UInt<32>, flip qei_speed_do : SInt<16>, pid_kp_we : UInt<1>, flip pid_kp_do : SInt<16>, pid_ki_we : UInt<1>, flip pid_ki_do : SInt<16>, pid_kd_we : UInt<1>, flip pid_kd_do : SInt<16>, pid_ref_we : UInt<1>, flip pid_ref_do : SInt<16>, pid_fb_we : UInt<1>, flip pid_fb_do : SInt<16>, pid_cfg_we : UInt<1>, flip pid_cfg_do : SInt<16>, flip motor_select : UInt<1>}

    node _bus_valid_T = and(io.bus_stb_i, io.bus_cyc_i) @[interlink.scala 92:53]
    wire bus_valid : UInt<1>
    bus_valid <= _bus_valid_T
    wire tmr_cfg_do : UInt<32> @[interlink.scala 95:27]
    wire tmr_step_do : UInt<32> @[interlink.scala 96:27]
    wire tmr_val_do : UInt<32> @[interlink.scala 97:27]
    wire tmr_dat_do : UInt<32> @[interlink.scala 98:27]
    wire tmr_duty_do : UInt<32> @[interlink.scala 99:27]
    node reg_offset = bits(io.bus_adr_i, 11, 0) @[interlink.scala 102:35]
    node _tmr_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 104:50]
    node _tmr_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h0")) @[interlink.scala 104:81]
    node _tmr_cfg_sel_T_2 = and(_tmr_cfg_sel_T, _tmr_cfg_sel_T_1) @[interlink.scala 104:66]
    wire tmr_cfg_sel : UInt<1>
    tmr_cfg_sel <= _tmr_cfg_sel_T_2
    node _tmr_val_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 105:50]
    node _tmr_val_sel_T_1 = eq(reg_offset, UInt<12>("h4")) @[interlink.scala 105:81]
    node _tmr_val_sel_T_2 = and(_tmr_val_sel_T, _tmr_val_sel_T_1) @[interlink.scala 105:66]
    wire tmr_val_sel : UInt<1>
    tmr_val_sel <= _tmr_val_sel_T_2
    node _tmr_dat_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 106:50]
    node _tmr_dat_sel_T_1 = eq(reg_offset, UInt<12>("h8")) @[interlink.scala 106:81]
    node _tmr_dat_sel_T_2 = and(_tmr_dat_sel_T, _tmr_dat_sel_T_1) @[interlink.scala 106:66]
    wire tmr_dat_sel : UInt<1>
    tmr_dat_sel <= _tmr_dat_sel_T_2
    node _tmr_duty_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 107:50]
    node _tmr_duty_sel_T_1 = eq(reg_offset, UInt<12>("hc")) @[interlink.scala 107:81]
    node _tmr_duty_sel_T_2 = and(_tmr_duty_sel_T, _tmr_duty_sel_T_1) @[interlink.scala 107:66]
    wire tmr_duty_sel : UInt<1>
    tmr_duty_sel <= _tmr_duty_sel_T_2
    node _tmr_step_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 108:50]
    node _tmr_step_sel_T_1 = eq(reg_offset, UInt<12>("h10")) @[interlink.scala 108:81]
    node _tmr_step_sel_T_2 = and(_tmr_step_sel_T, _tmr_step_sel_T_1) @[interlink.scala 108:66]
    wire tmr_step_sel : UInt<1>
    tmr_step_sel <= _tmr_step_sel_T_2
    node _tmr_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 110:72]
    node _tmr_cfg_we_T_1 = and(_tmr_cfg_we_T, io.bus_we_i) @[interlink.scala 110:76]
    node _tmr_cfg_we_T_2 = mux(tmr_cfg_sel, _tmr_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 110:43]
    wire tmr_cfg_we : UInt<1>
    tmr_cfg_we <= _tmr_cfg_we_T_2
    node _tmr_val_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 111:72]
    node _tmr_val_we_T_1 = and(_tmr_val_we_T, io.bus_we_i) @[interlink.scala 111:76]
    node _tmr_val_we_T_2 = mux(tmr_val_sel, _tmr_val_we_T_1, UInt<1>("h0")) @[interlink.scala 111:43]
    wire tmr_val_we : UInt<1>
    tmr_val_we <= _tmr_val_we_T_2
    node _tmr_dat_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 112:72]
    node _tmr_dat_we_T_1 = and(_tmr_dat_we_T, io.bus_we_i) @[interlink.scala 112:76]
    node _tmr_dat_we_T_2 = mux(tmr_dat_sel, _tmr_dat_we_T_1, UInt<1>("h0")) @[interlink.scala 112:43]
    wire tmr_dat_we : UInt<1>
    tmr_dat_we <= _tmr_dat_we_T_2
    node _tmr_duty_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 113:73]
    node _tmr_duty_we_T_1 = and(_tmr_duty_we_T, io.bus_we_i) @[interlink.scala 113:77]
    node _tmr_duty_we_T_2 = mux(tmr_duty_sel, _tmr_duty_we_T_1, UInt<1>("h0")) @[interlink.scala 113:43]
    wire tmr_duty_we : UInt<1>
    tmr_duty_we <= _tmr_duty_we_T_2
    node _tmr_step_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 114:73]
    node _tmr_step_we_T_1 = and(_tmr_step_we_T, io.bus_we_i) @[interlink.scala 114:77]
    node _tmr_step_we_T_2 = mux(tmr_step_sel, _tmr_step_we_T_1, UInt<1>("h0")) @[interlink.scala 114:43]
    wire tmr_step_we : UInt<1>
    tmr_step_we <= _tmr_step_we_T_2
    node _reg_dat_re_T = neq(io.bus_sel_i, UInt<1>("h0")) @[interlink.scala 116:71]
    node _reg_dat_re_T_1 = eq(_reg_dat_re_T, UInt<1>("h0")) @[interlink.scala 116:56]
    node _reg_dat_re_T_2 = and(tmr_dat_sel, _reg_dat_re_T_1) @[interlink.scala 116:52]
    node _reg_dat_re_T_3 = not(io.bus_we_i) @[interlink.scala 116:84]
    node _reg_dat_re_T_4 = and(_reg_dat_re_T_2, _reg_dat_re_T_3) @[interlink.scala 116:80]
    wire reg_dat_re : UInt<1>
    reg_dat_re <= _reg_dat_re_T_4
    node _tmr_sel_T = or(tmr_cfg_sel, tmr_val_sel) @[interlink.scala 118:35]
    node _tmr_sel_T_1 = or(_tmr_sel_T, tmr_dat_sel) @[interlink.scala 118:50]
    node _tmr_sel_T_2 = or(_tmr_sel_T_1, tmr_duty_sel) @[interlink.scala 118:65]
    node tmr_sel = or(_tmr_sel_T_2, tmr_step_sel) @[interlink.scala 118:81]
    node _tmr_do_T = mux(tmr_step_sel, tmr_step_do, tmr_dat_do) @[interlink.scala 120:57]
    node _tmr_do_T_1 = mux(tmr_duty_sel, tmr_duty_do, _tmr_do_T) @[interlink.scala 120:26]
    node _tmr_do_T_2 = mux(tmr_val_sel, tmr_val_do, _tmr_do_T_1) @[interlink.scala 119:57]
    node tmr_do = mux(tmr_cfg_sel, tmr_cfg_do, _tmr_do_T_2) @[interlink.scala 119:26]
    wire qei_count_do : UInt<32> @[interlink.scala 123:27]
    node _qei_count_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 124:50]
    node _qei_count_sel_T_1 = eq(reg_offset, UInt<12>("h100")) @[interlink.scala 124:81]
    node _qei_count_sel_T_2 = and(_qei_count_sel_T, _qei_count_sel_T_1) @[interlink.scala 124:66]
    wire qei_count_sel : UInt<1>
    qei_count_sel <= _qei_count_sel_T_2
    node _qei_count_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 125:74]
    node _qei_count_we_T_1 = and(_qei_count_we_T, io.bus_we_i) @[interlink.scala 125:78]
    node _qei_count_we_T_2 = mux(qei_count_sel, _qei_count_we_T_1, UInt<1>("h0")) @[interlink.scala 125:43]
    wire qei_count_we : UInt<1>
    qei_count_we <= _qei_count_we_T_2
    wire qei_cfg_do : UInt<32> @[interlink.scala 127:27]
    node _qei_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 128:50]
    node _qei_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h108")) @[interlink.scala 128:81]
    node _qei_cfg_sel_T_2 = and(_qei_cfg_sel_T, _qei_cfg_sel_T_1) @[interlink.scala 128:66]
    wire qei_cfg_sel : UInt<1>
    qei_cfg_sel <= _qei_cfg_sel_T_2
    node _qei_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 129:72]
    node _qei_cfg_we_T_1 = and(_qei_cfg_we_T, io.bus_we_i) @[interlink.scala 129:76]
    node _qei_cfg_we_T_2 = mux(qei_cfg_sel, _qei_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 129:43]
    wire qei_cfg_we : UInt<1>
    qei_cfg_we <= _qei_cfg_we_T_2
    wire qei_speed_do : UInt<32> @[interlink.scala 131:27]
    node _qei_speed_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 132:50]
    node _qei_speed_sel_T_1 = eq(reg_offset, UInt<12>("h104")) @[interlink.scala 132:81]
    node _qei_speed_sel_T_2 = and(_qei_speed_sel_T, _qei_speed_sel_T_1) @[interlink.scala 132:66]
    wire qei_speed_sel : UInt<1>
    qei_speed_sel <= _qei_speed_sel_T_2
    node _qei_speed_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 133:74]
    node _qei_speed_we_T_1 = and(_qei_speed_we_T, io.bus_we_i) @[interlink.scala 133:78]
    node _qei_speed_we_T_2 = mux(qei_speed_sel, _qei_speed_we_T_1, UInt<1>("h0")) @[interlink.scala 133:43]
    wire qei_speed_we : UInt<1>
    qei_speed_we <= _qei_speed_we_T_2
    node _qei_sel_T = or(qei_count_sel, qei_cfg_sel) @[interlink.scala 136:37]
    node qei_sel = or(_qei_sel_T, qei_speed_sel) @[interlink.scala 136:52]
    node _qei_do_T = mux(qei_cfg_sel, qei_cfg_do, qei_count_do) @[interlink.scala 137:59]
    node qei_do = mux(qei_speed_sel, qei_speed_do, _qei_do_T) @[interlink.scala 137:26]
    wire pid_kp_do : SInt<16> @[interlink.scala 140:27]
    node _pid_kp_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 141:50]
    node _pid_kp_sel_T_1 = eq(reg_offset, UInt<12>("h200")) @[interlink.scala 141:81]
    node _pid_kp_sel_T_2 = and(_pid_kp_sel_T, _pid_kp_sel_T_1) @[interlink.scala 141:66]
    wire pid_kp_sel : UInt<1>
    pid_kp_sel <= _pid_kp_sel_T_2
    node _pid_kp_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 142:71]
    node _pid_kp_we_T_1 = and(_pid_kp_we_T, io.bus_we_i) @[interlink.scala 142:75]
    node _pid_kp_we_T_2 = mux(pid_kp_sel, _pid_kp_we_T_1, UInt<1>("h0")) @[interlink.scala 142:43]
    wire pid_kp_we : UInt<1>
    pid_kp_we <= _pid_kp_we_T_2
    wire pid_ki_do : SInt<16> @[interlink.scala 144:27]
    node _pid_ki_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 145:50]
    node _pid_ki_sel_T_1 = eq(reg_offset, UInt<12>("h204")) @[interlink.scala 145:81]
    node _pid_ki_sel_T_2 = and(_pid_ki_sel_T, _pid_ki_sel_T_1) @[interlink.scala 145:66]
    wire pid_ki_sel : UInt<1>
    pid_ki_sel <= _pid_ki_sel_T_2
    node _pid_ki_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 146:71]
    node _pid_ki_we_T_1 = and(_pid_ki_we_T, io.bus_we_i) @[interlink.scala 146:75]
    node _pid_ki_we_T_2 = mux(pid_ki_sel, _pid_ki_we_T_1, UInt<1>("h0")) @[interlink.scala 146:43]
    wire pid_ki_we : UInt<1>
    pid_ki_we <= _pid_ki_we_T_2
    wire pid_kd_do : SInt<16> @[interlink.scala 148:27]
    node _pid_kd_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 149:50]
    node _pid_kd_sel_T_1 = eq(reg_offset, UInt<12>("h208")) @[interlink.scala 149:81]
    node _pid_kd_sel_T_2 = and(_pid_kd_sel_T, _pid_kd_sel_T_1) @[interlink.scala 149:66]
    wire pid_kd_sel : UInt<1>
    pid_kd_sel <= _pid_kd_sel_T_2
    node _pid_kd_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 150:71]
    node _pid_kd_we_T_1 = and(_pid_kd_we_T, io.bus_we_i) @[interlink.scala 150:75]
    node _pid_kd_we_T_2 = mux(pid_kd_sel, _pid_kd_we_T_1, UInt<1>("h0")) @[interlink.scala 150:43]
    wire pid_kd_we : UInt<1>
    pid_kd_we <= _pid_kd_we_T_2
    wire pid_ref_do : SInt<16> @[interlink.scala 152:27]
    node _pid_ref_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 153:50]
    node _pid_ref_sel_T_1 = eq(reg_offset, UInt<12>("h20c")) @[interlink.scala 153:81]
    node _pid_ref_sel_T_2 = and(_pid_ref_sel_T, _pid_ref_sel_T_1) @[interlink.scala 153:66]
    wire pid_ref_sel : UInt<1>
    pid_ref_sel <= _pid_ref_sel_T_2
    node _pid_ref_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 154:72]
    node _pid_ref_we_T_1 = and(_pid_ref_we_T, io.bus_we_i) @[interlink.scala 154:76]
    node _pid_ref_we_T_2 = mux(pid_ref_sel, _pid_ref_we_T_1, UInt<1>("h0")) @[interlink.scala 154:43]
    wire pid_ref_we : UInt<1>
    pid_ref_we <= _pid_ref_we_T_2
    wire pid_fb_do : SInt<16> @[interlink.scala 156:27]
    node _pid_fb_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 157:50]
    node _pid_fb_sel_T_1 = eq(reg_offset, UInt<12>("h210")) @[interlink.scala 157:81]
    node _pid_fb_sel_T_2 = and(_pid_fb_sel_T, _pid_fb_sel_T_1) @[interlink.scala 157:66]
    wire pid_fb_sel : UInt<1>
    pid_fb_sel <= _pid_fb_sel_T_2
    node _pid_fb_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 158:71]
    node _pid_fb_we_T_1 = and(_pid_fb_we_T, io.bus_we_i) @[interlink.scala 158:75]
    node _pid_fb_we_T_2 = mux(pid_fb_sel, _pid_fb_we_T_1, UInt<1>("h0")) @[interlink.scala 158:43]
    wire pid_fb_we : UInt<1>
    pid_fb_we <= _pid_fb_we_T_2
    wire pid_cfg_do : SInt<16> @[interlink.scala 160:27]
    node _pid_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 161:50]
    node _pid_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h214")) @[interlink.scala 161:81]
    node _pid_cfg_sel_T_2 = and(_pid_cfg_sel_T, _pid_cfg_sel_T_1) @[interlink.scala 161:66]
    wire pid_cfg_sel : UInt<1>
    pid_cfg_sel <= _pid_cfg_sel_T_2
    node _pid_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 162:72]
    node _pid_cfg_we_T_1 = and(_pid_cfg_we_T, io.bus_we_i) @[interlink.scala 162:76]
    node _pid_cfg_we_T_2 = mux(pid_cfg_sel, _pid_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 162:43]
    wire pid_cfg_we : UInt<1>
    pid_cfg_we <= _pid_cfg_we_T_2
    node _pid_sel_T = or(pid_kp_sel, pid_ki_sel) @[interlink.scala 164:34]
    node _pid_sel_T_1 = or(_pid_sel_T, pid_kd_sel) @[interlink.scala 164:48]
    node _pid_sel_T_2 = or(_pid_sel_T_1, pid_ref_sel) @[interlink.scala 164:62]
    node _pid_sel_T_3 = or(_pid_sel_T_2, pid_fb_sel) @[interlink.scala 164:77]
    node pid_sel = or(_pid_sel_T_3, pid_cfg_sel) @[interlink.scala 164:91]
    node _pid_do_T = mux(pid_fb_sel, pid_fb_do, pid_cfg_do) @[interlink.scala 168:46]
    node _pid_do_T_1 = mux(pid_ref_sel, pid_ref_do, _pid_do_T) @[interlink.scala 167:46]
    node _pid_do_T_2 = mux(pid_kd_sel, pid_kd_do, _pid_do_T_1) @[interlink.scala 166:46]
    node _pid_do_T_3 = mux(pid_ki_sel, pid_ki_do, _pid_do_T_2) @[interlink.scala 165:53]
    node pid_do = mux(pid_kp_sel, pid_kp_do, _pid_do_T_3) @[interlink.scala 165:26]
    reg wb_ack_o : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[interlink.scala 171:30]
    reg wb_data_o : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[interlink.scala 172:30]
    node _wb_data_o_T = asUInt(pid_do) @[interlink.scala 173:92]
    node _wb_data_o_T_1 = mux(pid_sel, _wb_data_o_T, UInt<1>("h0")) @[interlink.scala 173:69]
    node _wb_data_o_T_2 = mux(qei_sel, qei_do, _wb_data_o_T_1) @[interlink.scala 173:48]
    node _wb_data_o_T_3 = mux(tmr_sel, tmr_do, _wb_data_o_T_2) @[interlink.scala 173:27]
    wb_data_o <= _wb_data_o_T_3 @[interlink.scala 173:21]
    node _wb_ack_o_T = or(tmr_sel, qei_sel) @[interlink.scala 174:32]
    node _wb_ack_o_T_1 = or(_wb_ack_o_T, pid_sel) @[interlink.scala 174:43]
    wb_ack_o <= _wb_ack_o_T_1 @[interlink.scala 174:21]
    io.bus_dat_o <= wb_data_o @[interlink.scala 176:21]
    io.bus_ack_o <= wb_ack_o @[interlink.scala 177:21]
    io.tmr_val_we <= tmr_val_we @[interlink.scala 180:21]
    tmr_val_do <= io.tmr_val_do @[interlink.scala 181:21]
    io.tmr_dat_we <= tmr_dat_we @[interlink.scala 182:21]
    tmr_dat_do <= io.tmr_dat_do @[interlink.scala 183:21]
    io.tmr_duty_we <= tmr_duty_we @[interlink.scala 184:21]
    tmr_duty_do <= io.tmr_duty_do @[interlink.scala 185:21]
    io.tmr_cfg_we <= tmr_cfg_we @[interlink.scala 186:21]
    tmr_cfg_do <= io.tmr_cfg_do @[interlink.scala 187:21]
    io.tmr_step_we <= tmr_step_we @[interlink.scala 188:21]
    tmr_step_do <= io.tmr_step_do @[interlink.scala 189:21]
    io.qei_count_we <= qei_count_we @[interlink.scala 191:21]
    qei_count_do <= io.qei_count_do @[interlink.scala 192:21]
    io.qei_cfg_we <= qei_cfg_we @[interlink.scala 193:21]
    qei_cfg_do <= io.qei_cfg_do @[interlink.scala 194:21]
    node _qei_speed_do_T = asUInt(io.qei_speed_do) @[interlink.scala 195:46]
    qei_speed_do <= _qei_speed_do_T @[interlink.scala 195:21]
    io.pid_kp_we <= pid_kp_we @[interlink.scala 197:21]
    pid_kp_do <= io.pid_kp_do @[interlink.scala 198:21]
    io.pid_ki_we <= pid_ki_we @[interlink.scala 199:21]
    pid_ki_do <= io.pid_ki_do @[interlink.scala 200:21]
    io.pid_kd_we <= pid_kd_we @[interlink.scala 201:21]
    pid_kd_do <= io.pid_kd_do @[interlink.scala 202:21]
    io.pid_ref_we <= pid_ref_we @[interlink.scala 203:21]
    pid_ref_do <= io.pid_ref_do @[interlink.scala 204:21]
    io.pid_fb_we <= pid_fb_we @[interlink.scala 205:21]
    pid_fb_do <= io.pid_fb_do @[interlink.scala 206:21]
    io.pid_cfg_we <= pid_cfg_we @[interlink.scala 207:21]
    pid_cfg_do <= io.pid_cfg_do @[interlink.scala 208:21]

  module PWM_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip reg_val_we : UInt<1>, flip reg_val_di : UInt<32>, reg_val_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, flip reg_dat_we : UInt<1>, flip reg_dat_di : UInt<32>, reg_dat_do : UInt<32>, flip reg_duty_we : UInt<1>, flip reg_duty_di : UInt<32>, reg_duty_do : UInt<32>, flip reg_step_we : UInt<1>, flip reg_step_di : UInt<32>, reg_step_do : UInt<32>, flip reg_pid_out : SInt<16>, pwm_h : UInt<1>, pwm_l : UInt<1>, irq_out : UInt<1>, rawirq_out : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>}

    reg value_cur : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 51:32]
    reg value_reload : UInt<32>, clock with :
      reset => (reset, UInt<8>("hff")) @[pwm.scala 52:32]
    reg pwm_duty : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 53:32]
    reg reg_duty : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 54:32]
    wire value_cur_plus : UInt<32> @[pwm.scala 56:29]
    wire value_cur_minus : UInt<32> @[pwm.scala 57:29]
    wire loc_enable : UInt<1> @[pwm.scala 59:29]
    reg enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 60:32]
    reg stop_out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 62:32]
    reg irq_out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 63:32]
    reg lastenable : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastenable) @[pwm.scala 66:28]
    reg updown : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 69:32]
    reg irq_ena : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 72:32]
    reg pid_out_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 75:32]
    reg pwm_db : UInt<4>, clock with :
      reset => (reset, UInt<2>("h2")) @[pwm.scala 78:32]
    reg step1step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 81:32]
    reg step1dir : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 82:32]
    reg step2step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 83:32]
    reg step2dir : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 84:32]
    io.reg_duty_do <= pwm_duty @[pwm.scala 87:23]
    when io.reg_duty_we : @[pwm.scala 88:24]
      reg_duty <= io.reg_duty_di @[pwm.scala 89:14]
    node io_reg_step_do_lo_hi = cat(step2dir, io.x_homed) @[Cat.scala 33:92]
    node io_reg_step_do_lo = cat(io_reg_step_do_lo_hi, io.y_homed) @[Cat.scala 33:92]
    node io_reg_step_do_hi_lo = cat(step1dir, step2step) @[Cat.scala 33:92]
    node io_reg_step_do_hi_hi = cat(UInt<26>("h0"), step1step) @[Cat.scala 33:92]
    node io_reg_step_do_hi = cat(io_reg_step_do_hi_hi, io_reg_step_do_hi_lo) @[Cat.scala 33:92]
    node _io_reg_step_do_T = cat(io_reg_step_do_hi, io_reg_step_do_lo) @[Cat.scala 33:92]
    io.reg_step_do <= _io_reg_step_do_T @[pwm.scala 92:23]
    when io.reg_step_we : @[pwm.scala 93:24]
      node _step1step_T = bits(io.reg_cfg_di, 5, 5) @[pwm.scala 94:39]
      step1step <= _step1step_T @[pwm.scala 94:23]
      node _step1dir_T = bits(io.reg_cfg_di, 4, 4) @[pwm.scala 95:39]
      step1dir <= _step1dir_T @[pwm.scala 95:23]
      node _step2step_T = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 96:39]
      step2step <= _step2step_T @[pwm.scala 96:23]
      node _step2dir_T = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 97:39]
      step2dir <= _step2dir_T @[pwm.scala 97:23]
    when stop_out : @[pwm.scala 100:18]
      when pid_out_sel : @[pwm.scala 101:22]
        node _pwm_duty_T = asUInt(io.reg_pid_out) @[pwm.scala 102:40]
        pwm_duty <= _pwm_duty_T @[pwm.scala 102:16]
      else :
        pwm_duty <= reg_duty @[pwm.scala 104:16]
    reg proc_offset : UInt<32>, clock with :
      reset => (UInt<1>("h0"), proc_offset) @[pwm.scala 108:24]
    reg pwm_ld : UInt<1>, clock with :
      reset => (UInt<1>("h0"), pwm_ld) @[pwm.scala 109:24]
    reg pwm_hd : UInt<1>, clock with :
      reset => (UInt<1>("h0"), pwm_hd) @[pwm.scala 110:24]
    node pwm_db_twice = dshl(pwm_db, UInt<1>("h1")) @[pwm.scala 113:30]
    node _proc_offset_T = geq(pwm_duty, pwm_db_twice) @[pwm.scala 115:37]
    node _proc_offset_T_1 = sub(value_reload, pwm_db_twice) @[pwm.scala 115:84]
    node _proc_offset_T_2 = tail(_proc_offset_T_1, 1) @[pwm.scala 115:84]
    node _proc_offset_T_3 = leq(pwm_duty, _proc_offset_T_2) @[pwm.scala 115:67]
    node _proc_offset_T_4 = and(_proc_offset_T, _proc_offset_T_3) @[pwm.scala 115:54]
    node _proc_offset_T_5 = lt(pwm_duty, pwm_db_twice) @[pwm.scala 116:36]
    node _proc_offset_T_6 = sub(value_reload, pwm_db_twice) @[pwm.scala 116:80]
    node _proc_offset_T_7 = tail(_proc_offset_T_6, 1) @[pwm.scala 116:80]
    node _proc_offset_T_8 = mux(_proc_offset_T_5, pwm_db_twice, _proc_offset_T_7) @[pwm.scala 116:26]
    node _proc_offset_T_9 = mux(_proc_offset_T_4, pwm_duty, _proc_offset_T_8) @[pwm.scala 115:26]
    proc_offset <= _proc_offset_T_9 @[pwm.scala 115:20]
    node _pwm_hd_T = sub(proc_offset, pwm_db) @[pwm.scala 117:48]
    node _pwm_hd_T_1 = tail(_pwm_hd_T, 1) @[pwm.scala 117:48]
    node _pwm_hd_T_2 = lt(value_cur, _pwm_hd_T_1) @[pwm.scala 117:33]
    pwm_hd <= _pwm_hd_T_2 @[pwm.scala 117:20]
    node _pwm_ld_T = gt(value_cur, proc_offset) @[pwm.scala 118:34]
    node _pwm_ld_T_1 = sub(value_reload, pwm_db) @[pwm.scala 118:79]
    node _pwm_ld_T_2 = tail(_pwm_ld_T_1, 1) @[pwm.scala 118:79]
    node _pwm_ld_T_3 = lt(value_cur, _pwm_ld_T_2) @[pwm.scala 118:63]
    node _pwm_ld_T_4 = and(_pwm_ld_T, _pwm_ld_T_3) @[pwm.scala 118:49]
    pwm_ld <= _pwm_ld_T_4 @[pwm.scala 118:20]
    node _io_pwm_h_T = and(pwm_hd, enable) @[pwm.scala 119:30]
    io.pwm_h <= _io_pwm_h_T @[pwm.scala 119:20]
    node _io_pwm_l_T = and(pwm_ld, enable) @[pwm.scala 120:30]
    io.pwm_l <= _io_pwm_l_T @[pwm.scala 120:20]
    io.irq_out <= irq_out @[pwm.scala 123:20]
    node _io_rawirq_out_T = not(irq_out) @[pwm.scala 124:34]
    node _io_rawirq_out_T_1 = and(stop_out, _io_rawirq_out_T) @[pwm.scala 124:32]
    io.rawirq_out <= _io_rawirq_out_T_1 @[pwm.scala 124:20]
    node _io_reg_cfg_do_T = bits(pwm_db, 3, 0) @[pwm.scala 127:44]
    node io_reg_cfg_do_lo_hi = cat(irq_ena, updown) @[Cat.scala 33:92]
    node io_reg_cfg_do_lo = cat(io_reg_cfg_do_lo_hi, enable) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi_hi = cat(UInt<24>("h0"), _io_reg_cfg_do_T) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi = cat(io_reg_cfg_do_hi_hi, pid_out_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T_1 = cat(io_reg_cfg_do_hi, io_reg_cfg_do_lo) @[Cat.scala 33:92]
    io.reg_cfg_do <= _io_reg_cfg_do_T_1 @[pwm.scala 127:20]
    when io.reg_cfg_we : @[pwm.scala 128:23]
      node _enable_T = bits(io.reg_cfg_di, 0, 0) @[pwm.scala 129:35]
      enable <= _enable_T @[pwm.scala 129:19]
      node _updown_T = bits(io.reg_cfg_di, 1, 1) @[pwm.scala 130:35]
      updown <= _updown_T @[pwm.scala 130:19]
      node _irq_ena_T = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 131:35]
      irq_ena <= _irq_ena_T @[pwm.scala 131:19]
      node _pid_out_sel_T = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 132:35]
      pid_out_sel <= _pid_out_sel_T @[pwm.scala 132:19]
      node _pwm_db_T = bits(io.reg_cfg_di, 7, 4) @[pwm.scala 133:36]
      node _pwm_db_T_1 = add(_pwm_db_T, UInt<2>("h2")) @[pwm.scala 133:42]
      node _pwm_db_T_2 = tail(_pwm_db_T_1, 1) @[pwm.scala 133:42]
      pwm_db <= _pwm_db_T_2 @[pwm.scala 133:19]
    io.reg_val_do <= value_reload @[pwm.scala 137:19]
    node _T = orr(io.reg_val_we) @[pwm.scala 138:25]
    when _T : @[pwm.scala 138:29]
      value_reload <= io.reg_val_di @[pwm.scala 139:19]
    io.reg_dat_do <= value_cur @[pwm.scala 143:19]
    node _value_cur_plus_T = add(value_cur, UInt<1>("h1")) @[pwm.scala 144:39]
    node _value_cur_plus_T_1 = tail(_value_cur_plus_T, 1) @[pwm.scala 144:39]
    value_cur_plus <= _value_cur_plus_T_1 @[pwm.scala 144:19]
    node _value_cur_minus_T = sub(value_cur, UInt<1>("h1")) @[pwm.scala 145:39]
    node _value_cur_minus_T_1 = tail(_value_cur_minus_T, 1) @[pwm.scala 145:39]
    value_cur_minus <= _value_cur_minus_T_1 @[pwm.scala 145:19]
    loc_enable <= enable @[pwm.scala 146:19]
    lastenable <= loc_enable @[pwm.scala 149:19]
    node _T_1 = orr(io.reg_dat_we) @[pwm.scala 150:25]
    when _T_1 : @[pwm.scala 150:29]
      value_cur <= io.reg_dat_di @[pwm.scala 151:19]
    else :
      node _T_2 = eq(loc_enable, UInt<1>("h1")) @[pwm.scala 152:27]
      when _T_2 : @[pwm.scala 152:39]
        node _irq_out_T = not(irq_out) @[pwm.scala 155:47]
        node _irq_out_T_1 = and(stop_out, _irq_out_T) @[pwm.scala 155:45]
        node _irq_out_T_2 = mux(irq_ena, _irq_out_T_1, UInt<1>("h0")) @[pwm.scala 155:23]
        irq_out <= _irq_out_T_2 @[pwm.scala 155:17]
        node _T_3 = eq(updown, UInt<1>("h1")) @[pwm.scala 157:19]
        when _T_3 : @[pwm.scala 157:31]
          node _T_4 = eq(lastenable, UInt<1>("h0")) @[pwm.scala 158:25]
          when _T_4 : @[pwm.scala 158:38]
            value_cur <= UInt<32>("h0") @[pwm.scala 159:21]
            stop_out <= UInt<1>("h0") @[pwm.scala 160:21]
          else :
            node _T_5 = eq(value_cur, value_reload) @[pwm.scala 163:33]
            when _T_5 : @[pwm.scala 163:58]
              value_cur <= UInt<32>("h0") @[pwm.scala 164:23]
              stop_out <= UInt<1>("h1") @[pwm.scala 165:23]
            else :
              value_cur <= value_cur_plus @[pwm.scala 167:23]
              stop_out <= UInt<1>("h0") @[pwm.scala 168:23]
        else :
          node _T_6 = eq(lastenable, UInt<1>("h0")) @[pwm.scala 173:25]
          when _T_6 : @[pwm.scala 173:38]
            value_cur <= value_reload @[pwm.scala 174:23]
            stop_out <= UInt<1>("h0") @[pwm.scala 175:23]
          else :
            node _T_7 = eq(value_cur, UInt<32>("h0")) @[pwm.scala 178:35]
            when _T_7 : @[pwm.scala 178:50]
              value_cur <= value_reload @[pwm.scala 179:25]
              stop_out <= UInt<1>("h1") @[pwm.scala 180:25]
            else :
              value_cur <= value_cur_minus @[pwm.scala 182:25]
              stop_out <= UInt<1>("h0") @[pwm.scala 183:25]

  module Quad_Encoder_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip quad_a : UInt<1>, flip quad_b : UInt<1>, flip raw_irq : UInt<1>, flip reg_count_we : UInt<1>, flip reg_count_di : UInt<32>, reg_count_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, reg_speed_do : SInt<16>, fb_period : UInt<1>}

    reg quad_a_delayed : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 35:33]
    reg quad_b_delayed : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 36:33]
    reg count_reg : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 37:33]
    reg count_reg_2 : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 38:33]
    reg period_count : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 39:33]
    reg speed_enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[qei.scala 41:33]
    reg count_sel_2x : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[qei.scala 42:33]
    reg count_old : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 43:33]
    reg qei_output : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 44:33]
    reg qei_speed_count : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 45:33]
    reg qei_period_count : UInt<16>, clock with :
      reset => (reset, UInt<13>("h1fff")) @[qei.scala 46:33]
    reg period_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 47:33]
    io.reg_count_do <= count_reg @[qei.scala 49:23]
    node _quad_a_delayed_T = bits(quad_a_delayed, 1, 1) @[qei.scala 51:44]
    node _quad_a_delayed_T_1 = bits(quad_a_delayed, 0, 0) @[qei.scala 51:63]
    node quad_a_delayed_hi = cat(_quad_a_delayed_T, _quad_a_delayed_T_1) @[Cat.scala 33:92]
    node _quad_a_delayed_T_2 = cat(quad_a_delayed_hi, io.quad_a) @[Cat.scala 33:92]
    quad_a_delayed <= _quad_a_delayed_T_2 @[qei.scala 51:23]
    node _quad_b_delayed_T = bits(quad_b_delayed, 1, 1) @[qei.scala 52:44]
    node _quad_b_delayed_T_1 = bits(quad_b_delayed, 0, 0) @[qei.scala 52:63]
    node quad_b_delayed_hi = cat(_quad_b_delayed_T, _quad_b_delayed_T_1) @[Cat.scala 33:92]
    node _quad_b_delayed_T_2 = cat(quad_b_delayed_hi, io.quad_b) @[Cat.scala 33:92]
    quad_b_delayed <= _quad_b_delayed_T_2 @[qei.scala 52:23]
    node _count_2x_T = bits(quad_a_delayed, 1, 1) @[qei.scala 54:57]
    node _count_2x_T_1 = bits(quad_a_delayed, 2, 2) @[qei.scala 54:75]
    node _count_2x_T_2 = xor(_count_2x_T, _count_2x_T_1) @[qei.scala 54:60]
    wire count_2x : UInt<1>
    count_2x <= _count_2x_T_2
    node _count_4x_T = bits(quad_a_delayed, 1, 1) @[qei.scala 55:57]
    node _count_4x_T_1 = bits(quad_a_delayed, 2, 2) @[qei.scala 55:75]
    node _count_4x_T_2 = xor(_count_4x_T, _count_4x_T_1) @[qei.scala 55:60]
    node _count_4x_T_3 = bits(quad_b_delayed, 1, 1) @[qei.scala 55:93]
    node _count_4x_T_4 = xor(_count_4x_T_2, _count_4x_T_3) @[qei.scala 55:78]
    node _count_4x_T_5 = bits(quad_b_delayed, 2, 2) @[qei.scala 55:111]
    node _count_4x_T_6 = xor(_count_4x_T_4, _count_4x_T_5) @[qei.scala 55:96]
    wire count_4x : UInt<1>
    count_4x <= _count_4x_T_6
    node _count_direction_T = bits(quad_a_delayed, 1, 1) @[qei.scala 56:57]
    node _count_direction_T_1 = bits(quad_b_delayed, 2, 2) @[qei.scala 56:75]
    node _count_direction_T_2 = xor(_count_direction_T, _count_direction_T_1) @[qei.scala 56:60]
    wire count_direction : UInt<1>
    count_direction <= _count_direction_T_2
    node count_pulses = mux(count_sel_2x, count_2x, count_4x) @[qei.scala 57:29]
    when count_pulses : @[qei.scala 62:22]
      when count_direction : @[qei.scala 63:27]
        node _count_reg_T = add(count_reg, UInt<1>("h1")) @[qei.scala 64:36]
        node _count_reg_T_1 = tail(_count_reg_T, 1) @[qei.scala 64:36]
        count_reg <= _count_reg_T_1 @[qei.scala 64:23]
      else :
        node _count_reg_T_2 = sub(count_reg, UInt<1>("h1")) @[qei.scala 66:36]
        node _count_reg_T_3 = tail(_count_reg_T_2, 1) @[qei.scala 66:36]
        count_reg <= _count_reg_T_3 @[qei.scala 66:23]
    node _T = or(io.raw_irq, count_pulses) @[qei.scala 71:20]
    when _T : @[qei.scala 71:37]
      when io.raw_irq : @[qei.scala 72:23]
        qei_speed_count <= count_reg_2 @[qei.scala 73:23]
        count_reg_2 <= UInt<1>("h0") @[qei.scala 74:23]
      else :
        node _count_reg_2_T = add(count_reg_2, UInt<1>("h1")) @[qei.scala 76:38]
        node _count_reg_2_T_1 = tail(_count_reg_2_T, 1) @[qei.scala 76:38]
        count_reg_2 <= _count_reg_2_T_1 @[qei.scala 76:23]
    when period_sel : @[qei.scala 81:20]
      when count_pulses : @[qei.scala 82:24]
        qei_period_count <= period_count @[qei.scala 83:24]
        period_count <= UInt<1>("h0") @[qei.scala 84:24]
      else :
        node _T_1 = eq(period_count, UInt<8>("hff")) @[qei.scala 85:29]
        when _T_1 : @[qei.scala 85:40]
          qei_period_count <= period_count @[qei.scala 86:24]
          period_count <= UInt<1>("h0") @[qei.scala 87:24]
        else :
          node _period_count_T = add(period_count, UInt<1>("h1")) @[qei.scala 89:40]
          node _period_count_T_1 = tail(_period_count_T, 1) @[qei.scala 89:40]
          period_count <= _period_count_T_1 @[qei.scala 89:24]
    node _qei_output_T = mux(period_sel, qei_period_count, qei_speed_count) @[qei.scala 94:30]
    qei_output <= _qei_output_T @[qei.scala 94:24]
    node io_reg_cfg_do_lo = cat(speed_enable, count_sel_2x) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi = cat(UInt<29>("h0"), period_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T = cat(io_reg_cfg_do_hi, io_reg_cfg_do_lo) @[Cat.scala 33:92]
    io.reg_cfg_do <= _io_reg_cfg_do_T @[qei.scala 97:24]
    node _io_reg_speed_do_T = bits(qei_output, 15, 0) @[qei.scala 100:37]
    node _io_reg_speed_do_T_1 = asSInt(_io_reg_speed_do_T) @[qei.scala 100:50]
    io.reg_speed_do <= _io_reg_speed_do_T_1 @[qei.scala 100:24]
    io.fb_period <= period_sel @[qei.scala 101:24]
    when io.reg_count_we : @[qei.scala 103:25]
      count_reg <= io.reg_count_di @[qei.scala 104:24]
    else :
      when io.reg_cfg_we : @[qei.scala 105:28]
        node _count_sel_2x_T = bits(io.reg_cfg_di, 0, 0) @[qei.scala 106:40]
        count_sel_2x <= _count_sel_2x_T @[qei.scala 106:24]
        node _speed_enable_T = bits(io.reg_cfg_di, 1, 1) @[qei.scala 107:40]
        speed_enable <= _speed_enable_T @[qei.scala 107:24]
        node _period_sel_T = bits(io.reg_cfg_di, 2, 2) @[qei.scala 108:40]
        period_sel <= _period_sel_T @[qei.scala 108:24]

  module vedic_2x2_156 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_157 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_158 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_159 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_39 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_156 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_157 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_158 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_159 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_160 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_161 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_162 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_163 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_40 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_160 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_161 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_162 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_163 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_164 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_165 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_166 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_167 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_41 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_164 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_165 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_166 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_167 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_168 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_169 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_170 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_171 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_42 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_168 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_169 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_170 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_171 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_39 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_40 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_41 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_42 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_172 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_173 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_174 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_175 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_43 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_172 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_173 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_174 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_175 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_176 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_177 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_178 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_179 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_44 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_176 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_177 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_178 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_179 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_180 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_181 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_182 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_183 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_45 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_180 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_181 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_182 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_183 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_184 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_185 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_186 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_187 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_46 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_184 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_185 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_186 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_187 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_43 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_44 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_45 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_46 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_188 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_189 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_190 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_191 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_47 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_188 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_189 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_190 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_191 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_192 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_193 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_194 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_195 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_48 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_192 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_193 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_194 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_195 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_196 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_197 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_198 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_199 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_49 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_196 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_197 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_198 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_199 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_200 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_201 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_202 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_203 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_50 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_200 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_201 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_202 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_203 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_47 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_48 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_49 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_50 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_204 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_205 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_206 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_207 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_51 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_204 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_205 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_206 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_207 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_9 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_10 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_11 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_51 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module vedic_2x2_208 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_209 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_210 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_211 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_52 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_208 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_209 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_210 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_211 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_212 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_213 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_214 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_215 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_53 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_212 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_213 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_214 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_215 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_216 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_217 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_218 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_219 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_54 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_216 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_217 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_218 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_219 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_220 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_221 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_222 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_223 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_55 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_220 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_221 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_222 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_223 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_52 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_53 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_54 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_55 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_224 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_225 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_226 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_227 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_56 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_224 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_225 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_226 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_227 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_228 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_229 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_230 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_231 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_57 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_228 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_229 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_230 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_231 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_232 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_233 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_234 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_235 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_58 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_232 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_233 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_234 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_235 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_236 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_237 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_238 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_239 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_59 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_236 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_237 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_238 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_239 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_56 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_57 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_58 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_59 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_240 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_241 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_242 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_243 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_60 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_240 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_241 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_242 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_243 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_244 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_245 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_246 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_247 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_61 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_244 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_245 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_246 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_247 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_248 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_249 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_250 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_251 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_62 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_248 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_249 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_250 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_251 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_252 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_253 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_254 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_255 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_63 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_252 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_253 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_254 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_255 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_60 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_61 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_62 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_63 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_256 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_257 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_258 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_259 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_64 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_256 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_257 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_258 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_259 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_12 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_13 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_14 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_64 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module vedic_2x2_260 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_261 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_262 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_263 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_65 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_260 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_261 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_262 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_263 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_264 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_265 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_266 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_267 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_66 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_264 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_265 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_266 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_267 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_268 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_269 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_270 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_271 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_67 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_268 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_269 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_270 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_271 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_272 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_273 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_274 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_275 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_68 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_272 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_273 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_274 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_275 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_65 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_66 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_67 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_68 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_276 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_277 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_278 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_279 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_69 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_276 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_277 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_278 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_279 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_280 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_281 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_282 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_283 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_70 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_280 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_281 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_282 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_283 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_284 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_285 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_286 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_287 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_71 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_284 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_285 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_286 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_287 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_288 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_289 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_290 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_291 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_72 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_288 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_289 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_290 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_291 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_69 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_70 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_71 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_72 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_292 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_293 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_294 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_295 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_73 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_292 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_293 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_294 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_295 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_296 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_297 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_298 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_299 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_74 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_296 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_297 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_298 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_299 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_300 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_301 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_302 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_303 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_75 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_300 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_301 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_302 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_303 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_304 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_305 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_306 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_307 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_76 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_304 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_305 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_306 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_307 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_73 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_74 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_75 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_76 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_308 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_309 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_310 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_311 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_77 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_308 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_309 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_310 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_311 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_15 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_16 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_17 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_77 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module PID_Controller_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip fb_period : UInt<1>, flip raw_irq : UInt<1>, flip reg_kp_we : UInt<1>, flip reg_kp_di : SInt<16>, reg_kp_do : SInt<16>, flip reg_ki_we : UInt<1>, flip reg_ki_di : SInt<16>, reg_ki_do : SInt<16>, flip reg_kd_we : UInt<1>, flip reg_kd_di : SInt<16>, reg_kd_do : SInt<16>, flip reg_ref_we : UInt<1>, flip reg_ref_di : SInt<16>, reg_ref_do : SInt<16>, flip reg_fb_we : UInt<1>, flip reg_fb_di : SInt<16>, reg_fb_do : SInt<16>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : SInt<16>, reg_cfg_do : SInt<16>, flip speed_fb_in : SInt<16>, pid_out : SInt<16>}

    reg kp : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<2>("h1"))) @[pid.scala 56:26]
    reg ki : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 57:26]
    reg kd : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 58:26]
    reg ref : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<6>("h14"))) @[pid.scala 59:26]
    reg feedback : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 60:26]
    reg sigma_old : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 61:26]
    reg fb_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pid.scala 62:26]
    reg e_prev1 : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 64:26]
    reg e_prev2 : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 65:26]
    reg reg_pid_out : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 66:28]
    io.reg_kp_do <= kp @[pid.scala 69:17]
    when io.reg_kp_we : @[pid.scala 70:22]
      kp <= io.reg_kp_di @[pid.scala 71:8]
    io.reg_ki_do <= ki @[pid.scala 74:17]
    when io.reg_ki_we : @[pid.scala 75:22]
      ki <= io.reg_ki_di @[pid.scala 76:8]
    io.reg_kd_do <= kd @[pid.scala 79:17]
    when io.reg_kd_we : @[pid.scala 80:22]
      kd <= io.reg_kd_di @[pid.scala 81:8]
    io.reg_ref_do <= ref @[pid.scala 85:17]
    when io.reg_ref_we : @[pid.scala 86:23]
      ref <= io.reg_ref_di @[pid.scala 87:9]
    io.reg_fb_do <= feedback @[pid.scala 90:17]
    when fb_sel : @[pid.scala 92:16]
      when io.reg_fb_we : @[pid.scala 93:24]
        feedback <= io.reg_fb_di @[pid.scala 94:15]
    else :
      feedback <= io.speed_fb_in @[pid.scala 97:15]
    node _io_reg_cfg_do_T = cat(UInt<31>("h0"), fb_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T_1 = asSInt(_io_reg_cfg_do_T) @[pid.scala 100:49]
    io.reg_cfg_do <= _io_reg_cfg_do_T_1 @[pid.scala 100:17]
    when io.reg_cfg_we : @[pid.scala 101:23]
      node _fb_sel_T = bits(io.reg_cfg_di, 0, 0) @[pid.scala 102:28]
      fb_sel <= _fb_sel_T @[pid.scala 102:12]
    node _delta_err_T = sub(e_prev1, e_prev2) @[pid.scala 106:27]
    node _delta_err_T_1 = tail(_delta_err_T, 1) @[pid.scala 106:27]
    node delta_err = asSInt(_delta_err_T_1) @[pid.scala 106:27]
    node _sigma_new_T = add(e_prev1, sigma_old) @[pid.scala 107:27]
    node _sigma_new_T_1 = tail(_sigma_new_T, 1) @[pid.scala 107:27]
    node sigma_new = asSInt(_sigma_new_T_1) @[pid.scala 107:27]
    inst mul_kp of vedic_16x16_3 @[pid.scala 110:25]
    mul_kp.clock <= clock
    mul_kp.reset <= reset
    mul_kp.io.a <= e_prev1 @[pid.scala 111:17]
    node _mul_kp_io_b_T = asUInt(kp) @[pid.scala 112:29]
    mul_kp.io.b <= _mul_kp_io_b_T @[pid.scala 112:17]
    node _prop_out_T = bits(mul_kp.io.c, 15, 0) @[pid.scala 113:30]
    node prop_out = asSInt(_prop_out_T) @[pid.scala 113:43]
    inst mul_ki of vedic_16x16_4 @[pid.scala 116:25]
    mul_ki.clock <= clock
    mul_ki.reset <= reset
    mul_ki.io.a <= sigma_new @[pid.scala 117:17]
    node _mul_ki_io_b_T = asUInt(ki) @[pid.scala 118:29]
    mul_ki.io.b <= _mul_ki_io_b_T @[pid.scala 118:17]
    node _integral_out_T = bits(mul_ki.io.c, 15, 0) @[pid.scala 119:33]
    node integral_out = asSInt(_integral_out_T) @[pid.scala 119:46]
    inst mul_kd of vedic_16x16_5 @[pid.scala 122:25]
    mul_kd.clock <= clock
    mul_kd.reset <= reset
    mul_kd.io.a <= delta_err @[pid.scala 123:17]
    node _mul_kd_io_b_T = asUInt(kd) @[pid.scala 124:29]
    mul_kd.io.b <= _mul_kd_io_b_T @[pid.scala 124:17]
    node _derivative_out_T = bits(mul_kd.io.c, 15, 0) @[pid.scala 125:35]
    node derivative_out = asSInt(_derivative_out_T) @[pid.scala 125:48]
    node _pi_sum_T = add(prop_out, integral_out) @[pid.scala 128:28]
    node _pi_sum_T_1 = tail(_pi_sum_T, 1) @[pid.scala 128:28]
    node pi_sum = asSInt(_pi_sum_T_1) @[pid.scala 128:28]
    node _pi_sum_overflow_T = bits(prop_out, 15, 15) @[pid.scala 129:34]
    node _pi_sum_overflow_T_1 = bits(integral_out, 15, 15) @[pid.scala 129:54]
    node _pi_sum_overflow_T_2 = and(_pi_sum_overflow_T, _pi_sum_overflow_T_1) @[pid.scala 129:39]
    node _pi_sum_overflow_T_3 = bits(pi_sum, 15, 15) @[pid.scala 129:69]
    node _pi_sum_overflow_T_4 = eq(_pi_sum_overflow_T_3, UInt<1>("h0")) @[pid.scala 129:62]
    node _pi_sum_overflow_T_5 = and(_pi_sum_overflow_T_2, _pi_sum_overflow_T_4) @[pid.scala 129:59]
    node _pi_sum_overflow_T_6 = bits(prop_out, 15, 15) @[pid.scala 130:35]
    node _pi_sum_overflow_T_7 = eq(_pi_sum_overflow_T_6, UInt<1>("h0")) @[pid.scala 130:26]
    node _pi_sum_overflow_T_8 = bits(integral_out, 15, 15) @[pid.scala 130:56]
    node _pi_sum_overflow_T_9 = eq(_pi_sum_overflow_T_8, UInt<1>("h0")) @[pid.scala 130:43]
    node _pi_sum_overflow_T_10 = and(_pi_sum_overflow_T_7, _pi_sum_overflow_T_9) @[pid.scala 130:40]
    node _pi_sum_overflow_T_11 = bits(pi_sum, 15, 15) @[pid.scala 130:70]
    node _pi_sum_overflow_T_12 = and(_pi_sum_overflow_T_10, _pi_sum_overflow_T_11) @[pid.scala 130:61]
    node pi_sum_overflow = or(_pi_sum_overflow_T_5, _pi_sum_overflow_T_12) @[pid.scala 129:75]
    when io.raw_irq : @[pid.scala 132:20]
      when io.fb_period : @[pid.scala 134:23]
        node _e_prev1_T = sub(feedback, ref) @[pid.scala 135:29]
        node _e_prev1_T_1 = tail(_e_prev1_T, 1) @[pid.scala 135:29]
        node _e_prev1_T_2 = asSInt(_e_prev1_T_1) @[pid.scala 135:29]
        e_prev1 <= _e_prev1_T_2 @[pid.scala 135:17]
      else :
        node _e_prev1_T_3 = sub(ref, feedback) @[pid.scala 137:24]
        node _e_prev1_T_4 = tail(_e_prev1_T_3, 1) @[pid.scala 137:24]
        node _e_prev1_T_5 = asSInt(_e_prev1_T_4) @[pid.scala 137:24]
        e_prev1 <= _e_prev1_T_5 @[pid.scala 137:17]
      e_prev2 <= e_prev1 @[pid.scala 139:17]
      sigma_old <= sigma_new @[pid.scala 140:17]
      node _reg_pid_out_T = add(pi_sum, derivative_out) @[pid.scala 141:27]
      node _reg_pid_out_T_1 = tail(_reg_pid_out_T, 1) @[pid.scala 141:27]
      node _reg_pid_out_T_2 = asSInt(_reg_pid_out_T_1) @[pid.scala 141:27]
      reg_pid_out <= _reg_pid_out_T_2 @[pid.scala 141:17]
    node _io_pid_out_T = bits(reg_pid_out, 15, 15) @[pid.scala 144:54]
    node _io_pid_out_T_1 = or(pi_sum_overflow, _io_pid_out_T) @[pid.scala 144:40]
    node _io_pid_out_T_2 = mux(_io_pid_out_T_1, asSInt(UInt<1>("h0")), reg_pid_out) @[pid.scala 144:23]
    io.pid_out <= _io_pid_out_T_2 @[pid.scala 144:17]

  module Motor_Top_1 :
    input clock : Clock
    input reset : Reset
    output io : { wbs : { flip m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}, motor_gpio : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, flip motor_select : UInt<1>, motor_irq : UInt<1>}

    inst interlink of Interlink_Module_1 @[motor_top.scala 53:26]
    interlink.clock <= clock
    interlink.reset <= reset
    interlink.io.motor_select <= io.motor_select @[motor_top.scala 57:29]
    interlink.io.bus_stb_i <= io.wbs.m2s.stb @[motor_top.scala 60:29]
    interlink.io.bus_cyc_i <= io.wbs.m2s.cyc @[motor_top.scala 61:29]
    interlink.io.bus_adr_i <= io.wbs.m2s.addr @[motor_top.scala 62:29]
    interlink.io.bus_sel_i <= io.wbs.m2s.sel @[motor_top.scala 63:29]
    interlink.io.bus_we_i <= io.wbs.m2s.we @[motor_top.scala 64:29]
    io.wbs.data_o <= interlink.io.bus_dat_o @[motor_top.scala 65:29]
    io.wbs.ack_o <= interlink.io.bus_ack_o @[motor_top.scala 66:29]
    inst pwm of PWM_1 @[motor_top.scala 69:37]
    pwm.clock <= clock
    pwm.reset <= reset
    pwm.io.x_homed <= io.motor_gpio.x_homed @[motor_top.scala 71:29]
    pwm.io.y_homed <= io.motor_gpio.y_homed @[motor_top.scala 72:29]
    pwm.io.reg_val_we <= interlink.io.tmr_val_we @[motor_top.scala 74:29]
    pwm.io.reg_val_di <= io.wbs.m2s.data @[motor_top.scala 75:29]
    interlink.io.tmr_val_do <= pwm.io.reg_val_do @[motor_top.scala 76:29]
    pwm.io.reg_cfg_we <= interlink.io.tmr_cfg_we @[motor_top.scala 78:29]
    pwm.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 79:29]
    interlink.io.tmr_cfg_do <= pwm.io.reg_cfg_do @[motor_top.scala 80:29]
    pwm.io.reg_step_we <= interlink.io.tmr_step_we @[motor_top.scala 82:29]
    pwm.io.reg_step_di <= io.wbs.m2s.data @[motor_top.scala 83:29]
    interlink.io.tmr_step_do <= pwm.io.reg_step_do @[motor_top.scala 84:29]
    pwm.io.reg_dat_we <= interlink.io.tmr_dat_we @[motor_top.scala 86:29]
    pwm.io.reg_dat_di <= io.wbs.m2s.data @[motor_top.scala 87:29]
    interlink.io.tmr_dat_do <= pwm.io.reg_dat_do @[motor_top.scala 88:29]
    pwm.io.reg_duty_we <= interlink.io.tmr_duty_we @[motor_top.scala 89:29]
    pwm.io.reg_duty_di <= io.wbs.m2s.data @[motor_top.scala 90:29]
    interlink.io.tmr_duty_do <= pwm.io.reg_duty_do @[motor_top.scala 91:29]
    node _io_motor_gpio_step1step_T = bits(pwm.io.reg_step_do, 5, 5) @[motor_top.scala 93:50]
    io.motor_gpio.step1step <= _io_motor_gpio_step1step_T @[motor_top.scala 93:29]
    node _io_motor_gpio_step1dir_T = bits(pwm.io.reg_step_do, 4, 4) @[motor_top.scala 94:50]
    io.motor_gpio.step1dir <= _io_motor_gpio_step1dir_T @[motor_top.scala 94:29]
    node _io_motor_gpio_step2step_T = bits(pwm.io.reg_step_do, 3, 3) @[motor_top.scala 95:50]
    io.motor_gpio.step2step <= _io_motor_gpio_step2step_T @[motor_top.scala 95:29]
    node _io_motor_gpio_step2dir_T = bits(pwm.io.reg_step_do, 2, 2) @[motor_top.scala 96:50]
    io.motor_gpio.step2dir <= _io_motor_gpio_step2dir_T @[motor_top.scala 96:29]
    wire pid_out : SInt<16> @[motor_top.scala 99:35]
    pwm.io.reg_pid_out <= pid_out @[motor_top.scala 101:29]
    io.motor_irq <= pwm.io.irq_out @[motor_top.scala 102:29]
    io.motor_gpio.pwm_high <= pwm.io.pwm_h @[motor_top.scala 105:29]
    io.motor_gpio.pwm_low <= pwm.io.pwm_l @[motor_top.scala 106:29]
    inst qei of Quad_Encoder_1 @[motor_top.scala 110:37]
    qei.clock <= clock
    qei.reset <= reset
    qei.io.quad_a <= io.motor_gpio.qei_ch_a @[motor_top.scala 111:29]
    qei.io.quad_b <= io.motor_gpio.qei_ch_b @[motor_top.scala 112:29]
    qei.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 113:29]
    qei.io.reg_count_we <= interlink.io.qei_count_we @[motor_top.scala 115:29]
    qei.io.reg_count_di <= io.wbs.m2s.data @[motor_top.scala 116:29]
    interlink.io.qei_count_do <= qei.io.reg_count_do @[motor_top.scala 117:29]
    qei.io.reg_cfg_we <= interlink.io.qei_cfg_we @[motor_top.scala 119:29]
    qei.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 120:29]
    interlink.io.qei_cfg_do <= qei.io.reg_cfg_do @[motor_top.scala 121:29]
    interlink.io.qei_speed_do <= qei.io.reg_speed_do @[motor_top.scala 123:29]
    inst pid of PID_Controller_1 @[motor_top.scala 126:37]
    pid.clock <= clock
    pid.reset <= reset
    pid.io.fb_period <= qei.io.fb_period @[motor_top.scala 127:29]
    pid.io.speed_fb_in <= qei.io.reg_speed_do @[motor_top.scala 128:29]
    pid.io.reg_kp_we <= interlink.io.pid_kp_we @[motor_top.scala 130:29]
    node _pid_io_reg_kp_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 131:41]
    node _pid_io_reg_kp_di_T_1 = asSInt(_pid_io_reg_kp_di_T) @[motor_top.scala 131:53]
    pid.io.reg_kp_di <= _pid_io_reg_kp_di_T_1 @[motor_top.scala 131:29]
    interlink.io.pid_kp_do <= pid.io.reg_kp_do @[motor_top.scala 132:29]
    pid.io.reg_ki_we <= interlink.io.pid_ki_we @[motor_top.scala 134:29]
    node _pid_io_reg_ki_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 135:41]
    node _pid_io_reg_ki_di_T_1 = asSInt(_pid_io_reg_ki_di_T) @[motor_top.scala 135:53]
    pid.io.reg_ki_di <= _pid_io_reg_ki_di_T_1 @[motor_top.scala 135:29]
    interlink.io.pid_ki_do <= pid.io.reg_ki_do @[motor_top.scala 136:29]
    pid.io.reg_kd_we <= interlink.io.pid_kd_we @[motor_top.scala 138:29]
    node _pid_io_reg_kd_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 139:41]
    node _pid_io_reg_kd_di_T_1 = asSInt(_pid_io_reg_kd_di_T) @[motor_top.scala 139:53]
    pid.io.reg_kd_di <= _pid_io_reg_kd_di_T_1 @[motor_top.scala 139:29]
    interlink.io.pid_kd_do <= pid.io.reg_kd_do @[motor_top.scala 140:29]
    pid.io.reg_ref_we <= interlink.io.pid_ref_we @[motor_top.scala 142:29]
    node _pid_io_reg_ref_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 143:41]
    node _pid_io_reg_ref_di_T_1 = asSInt(_pid_io_reg_ref_di_T) @[motor_top.scala 143:54]
    pid.io.reg_ref_di <= _pid_io_reg_ref_di_T_1 @[motor_top.scala 143:29]
    interlink.io.pid_ref_do <= pid.io.reg_ref_do @[motor_top.scala 144:29]
    pid.io.reg_fb_we <= interlink.io.pid_fb_we @[motor_top.scala 146:29]
    node _pid_io_reg_fb_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 147:41]
    node _pid_io_reg_fb_di_T_1 = asSInt(_pid_io_reg_fb_di_T) @[motor_top.scala 147:54]
    pid.io.reg_fb_di <= _pid_io_reg_fb_di_T_1 @[motor_top.scala 147:29]
    interlink.io.pid_fb_do <= pid.io.reg_fb_do @[motor_top.scala 148:29]
    pid.io.reg_cfg_we <= interlink.io.pid_cfg_we @[motor_top.scala 150:29]
    node _pid_io_reg_cfg_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 151:41]
    node _pid_io_reg_cfg_di_T_1 = asSInt(_pid_io_reg_cfg_di_T) @[motor_top.scala 151:54]
    pid.io.reg_cfg_di <= _pid_io_reg_cfg_di_T_1 @[motor_top.scala 151:29]
    interlink.io.pid_cfg_do <= pid.io.reg_cfg_do @[motor_top.scala 152:29]
    pid_out <= pid.io.pid_out @[motor_top.scala 154:29]
    pid.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 155:29]

  module Interlink_Module_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip bus_adr_i : UInt<32>, flip bus_sel_i : UInt<4>, flip bus_we_i : UInt<1>, flip bus_cyc_i : UInt<1>, flip bus_stb_i : UInt<1>, bus_ack_o : UInt<1>, bus_dat_o : UInt<32>, tmr_val_we : UInt<1>, flip tmr_val_do : UInt<32>, tmr_dat_we : UInt<1>, flip tmr_dat_do : UInt<32>, tmr_duty_we : UInt<1>, flip tmr_duty_do : UInt<32>, tmr_cfg_we : UInt<1>, flip tmr_cfg_do : UInt<32>, tmr_step_we : UInt<1>, flip tmr_step_do : UInt<32>, qei_count_we : UInt<1>, flip qei_count_do : UInt<32>, qei_cfg_we : UInt<1>, flip qei_cfg_do : UInt<32>, flip qei_speed_do : SInt<16>, pid_kp_we : UInt<1>, flip pid_kp_do : SInt<16>, pid_ki_we : UInt<1>, flip pid_ki_do : SInt<16>, pid_kd_we : UInt<1>, flip pid_kd_do : SInt<16>, pid_ref_we : UInt<1>, flip pid_ref_do : SInt<16>, pid_fb_we : UInt<1>, flip pid_fb_do : SInt<16>, pid_cfg_we : UInt<1>, flip pid_cfg_do : SInt<16>, flip motor_select : UInt<1>}

    node _bus_valid_T = and(io.bus_stb_i, io.bus_cyc_i) @[interlink.scala 92:53]
    wire bus_valid : UInt<1>
    bus_valid <= _bus_valid_T
    wire tmr_cfg_do : UInt<32> @[interlink.scala 95:27]
    wire tmr_step_do : UInt<32> @[interlink.scala 96:27]
    wire tmr_val_do : UInt<32> @[interlink.scala 97:27]
    wire tmr_dat_do : UInt<32> @[interlink.scala 98:27]
    wire tmr_duty_do : UInt<32> @[interlink.scala 99:27]
    node reg_offset = bits(io.bus_adr_i, 11, 0) @[interlink.scala 102:35]
    node _tmr_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 104:50]
    node _tmr_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h0")) @[interlink.scala 104:81]
    node _tmr_cfg_sel_T_2 = and(_tmr_cfg_sel_T, _tmr_cfg_sel_T_1) @[interlink.scala 104:66]
    wire tmr_cfg_sel : UInt<1>
    tmr_cfg_sel <= _tmr_cfg_sel_T_2
    node _tmr_val_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 105:50]
    node _tmr_val_sel_T_1 = eq(reg_offset, UInt<12>("h4")) @[interlink.scala 105:81]
    node _tmr_val_sel_T_2 = and(_tmr_val_sel_T, _tmr_val_sel_T_1) @[interlink.scala 105:66]
    wire tmr_val_sel : UInt<1>
    tmr_val_sel <= _tmr_val_sel_T_2
    node _tmr_dat_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 106:50]
    node _tmr_dat_sel_T_1 = eq(reg_offset, UInt<12>("h8")) @[interlink.scala 106:81]
    node _tmr_dat_sel_T_2 = and(_tmr_dat_sel_T, _tmr_dat_sel_T_1) @[interlink.scala 106:66]
    wire tmr_dat_sel : UInt<1>
    tmr_dat_sel <= _tmr_dat_sel_T_2
    node _tmr_duty_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 107:50]
    node _tmr_duty_sel_T_1 = eq(reg_offset, UInt<12>("hc")) @[interlink.scala 107:81]
    node _tmr_duty_sel_T_2 = and(_tmr_duty_sel_T, _tmr_duty_sel_T_1) @[interlink.scala 107:66]
    wire tmr_duty_sel : UInt<1>
    tmr_duty_sel <= _tmr_duty_sel_T_2
    node _tmr_step_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 108:50]
    node _tmr_step_sel_T_1 = eq(reg_offset, UInt<12>("h10")) @[interlink.scala 108:81]
    node _tmr_step_sel_T_2 = and(_tmr_step_sel_T, _tmr_step_sel_T_1) @[interlink.scala 108:66]
    wire tmr_step_sel : UInt<1>
    tmr_step_sel <= _tmr_step_sel_T_2
    node _tmr_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 110:72]
    node _tmr_cfg_we_T_1 = and(_tmr_cfg_we_T, io.bus_we_i) @[interlink.scala 110:76]
    node _tmr_cfg_we_T_2 = mux(tmr_cfg_sel, _tmr_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 110:43]
    wire tmr_cfg_we : UInt<1>
    tmr_cfg_we <= _tmr_cfg_we_T_2
    node _tmr_val_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 111:72]
    node _tmr_val_we_T_1 = and(_tmr_val_we_T, io.bus_we_i) @[interlink.scala 111:76]
    node _tmr_val_we_T_2 = mux(tmr_val_sel, _tmr_val_we_T_1, UInt<1>("h0")) @[interlink.scala 111:43]
    wire tmr_val_we : UInt<1>
    tmr_val_we <= _tmr_val_we_T_2
    node _tmr_dat_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 112:72]
    node _tmr_dat_we_T_1 = and(_tmr_dat_we_T, io.bus_we_i) @[interlink.scala 112:76]
    node _tmr_dat_we_T_2 = mux(tmr_dat_sel, _tmr_dat_we_T_1, UInt<1>("h0")) @[interlink.scala 112:43]
    wire tmr_dat_we : UInt<1>
    tmr_dat_we <= _tmr_dat_we_T_2
    node _tmr_duty_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 113:73]
    node _tmr_duty_we_T_1 = and(_tmr_duty_we_T, io.bus_we_i) @[interlink.scala 113:77]
    node _tmr_duty_we_T_2 = mux(tmr_duty_sel, _tmr_duty_we_T_1, UInt<1>("h0")) @[interlink.scala 113:43]
    wire tmr_duty_we : UInt<1>
    tmr_duty_we <= _tmr_duty_we_T_2
    node _tmr_step_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 114:73]
    node _tmr_step_we_T_1 = and(_tmr_step_we_T, io.bus_we_i) @[interlink.scala 114:77]
    node _tmr_step_we_T_2 = mux(tmr_step_sel, _tmr_step_we_T_1, UInt<1>("h0")) @[interlink.scala 114:43]
    wire tmr_step_we : UInt<1>
    tmr_step_we <= _tmr_step_we_T_2
    node _reg_dat_re_T = neq(io.bus_sel_i, UInt<1>("h0")) @[interlink.scala 116:71]
    node _reg_dat_re_T_1 = eq(_reg_dat_re_T, UInt<1>("h0")) @[interlink.scala 116:56]
    node _reg_dat_re_T_2 = and(tmr_dat_sel, _reg_dat_re_T_1) @[interlink.scala 116:52]
    node _reg_dat_re_T_3 = not(io.bus_we_i) @[interlink.scala 116:84]
    node _reg_dat_re_T_4 = and(_reg_dat_re_T_2, _reg_dat_re_T_3) @[interlink.scala 116:80]
    wire reg_dat_re : UInt<1>
    reg_dat_re <= _reg_dat_re_T_4
    node _tmr_sel_T = or(tmr_cfg_sel, tmr_val_sel) @[interlink.scala 118:35]
    node _tmr_sel_T_1 = or(_tmr_sel_T, tmr_dat_sel) @[interlink.scala 118:50]
    node _tmr_sel_T_2 = or(_tmr_sel_T_1, tmr_duty_sel) @[interlink.scala 118:65]
    node tmr_sel = or(_tmr_sel_T_2, tmr_step_sel) @[interlink.scala 118:81]
    node _tmr_do_T = mux(tmr_step_sel, tmr_step_do, tmr_dat_do) @[interlink.scala 120:57]
    node _tmr_do_T_1 = mux(tmr_duty_sel, tmr_duty_do, _tmr_do_T) @[interlink.scala 120:26]
    node _tmr_do_T_2 = mux(tmr_val_sel, tmr_val_do, _tmr_do_T_1) @[interlink.scala 119:57]
    node tmr_do = mux(tmr_cfg_sel, tmr_cfg_do, _tmr_do_T_2) @[interlink.scala 119:26]
    wire qei_count_do : UInt<32> @[interlink.scala 123:27]
    node _qei_count_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 124:50]
    node _qei_count_sel_T_1 = eq(reg_offset, UInt<12>("h100")) @[interlink.scala 124:81]
    node _qei_count_sel_T_2 = and(_qei_count_sel_T, _qei_count_sel_T_1) @[interlink.scala 124:66]
    wire qei_count_sel : UInt<1>
    qei_count_sel <= _qei_count_sel_T_2
    node _qei_count_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 125:74]
    node _qei_count_we_T_1 = and(_qei_count_we_T, io.bus_we_i) @[interlink.scala 125:78]
    node _qei_count_we_T_2 = mux(qei_count_sel, _qei_count_we_T_1, UInt<1>("h0")) @[interlink.scala 125:43]
    wire qei_count_we : UInt<1>
    qei_count_we <= _qei_count_we_T_2
    wire qei_cfg_do : UInt<32> @[interlink.scala 127:27]
    node _qei_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 128:50]
    node _qei_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h108")) @[interlink.scala 128:81]
    node _qei_cfg_sel_T_2 = and(_qei_cfg_sel_T, _qei_cfg_sel_T_1) @[interlink.scala 128:66]
    wire qei_cfg_sel : UInt<1>
    qei_cfg_sel <= _qei_cfg_sel_T_2
    node _qei_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 129:72]
    node _qei_cfg_we_T_1 = and(_qei_cfg_we_T, io.bus_we_i) @[interlink.scala 129:76]
    node _qei_cfg_we_T_2 = mux(qei_cfg_sel, _qei_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 129:43]
    wire qei_cfg_we : UInt<1>
    qei_cfg_we <= _qei_cfg_we_T_2
    wire qei_speed_do : UInt<32> @[interlink.scala 131:27]
    node _qei_speed_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 132:50]
    node _qei_speed_sel_T_1 = eq(reg_offset, UInt<12>("h104")) @[interlink.scala 132:81]
    node _qei_speed_sel_T_2 = and(_qei_speed_sel_T, _qei_speed_sel_T_1) @[interlink.scala 132:66]
    wire qei_speed_sel : UInt<1>
    qei_speed_sel <= _qei_speed_sel_T_2
    node _qei_speed_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 133:74]
    node _qei_speed_we_T_1 = and(_qei_speed_we_T, io.bus_we_i) @[interlink.scala 133:78]
    node _qei_speed_we_T_2 = mux(qei_speed_sel, _qei_speed_we_T_1, UInt<1>("h0")) @[interlink.scala 133:43]
    wire qei_speed_we : UInt<1>
    qei_speed_we <= _qei_speed_we_T_2
    node _qei_sel_T = or(qei_count_sel, qei_cfg_sel) @[interlink.scala 136:37]
    node qei_sel = or(_qei_sel_T, qei_speed_sel) @[interlink.scala 136:52]
    node _qei_do_T = mux(qei_cfg_sel, qei_cfg_do, qei_count_do) @[interlink.scala 137:59]
    node qei_do = mux(qei_speed_sel, qei_speed_do, _qei_do_T) @[interlink.scala 137:26]
    wire pid_kp_do : SInt<16> @[interlink.scala 140:27]
    node _pid_kp_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 141:50]
    node _pid_kp_sel_T_1 = eq(reg_offset, UInt<12>("h200")) @[interlink.scala 141:81]
    node _pid_kp_sel_T_2 = and(_pid_kp_sel_T, _pid_kp_sel_T_1) @[interlink.scala 141:66]
    wire pid_kp_sel : UInt<1>
    pid_kp_sel <= _pid_kp_sel_T_2
    node _pid_kp_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 142:71]
    node _pid_kp_we_T_1 = and(_pid_kp_we_T, io.bus_we_i) @[interlink.scala 142:75]
    node _pid_kp_we_T_2 = mux(pid_kp_sel, _pid_kp_we_T_1, UInt<1>("h0")) @[interlink.scala 142:43]
    wire pid_kp_we : UInt<1>
    pid_kp_we <= _pid_kp_we_T_2
    wire pid_ki_do : SInt<16> @[interlink.scala 144:27]
    node _pid_ki_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 145:50]
    node _pid_ki_sel_T_1 = eq(reg_offset, UInt<12>("h204")) @[interlink.scala 145:81]
    node _pid_ki_sel_T_2 = and(_pid_ki_sel_T, _pid_ki_sel_T_1) @[interlink.scala 145:66]
    wire pid_ki_sel : UInt<1>
    pid_ki_sel <= _pid_ki_sel_T_2
    node _pid_ki_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 146:71]
    node _pid_ki_we_T_1 = and(_pid_ki_we_T, io.bus_we_i) @[interlink.scala 146:75]
    node _pid_ki_we_T_2 = mux(pid_ki_sel, _pid_ki_we_T_1, UInt<1>("h0")) @[interlink.scala 146:43]
    wire pid_ki_we : UInt<1>
    pid_ki_we <= _pid_ki_we_T_2
    wire pid_kd_do : SInt<16> @[interlink.scala 148:27]
    node _pid_kd_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 149:50]
    node _pid_kd_sel_T_1 = eq(reg_offset, UInt<12>("h208")) @[interlink.scala 149:81]
    node _pid_kd_sel_T_2 = and(_pid_kd_sel_T, _pid_kd_sel_T_1) @[interlink.scala 149:66]
    wire pid_kd_sel : UInt<1>
    pid_kd_sel <= _pid_kd_sel_T_2
    node _pid_kd_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 150:71]
    node _pid_kd_we_T_1 = and(_pid_kd_we_T, io.bus_we_i) @[interlink.scala 150:75]
    node _pid_kd_we_T_2 = mux(pid_kd_sel, _pid_kd_we_T_1, UInt<1>("h0")) @[interlink.scala 150:43]
    wire pid_kd_we : UInt<1>
    pid_kd_we <= _pid_kd_we_T_2
    wire pid_ref_do : SInt<16> @[interlink.scala 152:27]
    node _pid_ref_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 153:50]
    node _pid_ref_sel_T_1 = eq(reg_offset, UInt<12>("h20c")) @[interlink.scala 153:81]
    node _pid_ref_sel_T_2 = and(_pid_ref_sel_T, _pid_ref_sel_T_1) @[interlink.scala 153:66]
    wire pid_ref_sel : UInt<1>
    pid_ref_sel <= _pid_ref_sel_T_2
    node _pid_ref_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 154:72]
    node _pid_ref_we_T_1 = and(_pid_ref_we_T, io.bus_we_i) @[interlink.scala 154:76]
    node _pid_ref_we_T_2 = mux(pid_ref_sel, _pid_ref_we_T_1, UInt<1>("h0")) @[interlink.scala 154:43]
    wire pid_ref_we : UInt<1>
    pid_ref_we <= _pid_ref_we_T_2
    wire pid_fb_do : SInt<16> @[interlink.scala 156:27]
    node _pid_fb_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 157:50]
    node _pid_fb_sel_T_1 = eq(reg_offset, UInt<12>("h210")) @[interlink.scala 157:81]
    node _pid_fb_sel_T_2 = and(_pid_fb_sel_T, _pid_fb_sel_T_1) @[interlink.scala 157:66]
    wire pid_fb_sel : UInt<1>
    pid_fb_sel <= _pid_fb_sel_T_2
    node _pid_fb_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 158:71]
    node _pid_fb_we_T_1 = and(_pid_fb_we_T, io.bus_we_i) @[interlink.scala 158:75]
    node _pid_fb_we_T_2 = mux(pid_fb_sel, _pid_fb_we_T_1, UInt<1>("h0")) @[interlink.scala 158:43]
    wire pid_fb_we : UInt<1>
    pid_fb_we <= _pid_fb_we_T_2
    wire pid_cfg_do : SInt<16> @[interlink.scala 160:27]
    node _pid_cfg_sel_T = and(bus_valid, io.motor_select) @[interlink.scala 161:50]
    node _pid_cfg_sel_T_1 = eq(reg_offset, UInt<12>("h214")) @[interlink.scala 161:81]
    node _pid_cfg_sel_T_2 = and(_pid_cfg_sel_T, _pid_cfg_sel_T_1) @[interlink.scala 161:66]
    wire pid_cfg_sel : UInt<1>
    pid_cfg_sel <= _pid_cfg_sel_T_2
    node _pid_cfg_we_T = bits(io.bus_sel_i, 0, 0) @[interlink.scala 162:72]
    node _pid_cfg_we_T_1 = and(_pid_cfg_we_T, io.bus_we_i) @[interlink.scala 162:76]
    node _pid_cfg_we_T_2 = mux(pid_cfg_sel, _pid_cfg_we_T_1, UInt<1>("h0")) @[interlink.scala 162:43]
    wire pid_cfg_we : UInt<1>
    pid_cfg_we <= _pid_cfg_we_T_2
    node _pid_sel_T = or(pid_kp_sel, pid_ki_sel) @[interlink.scala 164:34]
    node _pid_sel_T_1 = or(_pid_sel_T, pid_kd_sel) @[interlink.scala 164:48]
    node _pid_sel_T_2 = or(_pid_sel_T_1, pid_ref_sel) @[interlink.scala 164:62]
    node _pid_sel_T_3 = or(_pid_sel_T_2, pid_fb_sel) @[interlink.scala 164:77]
    node pid_sel = or(_pid_sel_T_3, pid_cfg_sel) @[interlink.scala 164:91]
    node _pid_do_T = mux(pid_fb_sel, pid_fb_do, pid_cfg_do) @[interlink.scala 168:46]
    node _pid_do_T_1 = mux(pid_ref_sel, pid_ref_do, _pid_do_T) @[interlink.scala 167:46]
    node _pid_do_T_2 = mux(pid_kd_sel, pid_kd_do, _pid_do_T_1) @[interlink.scala 166:46]
    node _pid_do_T_3 = mux(pid_ki_sel, pid_ki_do, _pid_do_T_2) @[interlink.scala 165:53]
    node pid_do = mux(pid_kp_sel, pid_kp_do, _pid_do_T_3) @[interlink.scala 165:26]
    reg wb_ack_o : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[interlink.scala 171:30]
    reg wb_data_o : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[interlink.scala 172:30]
    node _wb_data_o_T = asUInt(pid_do) @[interlink.scala 173:92]
    node _wb_data_o_T_1 = mux(pid_sel, _wb_data_o_T, UInt<1>("h0")) @[interlink.scala 173:69]
    node _wb_data_o_T_2 = mux(qei_sel, qei_do, _wb_data_o_T_1) @[interlink.scala 173:48]
    node _wb_data_o_T_3 = mux(tmr_sel, tmr_do, _wb_data_o_T_2) @[interlink.scala 173:27]
    wb_data_o <= _wb_data_o_T_3 @[interlink.scala 173:21]
    node _wb_ack_o_T = or(tmr_sel, qei_sel) @[interlink.scala 174:32]
    node _wb_ack_o_T_1 = or(_wb_ack_o_T, pid_sel) @[interlink.scala 174:43]
    wb_ack_o <= _wb_ack_o_T_1 @[interlink.scala 174:21]
    io.bus_dat_o <= wb_data_o @[interlink.scala 176:21]
    io.bus_ack_o <= wb_ack_o @[interlink.scala 177:21]
    io.tmr_val_we <= tmr_val_we @[interlink.scala 180:21]
    tmr_val_do <= io.tmr_val_do @[interlink.scala 181:21]
    io.tmr_dat_we <= tmr_dat_we @[interlink.scala 182:21]
    tmr_dat_do <= io.tmr_dat_do @[interlink.scala 183:21]
    io.tmr_duty_we <= tmr_duty_we @[interlink.scala 184:21]
    tmr_duty_do <= io.tmr_duty_do @[interlink.scala 185:21]
    io.tmr_cfg_we <= tmr_cfg_we @[interlink.scala 186:21]
    tmr_cfg_do <= io.tmr_cfg_do @[interlink.scala 187:21]
    io.tmr_step_we <= tmr_step_we @[interlink.scala 188:21]
    tmr_step_do <= io.tmr_step_do @[interlink.scala 189:21]
    io.qei_count_we <= qei_count_we @[interlink.scala 191:21]
    qei_count_do <= io.qei_count_do @[interlink.scala 192:21]
    io.qei_cfg_we <= qei_cfg_we @[interlink.scala 193:21]
    qei_cfg_do <= io.qei_cfg_do @[interlink.scala 194:21]
    node _qei_speed_do_T = asUInt(io.qei_speed_do) @[interlink.scala 195:46]
    qei_speed_do <= _qei_speed_do_T @[interlink.scala 195:21]
    io.pid_kp_we <= pid_kp_we @[interlink.scala 197:21]
    pid_kp_do <= io.pid_kp_do @[interlink.scala 198:21]
    io.pid_ki_we <= pid_ki_we @[interlink.scala 199:21]
    pid_ki_do <= io.pid_ki_do @[interlink.scala 200:21]
    io.pid_kd_we <= pid_kd_we @[interlink.scala 201:21]
    pid_kd_do <= io.pid_kd_do @[interlink.scala 202:21]
    io.pid_ref_we <= pid_ref_we @[interlink.scala 203:21]
    pid_ref_do <= io.pid_ref_do @[interlink.scala 204:21]
    io.pid_fb_we <= pid_fb_we @[interlink.scala 205:21]
    pid_fb_do <= io.pid_fb_do @[interlink.scala 206:21]
    io.pid_cfg_we <= pid_cfg_we @[interlink.scala 207:21]
    pid_cfg_do <= io.pid_cfg_do @[interlink.scala 208:21]

  module PWM_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip reg_val_we : UInt<1>, flip reg_val_di : UInt<32>, reg_val_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, flip reg_dat_we : UInt<1>, flip reg_dat_di : UInt<32>, reg_dat_do : UInt<32>, flip reg_duty_we : UInt<1>, flip reg_duty_di : UInt<32>, reg_duty_do : UInt<32>, flip reg_step_we : UInt<1>, flip reg_step_di : UInt<32>, reg_step_do : UInt<32>, flip reg_pid_out : SInt<16>, pwm_h : UInt<1>, pwm_l : UInt<1>, irq_out : UInt<1>, rawirq_out : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>}

    reg value_cur : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 51:32]
    reg value_reload : UInt<32>, clock with :
      reset => (reset, UInt<8>("hff")) @[pwm.scala 52:32]
    reg pwm_duty : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 53:32]
    reg reg_duty : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 54:32]
    wire value_cur_plus : UInt<32> @[pwm.scala 56:29]
    wire value_cur_minus : UInt<32> @[pwm.scala 57:29]
    wire loc_enable : UInt<1> @[pwm.scala 59:29]
    reg enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 60:32]
    reg stop_out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 62:32]
    reg irq_out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 63:32]
    reg lastenable : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastenable) @[pwm.scala 66:28]
    reg updown : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 69:32]
    reg irq_ena : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 72:32]
    reg pid_out_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pwm.scala 75:32]
    reg pwm_db : UInt<4>, clock with :
      reset => (reset, UInt<2>("h2")) @[pwm.scala 78:32]
    reg step1step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 81:32]
    reg step1dir : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 82:32]
    reg step2step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 83:32]
    reg step2dir : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[pwm.scala 84:32]
    io.reg_duty_do <= pwm_duty @[pwm.scala 87:23]
    when io.reg_duty_we : @[pwm.scala 88:24]
      reg_duty <= io.reg_duty_di @[pwm.scala 89:14]
    node io_reg_step_do_lo_hi = cat(step2dir, io.x_homed) @[Cat.scala 33:92]
    node io_reg_step_do_lo = cat(io_reg_step_do_lo_hi, io.y_homed) @[Cat.scala 33:92]
    node io_reg_step_do_hi_lo = cat(step1dir, step2step) @[Cat.scala 33:92]
    node io_reg_step_do_hi_hi = cat(UInt<26>("h0"), step1step) @[Cat.scala 33:92]
    node io_reg_step_do_hi = cat(io_reg_step_do_hi_hi, io_reg_step_do_hi_lo) @[Cat.scala 33:92]
    node _io_reg_step_do_T = cat(io_reg_step_do_hi, io_reg_step_do_lo) @[Cat.scala 33:92]
    io.reg_step_do <= _io_reg_step_do_T @[pwm.scala 92:23]
    when io.reg_step_we : @[pwm.scala 93:24]
      node _step1step_T = bits(io.reg_cfg_di, 5, 5) @[pwm.scala 94:39]
      step1step <= _step1step_T @[pwm.scala 94:23]
      node _step1dir_T = bits(io.reg_cfg_di, 4, 4) @[pwm.scala 95:39]
      step1dir <= _step1dir_T @[pwm.scala 95:23]
      node _step2step_T = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 96:39]
      step2step <= _step2step_T @[pwm.scala 96:23]
      node _step2dir_T = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 97:39]
      step2dir <= _step2dir_T @[pwm.scala 97:23]
    when stop_out : @[pwm.scala 100:18]
      when pid_out_sel : @[pwm.scala 101:22]
        node _pwm_duty_T = asUInt(io.reg_pid_out) @[pwm.scala 102:40]
        pwm_duty <= _pwm_duty_T @[pwm.scala 102:16]
      else :
        pwm_duty <= reg_duty @[pwm.scala 104:16]
    reg proc_offset : UInt<32>, clock with :
      reset => (UInt<1>("h0"), proc_offset) @[pwm.scala 108:24]
    reg pwm_ld : UInt<1>, clock with :
      reset => (UInt<1>("h0"), pwm_ld) @[pwm.scala 109:24]
    reg pwm_hd : UInt<1>, clock with :
      reset => (UInt<1>("h0"), pwm_hd) @[pwm.scala 110:24]
    node pwm_db_twice = dshl(pwm_db, UInt<1>("h1")) @[pwm.scala 113:30]
    node _proc_offset_T = geq(pwm_duty, pwm_db_twice) @[pwm.scala 115:37]
    node _proc_offset_T_1 = sub(value_reload, pwm_db_twice) @[pwm.scala 115:84]
    node _proc_offset_T_2 = tail(_proc_offset_T_1, 1) @[pwm.scala 115:84]
    node _proc_offset_T_3 = leq(pwm_duty, _proc_offset_T_2) @[pwm.scala 115:67]
    node _proc_offset_T_4 = and(_proc_offset_T, _proc_offset_T_3) @[pwm.scala 115:54]
    node _proc_offset_T_5 = lt(pwm_duty, pwm_db_twice) @[pwm.scala 116:36]
    node _proc_offset_T_6 = sub(value_reload, pwm_db_twice) @[pwm.scala 116:80]
    node _proc_offset_T_7 = tail(_proc_offset_T_6, 1) @[pwm.scala 116:80]
    node _proc_offset_T_8 = mux(_proc_offset_T_5, pwm_db_twice, _proc_offset_T_7) @[pwm.scala 116:26]
    node _proc_offset_T_9 = mux(_proc_offset_T_4, pwm_duty, _proc_offset_T_8) @[pwm.scala 115:26]
    proc_offset <= _proc_offset_T_9 @[pwm.scala 115:20]
    node _pwm_hd_T = sub(proc_offset, pwm_db) @[pwm.scala 117:48]
    node _pwm_hd_T_1 = tail(_pwm_hd_T, 1) @[pwm.scala 117:48]
    node _pwm_hd_T_2 = lt(value_cur, _pwm_hd_T_1) @[pwm.scala 117:33]
    pwm_hd <= _pwm_hd_T_2 @[pwm.scala 117:20]
    node _pwm_ld_T = gt(value_cur, proc_offset) @[pwm.scala 118:34]
    node _pwm_ld_T_1 = sub(value_reload, pwm_db) @[pwm.scala 118:79]
    node _pwm_ld_T_2 = tail(_pwm_ld_T_1, 1) @[pwm.scala 118:79]
    node _pwm_ld_T_3 = lt(value_cur, _pwm_ld_T_2) @[pwm.scala 118:63]
    node _pwm_ld_T_4 = and(_pwm_ld_T, _pwm_ld_T_3) @[pwm.scala 118:49]
    pwm_ld <= _pwm_ld_T_4 @[pwm.scala 118:20]
    node _io_pwm_h_T = and(pwm_hd, enable) @[pwm.scala 119:30]
    io.pwm_h <= _io_pwm_h_T @[pwm.scala 119:20]
    node _io_pwm_l_T = and(pwm_ld, enable) @[pwm.scala 120:30]
    io.pwm_l <= _io_pwm_l_T @[pwm.scala 120:20]
    io.irq_out <= irq_out @[pwm.scala 123:20]
    node _io_rawirq_out_T = not(irq_out) @[pwm.scala 124:34]
    node _io_rawirq_out_T_1 = and(stop_out, _io_rawirq_out_T) @[pwm.scala 124:32]
    io.rawirq_out <= _io_rawirq_out_T_1 @[pwm.scala 124:20]
    node _io_reg_cfg_do_T = bits(pwm_db, 3, 0) @[pwm.scala 127:44]
    node io_reg_cfg_do_lo_hi = cat(irq_ena, updown) @[Cat.scala 33:92]
    node io_reg_cfg_do_lo = cat(io_reg_cfg_do_lo_hi, enable) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi_hi = cat(UInt<24>("h0"), _io_reg_cfg_do_T) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi = cat(io_reg_cfg_do_hi_hi, pid_out_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T_1 = cat(io_reg_cfg_do_hi, io_reg_cfg_do_lo) @[Cat.scala 33:92]
    io.reg_cfg_do <= _io_reg_cfg_do_T_1 @[pwm.scala 127:20]
    when io.reg_cfg_we : @[pwm.scala 128:23]
      node _enable_T = bits(io.reg_cfg_di, 0, 0) @[pwm.scala 129:35]
      enable <= _enable_T @[pwm.scala 129:19]
      node _updown_T = bits(io.reg_cfg_di, 1, 1) @[pwm.scala 130:35]
      updown <= _updown_T @[pwm.scala 130:19]
      node _irq_ena_T = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 131:35]
      irq_ena <= _irq_ena_T @[pwm.scala 131:19]
      node _pid_out_sel_T = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 132:35]
      pid_out_sel <= _pid_out_sel_T @[pwm.scala 132:19]
      node _pwm_db_T = bits(io.reg_cfg_di, 7, 4) @[pwm.scala 133:36]
      node _pwm_db_T_1 = add(_pwm_db_T, UInt<2>("h2")) @[pwm.scala 133:42]
      node _pwm_db_T_2 = tail(_pwm_db_T_1, 1) @[pwm.scala 133:42]
      pwm_db <= _pwm_db_T_2 @[pwm.scala 133:19]
    io.reg_val_do <= value_reload @[pwm.scala 137:19]
    node _T = orr(io.reg_val_we) @[pwm.scala 138:25]
    when _T : @[pwm.scala 138:29]
      value_reload <= io.reg_val_di @[pwm.scala 139:19]
    io.reg_dat_do <= value_cur @[pwm.scala 143:19]
    node _value_cur_plus_T = add(value_cur, UInt<1>("h1")) @[pwm.scala 144:39]
    node _value_cur_plus_T_1 = tail(_value_cur_plus_T, 1) @[pwm.scala 144:39]
    value_cur_plus <= _value_cur_plus_T_1 @[pwm.scala 144:19]
    node _value_cur_minus_T = sub(value_cur, UInt<1>("h1")) @[pwm.scala 145:39]
    node _value_cur_minus_T_1 = tail(_value_cur_minus_T, 1) @[pwm.scala 145:39]
    value_cur_minus <= _value_cur_minus_T_1 @[pwm.scala 145:19]
    loc_enable <= enable @[pwm.scala 146:19]
    lastenable <= loc_enable @[pwm.scala 149:19]
    node _T_1 = orr(io.reg_dat_we) @[pwm.scala 150:25]
    when _T_1 : @[pwm.scala 150:29]
      value_cur <= io.reg_dat_di @[pwm.scala 151:19]
    else :
      node _T_2 = eq(loc_enable, UInt<1>("h1")) @[pwm.scala 152:27]
      when _T_2 : @[pwm.scala 152:39]
        node _irq_out_T = not(irq_out) @[pwm.scala 155:47]
        node _irq_out_T_1 = and(stop_out, _irq_out_T) @[pwm.scala 155:45]
        node _irq_out_T_2 = mux(irq_ena, _irq_out_T_1, UInt<1>("h0")) @[pwm.scala 155:23]
        irq_out <= _irq_out_T_2 @[pwm.scala 155:17]
        node _T_3 = eq(updown, UInt<1>("h1")) @[pwm.scala 157:19]
        when _T_3 : @[pwm.scala 157:31]
          node _T_4 = eq(lastenable, UInt<1>("h0")) @[pwm.scala 158:25]
          when _T_4 : @[pwm.scala 158:38]
            value_cur <= UInt<32>("h0") @[pwm.scala 159:21]
            stop_out <= UInt<1>("h0") @[pwm.scala 160:21]
          else :
            node _T_5 = eq(value_cur, value_reload) @[pwm.scala 163:33]
            when _T_5 : @[pwm.scala 163:58]
              value_cur <= UInt<32>("h0") @[pwm.scala 164:23]
              stop_out <= UInt<1>("h1") @[pwm.scala 165:23]
            else :
              value_cur <= value_cur_plus @[pwm.scala 167:23]
              stop_out <= UInt<1>("h0") @[pwm.scala 168:23]
        else :
          node _T_6 = eq(lastenable, UInt<1>("h0")) @[pwm.scala 173:25]
          when _T_6 : @[pwm.scala 173:38]
            value_cur <= value_reload @[pwm.scala 174:23]
            stop_out <= UInt<1>("h0") @[pwm.scala 175:23]
          else :
            node _T_7 = eq(value_cur, UInt<32>("h0")) @[pwm.scala 178:35]
            when _T_7 : @[pwm.scala 178:50]
              value_cur <= value_reload @[pwm.scala 179:25]
              stop_out <= UInt<1>("h1") @[pwm.scala 180:25]
            else :
              value_cur <= value_cur_minus @[pwm.scala 182:25]
              stop_out <= UInt<1>("h0") @[pwm.scala 183:25]

  module Quad_Encoder_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip quad_a : UInt<1>, flip quad_b : UInt<1>, flip raw_irq : UInt<1>, flip reg_count_we : UInt<1>, flip reg_count_di : UInt<32>, reg_count_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, reg_speed_do : SInt<16>, fb_period : UInt<1>}

    reg quad_a_delayed : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 35:33]
    reg quad_b_delayed : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 36:33]
    reg count_reg : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 37:33]
    reg count_reg_2 : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 38:33]
    reg period_count : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 39:33]
    reg speed_enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[qei.scala 41:33]
    reg count_sel_2x : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[qei.scala 42:33]
    reg count_old : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 43:33]
    reg qei_output : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 44:33]
    reg qei_speed_count : UInt<16>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 45:33]
    reg qei_period_count : UInt<16>, clock with :
      reset => (reset, UInt<13>("h1fff")) @[qei.scala 46:33]
    reg period_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[qei.scala 47:33]
    io.reg_count_do <= count_reg @[qei.scala 49:23]
    node _quad_a_delayed_T = bits(quad_a_delayed, 1, 1) @[qei.scala 51:44]
    node _quad_a_delayed_T_1 = bits(quad_a_delayed, 0, 0) @[qei.scala 51:63]
    node quad_a_delayed_hi = cat(_quad_a_delayed_T, _quad_a_delayed_T_1) @[Cat.scala 33:92]
    node _quad_a_delayed_T_2 = cat(quad_a_delayed_hi, io.quad_a) @[Cat.scala 33:92]
    quad_a_delayed <= _quad_a_delayed_T_2 @[qei.scala 51:23]
    node _quad_b_delayed_T = bits(quad_b_delayed, 1, 1) @[qei.scala 52:44]
    node _quad_b_delayed_T_1 = bits(quad_b_delayed, 0, 0) @[qei.scala 52:63]
    node quad_b_delayed_hi = cat(_quad_b_delayed_T, _quad_b_delayed_T_1) @[Cat.scala 33:92]
    node _quad_b_delayed_T_2 = cat(quad_b_delayed_hi, io.quad_b) @[Cat.scala 33:92]
    quad_b_delayed <= _quad_b_delayed_T_2 @[qei.scala 52:23]
    node _count_2x_T = bits(quad_a_delayed, 1, 1) @[qei.scala 54:57]
    node _count_2x_T_1 = bits(quad_a_delayed, 2, 2) @[qei.scala 54:75]
    node _count_2x_T_2 = xor(_count_2x_T, _count_2x_T_1) @[qei.scala 54:60]
    wire count_2x : UInt<1>
    count_2x <= _count_2x_T_2
    node _count_4x_T = bits(quad_a_delayed, 1, 1) @[qei.scala 55:57]
    node _count_4x_T_1 = bits(quad_a_delayed, 2, 2) @[qei.scala 55:75]
    node _count_4x_T_2 = xor(_count_4x_T, _count_4x_T_1) @[qei.scala 55:60]
    node _count_4x_T_3 = bits(quad_b_delayed, 1, 1) @[qei.scala 55:93]
    node _count_4x_T_4 = xor(_count_4x_T_2, _count_4x_T_3) @[qei.scala 55:78]
    node _count_4x_T_5 = bits(quad_b_delayed, 2, 2) @[qei.scala 55:111]
    node _count_4x_T_6 = xor(_count_4x_T_4, _count_4x_T_5) @[qei.scala 55:96]
    wire count_4x : UInt<1>
    count_4x <= _count_4x_T_6
    node _count_direction_T = bits(quad_a_delayed, 1, 1) @[qei.scala 56:57]
    node _count_direction_T_1 = bits(quad_b_delayed, 2, 2) @[qei.scala 56:75]
    node _count_direction_T_2 = xor(_count_direction_T, _count_direction_T_1) @[qei.scala 56:60]
    wire count_direction : UInt<1>
    count_direction <= _count_direction_T_2
    node count_pulses = mux(count_sel_2x, count_2x, count_4x) @[qei.scala 57:29]
    when count_pulses : @[qei.scala 62:22]
      when count_direction : @[qei.scala 63:27]
        node _count_reg_T = add(count_reg, UInt<1>("h1")) @[qei.scala 64:36]
        node _count_reg_T_1 = tail(_count_reg_T, 1) @[qei.scala 64:36]
        count_reg <= _count_reg_T_1 @[qei.scala 64:23]
      else :
        node _count_reg_T_2 = sub(count_reg, UInt<1>("h1")) @[qei.scala 66:36]
        node _count_reg_T_3 = tail(_count_reg_T_2, 1) @[qei.scala 66:36]
        count_reg <= _count_reg_T_3 @[qei.scala 66:23]
    node _T = or(io.raw_irq, count_pulses) @[qei.scala 71:20]
    when _T : @[qei.scala 71:37]
      when io.raw_irq : @[qei.scala 72:23]
        qei_speed_count <= count_reg_2 @[qei.scala 73:23]
        count_reg_2 <= UInt<1>("h0") @[qei.scala 74:23]
      else :
        node _count_reg_2_T = add(count_reg_2, UInt<1>("h1")) @[qei.scala 76:38]
        node _count_reg_2_T_1 = tail(_count_reg_2_T, 1) @[qei.scala 76:38]
        count_reg_2 <= _count_reg_2_T_1 @[qei.scala 76:23]
    when period_sel : @[qei.scala 81:20]
      when count_pulses : @[qei.scala 82:24]
        qei_period_count <= period_count @[qei.scala 83:24]
        period_count <= UInt<1>("h0") @[qei.scala 84:24]
      else :
        node _T_1 = eq(period_count, UInt<8>("hff")) @[qei.scala 85:29]
        when _T_1 : @[qei.scala 85:40]
          qei_period_count <= period_count @[qei.scala 86:24]
          period_count <= UInt<1>("h0") @[qei.scala 87:24]
        else :
          node _period_count_T = add(period_count, UInt<1>("h1")) @[qei.scala 89:40]
          node _period_count_T_1 = tail(_period_count_T, 1) @[qei.scala 89:40]
          period_count <= _period_count_T_1 @[qei.scala 89:24]
    node _qei_output_T = mux(period_sel, qei_period_count, qei_speed_count) @[qei.scala 94:30]
    qei_output <= _qei_output_T @[qei.scala 94:24]
    node io_reg_cfg_do_lo = cat(speed_enable, count_sel_2x) @[Cat.scala 33:92]
    node io_reg_cfg_do_hi = cat(UInt<29>("h0"), period_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T = cat(io_reg_cfg_do_hi, io_reg_cfg_do_lo) @[Cat.scala 33:92]
    io.reg_cfg_do <= _io_reg_cfg_do_T @[qei.scala 97:24]
    node _io_reg_speed_do_T = bits(qei_output, 15, 0) @[qei.scala 100:37]
    node _io_reg_speed_do_T_1 = asSInt(_io_reg_speed_do_T) @[qei.scala 100:50]
    io.reg_speed_do <= _io_reg_speed_do_T_1 @[qei.scala 100:24]
    io.fb_period <= period_sel @[qei.scala 101:24]
    when io.reg_count_we : @[qei.scala 103:25]
      count_reg <= io.reg_count_di @[qei.scala 104:24]
    else :
      when io.reg_cfg_we : @[qei.scala 105:28]
        node _count_sel_2x_T = bits(io.reg_cfg_di, 0, 0) @[qei.scala 106:40]
        count_sel_2x <= _count_sel_2x_T @[qei.scala 106:24]
        node _speed_enable_T = bits(io.reg_cfg_di, 1, 1) @[qei.scala 107:40]
        speed_enable <= _speed_enable_T @[qei.scala 107:24]
        node _period_sel_T = bits(io.reg_cfg_di, 2, 2) @[qei.scala 108:40]
        period_sel <= _period_sel_T @[qei.scala 108:24]

  module vedic_2x2_312 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_313 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_314 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_315 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_78 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_312 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_313 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_314 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_315 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_316 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_317 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_318 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_319 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_79 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_316 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_317 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_318 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_319 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_320 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_321 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_322 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_323 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_80 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_320 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_321 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_322 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_323 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_324 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_325 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_326 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_327 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_81 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_324 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_325 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_326 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_327 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_78 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_79 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_80 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_81 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_328 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_329 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_330 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_331 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_82 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_328 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_329 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_330 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_331 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_332 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_333 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_334 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_335 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_83 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_332 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_333 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_334 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_335 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_336 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_337 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_338 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_339 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_84 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_336 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_337 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_338 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_339 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_340 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_341 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_342 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_343 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_85 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_340 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_341 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_342 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_343 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_82 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_83 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_84 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_85 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_344 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_345 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_346 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_347 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_86 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_344 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_345 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_346 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_347 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_348 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_349 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_350 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_351 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_87 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_348 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_349 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_350 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_351 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_352 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_353 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_354 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_355 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_88 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_352 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_353 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_354 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_355 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_356 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_357 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_358 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_359 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_89 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_356 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_357 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_358 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_359 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_86 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_87 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_88 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_89 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_360 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_361 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_362 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_363 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_90 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_360 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_361 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_362 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_363 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_18 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_19 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_20 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_90 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module vedic_2x2_364 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_365 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_366 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_367 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_91 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_364 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_365 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_366 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_367 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_368 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_369 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_370 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_371 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_92 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_368 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_369 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_370 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_371 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_372 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_373 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_374 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_375 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_93 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_372 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_373 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_374 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_375 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_376 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_377 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_378 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_379 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_94 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_376 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_377 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_378 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_379 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_91 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_92 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_93 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_94 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_380 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_381 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_382 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_383 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_95 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_380 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_381 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_382 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_383 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_384 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_385 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_386 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_387 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_96 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_384 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_385 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_386 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_387 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_388 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_389 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_390 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_391 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_97 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_388 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_389 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_390 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_391 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_392 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_393 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_394 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_395 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_98 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_392 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_393 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_394 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_395 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_95 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_96 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_97 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_98 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_396 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_397 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_398 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_399 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_99 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_396 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_397 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_398 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_399 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_400 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_401 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_402 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_403 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_100 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_400 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_401 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_402 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_403 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_404 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_405 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_406 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_407 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_101 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_404 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_405 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_406 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_407 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_408 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_409 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_410 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_411 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_102 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_408 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_409 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_410 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_411 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_99 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_100 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_101 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_102 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_412 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_413 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_414 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_415 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_103 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_412 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_413 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_414 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_415 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_21 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_22 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_23 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_103 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module vedic_2x2_416 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_417 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_418 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_419 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_104 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_416 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_417 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_418 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_419 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_420 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_421 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_422 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_423 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_105 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_420 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_421 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_422 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_423 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_424 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_425 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_426 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_427 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_106 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_424 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_425 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_426 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_427 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_428 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_429 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_430 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_431 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_107 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_428 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_429 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_430 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_431 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_104 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_105 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_106 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_107 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_432 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_433 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_434 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_435 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_108 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_432 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_433 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_434 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_435 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_436 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_437 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_438 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_439 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_109 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_436 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_437 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_438 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_439 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_440 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_441 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_442 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_443 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_110 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_440 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_441 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_442 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_443 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_444 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_445 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_446 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_447 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_111 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_444 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_445 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_446 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_447 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_108 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_109 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_110 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_111 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_448 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_449 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_450 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_451 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_112 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_448 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_449 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_450 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_451 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_452 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_453 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_454 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_455 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_113 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_452 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_453 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_454 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_455 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_456 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_457 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_458 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_459 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_114 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_456 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_457 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_458 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_459 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_2x2_460 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_461 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_462 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_463 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_115 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_460 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_461 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_462 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_463 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_8x8_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}

    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_112 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 167:16]
    node _pp_1_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_113 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 172:16]
    node _pp_2_io_b_T = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_114 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 177:16]
    node _pp_3_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_115 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 182:16]
    node _pp_4_io_b_T = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _psum_1_T = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _psum_1_T_1 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _psum_1_T_2 = cat(UInt<4>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 188:32]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 188:32]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 188:18]
    node _psum_2_T = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<4>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _psum_2_T_3 = cat(UInt<4>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 189:57]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 189:57]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 189:18]
    node _psum_3_T = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _psum_3_T_1 = cat(UInt<4>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 190:58]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 190:58]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= op_final @[multiplier.scala 196:15]

  module vedic_2x2_464 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_465 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_466 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_2x2_467 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}

    node _result0_T = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _result0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_result0_T, _result0_T_1) @[multiplier.scala 25:25]
    node _a1b0_T = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _a1b0_T_1 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_a1b0_T, _a1b0_T_1) @[multiplier.scala 26:24]
    node _a0b1_T = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _a0b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_a0b1_T, _a0b1_T_1) @[multiplier.scala 27:24]
    node _a1b1_T = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _a1b1_T_1 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_a1b1_T, _a1b1_T_1) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node io_c_lo = cat(result1, result0) @[Cat.scala 33:92]
    node io_c_hi = cat(result3, result2) @[Cat.scala 33:92]
    node _io_c_T = cat(io_c_hi, io_c_lo) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 37:15]

  module vedic_4x4_116 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}

    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_464 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 60:17]
    node _pp_1_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_465 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 65:17]
    node _pp_2_io_b_T = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_466 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 69:17]
    node _pp_3_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_467 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 74:17]
    node _pp_4_io_b_T = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _psum_1_T = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _psum_1_T_1 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _psum_1_T_2 = cat(UInt<2>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 79:31]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 79:31]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 79:17]
    node _psum_2_T = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<2>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _psum_2_T_3 = cat(UInt<2>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 80:56]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 80:56]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 80:17]
    node _psum_3_T = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _psum_3_T_1 = cat(UInt<2>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 81:57]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 81:57]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _io_c_T = cat(result2, result1) @[Cat.scala 33:92]
    io.c <= _io_c_T @[multiplier.scala 86:15]

  module vedic_16x16_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}

    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _in1_complement_T = not(io.a) @[multiplier.scala 217:25]
    node _in1_complement_T_1 = asSInt(_in1_complement_T) @[multiplier.scala 217:25]
    node _in1_complement_T_2 = asUInt(_in1_complement_T_1) @[multiplier.scala 217:38]
    node _in1_complement_T_3 = add(_in1_complement_T_2, UInt<1>("h1")) @[multiplier.scala 217:41]
    node in1_complement = tail(_in1_complement_T_3, 1) @[multiplier.scala 217:41]
    node _input1_T = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _input1_T_1 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _input1_T_2 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_input1_T, _input1_T_1, _input1_T_2) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_24 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _pp_1_io_a_T = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _pp_1_io_a_T @[multiplier.scala 222:24]
    node _pp_1_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _pp_1_io_b_T @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_25 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _pp_2_io_a_T = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _pp_2_io_a_T @[multiplier.scala 227:24]
    node _pp_2_io_b_T = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _pp_2_io_b_T @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_26 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _pp_3_io_a_T = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _pp_3_io_a_T @[multiplier.scala 232:24]
    node _pp_3_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _pp_3_io_b_T @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_116 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _pp_4_io_a_T = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _pp_4_io_a_T @[multiplier.scala 237:24]
    node _pp_4_io_b_T = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _pp_4_io_b_T @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _psum_1_T = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _psum_1_T_1 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _psum_1_T_2 = cat(UInt<8>("h0"), _psum_1_T_1) @[Cat.scala 33:92]
    node _psum_1_T_3 = add(_psum_1_T, _psum_1_T_2) @[multiplier.scala 242:29]
    node _psum_1_T_4 = tail(_psum_1_T_3, 1) @[multiplier.scala 242:29]
    psum_1 <= _psum_1_T_4 @[multiplier.scala 242:14]
    node _psum_2_T = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _psum_2_T_1 = cat(_psum_2_T, UInt<8>("h0")) @[Cat.scala 33:92]
    node _psum_2_T_2 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _psum_2_T_3 = cat(UInt<8>("h0"), _psum_2_T_2) @[Cat.scala 33:92]
    node _psum_2_T_4 = add(_psum_2_T_1, _psum_2_T_3) @[multiplier.scala 243:54]
    node _psum_2_T_5 = tail(_psum_2_T_4, 1) @[multiplier.scala 243:54]
    psum_2 <= _psum_2_T_5 @[multiplier.scala 243:14]
    node _psum_3_T = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _psum_3_T_1 = cat(UInt<8>("h0"), _psum_3_T) @[Cat.scala 33:92]
    node _psum_3_T_2 = add(_psum_3_T_1, psum_2) @[multiplier.scala 244:56]
    node _psum_3_T_3 = tail(_psum_3_T_2, 1) @[multiplier.scala 244:56]
    psum_3 <= _psum_3_T_3 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 33:92]
    node _result_complement_T = not(result) @[multiplier.scala 249:28]
    node _result_complement_T_1 = asSInt(_result_complement_T) @[multiplier.scala 249:43]
    node _result_complement_T_2 = add(_result_complement_T_1, asSInt(UInt<2>("h1"))) @[multiplier.scala 249:46]
    node _result_complement_T_3 = tail(_result_complement_T_2, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_result_complement_T_3) @[multiplier.scala 249:46]
    node _result_final_T = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _result_final_T_1 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_result_final_T, result_complement, _result_final_T_1) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]

  module PID_Controller_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip fb_period : UInt<1>, flip raw_irq : UInt<1>, flip reg_kp_we : UInt<1>, flip reg_kp_di : SInt<16>, reg_kp_do : SInt<16>, flip reg_ki_we : UInt<1>, flip reg_ki_di : SInt<16>, reg_ki_do : SInt<16>, flip reg_kd_we : UInt<1>, flip reg_kd_di : SInt<16>, reg_kd_do : SInt<16>, flip reg_ref_we : UInt<1>, flip reg_ref_di : SInt<16>, reg_ref_do : SInt<16>, flip reg_fb_we : UInt<1>, flip reg_fb_di : SInt<16>, reg_fb_do : SInt<16>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : SInt<16>, reg_cfg_do : SInt<16>, flip speed_fb_in : SInt<16>, pid_out : SInt<16>}

    reg kp : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<2>("h1"))) @[pid.scala 56:26]
    reg ki : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 57:26]
    reg kd : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 58:26]
    reg ref : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<6>("h14"))) @[pid.scala 59:26]
    reg feedback : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 60:26]
    reg sigma_old : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 61:26]
    reg fb_sel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[pid.scala 62:26]
    reg e_prev1 : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 64:26]
    reg e_prev2 : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 65:26]
    reg reg_pid_out : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[pid.scala 66:28]
    io.reg_kp_do <= kp @[pid.scala 69:17]
    when io.reg_kp_we : @[pid.scala 70:22]
      kp <= io.reg_kp_di @[pid.scala 71:8]
    io.reg_ki_do <= ki @[pid.scala 74:17]
    when io.reg_ki_we : @[pid.scala 75:22]
      ki <= io.reg_ki_di @[pid.scala 76:8]
    io.reg_kd_do <= kd @[pid.scala 79:17]
    when io.reg_kd_we : @[pid.scala 80:22]
      kd <= io.reg_kd_di @[pid.scala 81:8]
    io.reg_ref_do <= ref @[pid.scala 85:17]
    when io.reg_ref_we : @[pid.scala 86:23]
      ref <= io.reg_ref_di @[pid.scala 87:9]
    io.reg_fb_do <= feedback @[pid.scala 90:17]
    when fb_sel : @[pid.scala 92:16]
      when io.reg_fb_we : @[pid.scala 93:24]
        feedback <= io.reg_fb_di @[pid.scala 94:15]
    else :
      feedback <= io.speed_fb_in @[pid.scala 97:15]
    node _io_reg_cfg_do_T = cat(UInt<31>("h0"), fb_sel) @[Cat.scala 33:92]
    node _io_reg_cfg_do_T_1 = asSInt(_io_reg_cfg_do_T) @[pid.scala 100:49]
    io.reg_cfg_do <= _io_reg_cfg_do_T_1 @[pid.scala 100:17]
    when io.reg_cfg_we : @[pid.scala 101:23]
      node _fb_sel_T = bits(io.reg_cfg_di, 0, 0) @[pid.scala 102:28]
      fb_sel <= _fb_sel_T @[pid.scala 102:12]
    node _delta_err_T = sub(e_prev1, e_prev2) @[pid.scala 106:27]
    node _delta_err_T_1 = tail(_delta_err_T, 1) @[pid.scala 106:27]
    node delta_err = asSInt(_delta_err_T_1) @[pid.scala 106:27]
    node _sigma_new_T = add(e_prev1, sigma_old) @[pid.scala 107:27]
    node _sigma_new_T_1 = tail(_sigma_new_T, 1) @[pid.scala 107:27]
    node sigma_new = asSInt(_sigma_new_T_1) @[pid.scala 107:27]
    inst mul_kp of vedic_16x16_6 @[pid.scala 110:25]
    mul_kp.clock <= clock
    mul_kp.reset <= reset
    mul_kp.io.a <= e_prev1 @[pid.scala 111:17]
    node _mul_kp_io_b_T = asUInt(kp) @[pid.scala 112:29]
    mul_kp.io.b <= _mul_kp_io_b_T @[pid.scala 112:17]
    node _prop_out_T = bits(mul_kp.io.c, 15, 0) @[pid.scala 113:30]
    node prop_out = asSInt(_prop_out_T) @[pid.scala 113:43]
    inst mul_ki of vedic_16x16_7 @[pid.scala 116:25]
    mul_ki.clock <= clock
    mul_ki.reset <= reset
    mul_ki.io.a <= sigma_new @[pid.scala 117:17]
    node _mul_ki_io_b_T = asUInt(ki) @[pid.scala 118:29]
    mul_ki.io.b <= _mul_ki_io_b_T @[pid.scala 118:17]
    node _integral_out_T = bits(mul_ki.io.c, 15, 0) @[pid.scala 119:33]
    node integral_out = asSInt(_integral_out_T) @[pid.scala 119:46]
    inst mul_kd of vedic_16x16_8 @[pid.scala 122:25]
    mul_kd.clock <= clock
    mul_kd.reset <= reset
    mul_kd.io.a <= delta_err @[pid.scala 123:17]
    node _mul_kd_io_b_T = asUInt(kd) @[pid.scala 124:29]
    mul_kd.io.b <= _mul_kd_io_b_T @[pid.scala 124:17]
    node _derivative_out_T = bits(mul_kd.io.c, 15, 0) @[pid.scala 125:35]
    node derivative_out = asSInt(_derivative_out_T) @[pid.scala 125:48]
    node _pi_sum_T = add(prop_out, integral_out) @[pid.scala 128:28]
    node _pi_sum_T_1 = tail(_pi_sum_T, 1) @[pid.scala 128:28]
    node pi_sum = asSInt(_pi_sum_T_1) @[pid.scala 128:28]
    node _pi_sum_overflow_T = bits(prop_out, 15, 15) @[pid.scala 129:34]
    node _pi_sum_overflow_T_1 = bits(integral_out, 15, 15) @[pid.scala 129:54]
    node _pi_sum_overflow_T_2 = and(_pi_sum_overflow_T, _pi_sum_overflow_T_1) @[pid.scala 129:39]
    node _pi_sum_overflow_T_3 = bits(pi_sum, 15, 15) @[pid.scala 129:69]
    node _pi_sum_overflow_T_4 = eq(_pi_sum_overflow_T_3, UInt<1>("h0")) @[pid.scala 129:62]
    node _pi_sum_overflow_T_5 = and(_pi_sum_overflow_T_2, _pi_sum_overflow_T_4) @[pid.scala 129:59]
    node _pi_sum_overflow_T_6 = bits(prop_out, 15, 15) @[pid.scala 130:35]
    node _pi_sum_overflow_T_7 = eq(_pi_sum_overflow_T_6, UInt<1>("h0")) @[pid.scala 130:26]
    node _pi_sum_overflow_T_8 = bits(integral_out, 15, 15) @[pid.scala 130:56]
    node _pi_sum_overflow_T_9 = eq(_pi_sum_overflow_T_8, UInt<1>("h0")) @[pid.scala 130:43]
    node _pi_sum_overflow_T_10 = and(_pi_sum_overflow_T_7, _pi_sum_overflow_T_9) @[pid.scala 130:40]
    node _pi_sum_overflow_T_11 = bits(pi_sum, 15, 15) @[pid.scala 130:70]
    node _pi_sum_overflow_T_12 = and(_pi_sum_overflow_T_10, _pi_sum_overflow_T_11) @[pid.scala 130:61]
    node pi_sum_overflow = or(_pi_sum_overflow_T_5, _pi_sum_overflow_T_12) @[pid.scala 129:75]
    when io.raw_irq : @[pid.scala 132:20]
      when io.fb_period : @[pid.scala 134:23]
        node _e_prev1_T = sub(feedback, ref) @[pid.scala 135:29]
        node _e_prev1_T_1 = tail(_e_prev1_T, 1) @[pid.scala 135:29]
        node _e_prev1_T_2 = asSInt(_e_prev1_T_1) @[pid.scala 135:29]
        e_prev1 <= _e_prev1_T_2 @[pid.scala 135:17]
      else :
        node _e_prev1_T_3 = sub(ref, feedback) @[pid.scala 137:24]
        node _e_prev1_T_4 = tail(_e_prev1_T_3, 1) @[pid.scala 137:24]
        node _e_prev1_T_5 = asSInt(_e_prev1_T_4) @[pid.scala 137:24]
        e_prev1 <= _e_prev1_T_5 @[pid.scala 137:17]
      e_prev2 <= e_prev1 @[pid.scala 139:17]
      sigma_old <= sigma_new @[pid.scala 140:17]
      node _reg_pid_out_T = add(pi_sum, derivative_out) @[pid.scala 141:27]
      node _reg_pid_out_T_1 = tail(_reg_pid_out_T, 1) @[pid.scala 141:27]
      node _reg_pid_out_T_2 = asSInt(_reg_pid_out_T_1) @[pid.scala 141:27]
      reg_pid_out <= _reg_pid_out_T_2 @[pid.scala 141:17]
    node _io_pid_out_T = bits(reg_pid_out, 15, 15) @[pid.scala 144:54]
    node _io_pid_out_T_1 = or(pi_sum_overflow, _io_pid_out_T) @[pid.scala 144:40]
    node _io_pid_out_T_2 = mux(_io_pid_out_T_1, asSInt(UInt<1>("h0")), reg_pid_out) @[pid.scala 144:23]
    io.pid_out <= _io_pid_out_T_2 @[pid.scala 144:17]

  module Motor_Top_2 :
    input clock : Clock
    input reset : Reset
    output io : { wbs : { flip m2s : { addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}, motor_gpio : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, flip motor_select : UInt<1>, motor_irq : UInt<1>}

    inst interlink of Interlink_Module_2 @[motor_top.scala 53:26]
    interlink.clock <= clock
    interlink.reset <= reset
    interlink.io.motor_select <= io.motor_select @[motor_top.scala 57:29]
    interlink.io.bus_stb_i <= io.wbs.m2s.stb @[motor_top.scala 60:29]
    interlink.io.bus_cyc_i <= io.wbs.m2s.cyc @[motor_top.scala 61:29]
    interlink.io.bus_adr_i <= io.wbs.m2s.addr @[motor_top.scala 62:29]
    interlink.io.bus_sel_i <= io.wbs.m2s.sel @[motor_top.scala 63:29]
    interlink.io.bus_we_i <= io.wbs.m2s.we @[motor_top.scala 64:29]
    io.wbs.data_o <= interlink.io.bus_dat_o @[motor_top.scala 65:29]
    io.wbs.ack_o <= interlink.io.bus_ack_o @[motor_top.scala 66:29]
    inst pwm of PWM_2 @[motor_top.scala 69:37]
    pwm.clock <= clock
    pwm.reset <= reset
    pwm.io.x_homed <= io.motor_gpio.x_homed @[motor_top.scala 71:29]
    pwm.io.y_homed <= io.motor_gpio.y_homed @[motor_top.scala 72:29]
    pwm.io.reg_val_we <= interlink.io.tmr_val_we @[motor_top.scala 74:29]
    pwm.io.reg_val_di <= io.wbs.m2s.data @[motor_top.scala 75:29]
    interlink.io.tmr_val_do <= pwm.io.reg_val_do @[motor_top.scala 76:29]
    pwm.io.reg_cfg_we <= interlink.io.tmr_cfg_we @[motor_top.scala 78:29]
    pwm.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 79:29]
    interlink.io.tmr_cfg_do <= pwm.io.reg_cfg_do @[motor_top.scala 80:29]
    pwm.io.reg_step_we <= interlink.io.tmr_step_we @[motor_top.scala 82:29]
    pwm.io.reg_step_di <= io.wbs.m2s.data @[motor_top.scala 83:29]
    interlink.io.tmr_step_do <= pwm.io.reg_step_do @[motor_top.scala 84:29]
    pwm.io.reg_dat_we <= interlink.io.tmr_dat_we @[motor_top.scala 86:29]
    pwm.io.reg_dat_di <= io.wbs.m2s.data @[motor_top.scala 87:29]
    interlink.io.tmr_dat_do <= pwm.io.reg_dat_do @[motor_top.scala 88:29]
    pwm.io.reg_duty_we <= interlink.io.tmr_duty_we @[motor_top.scala 89:29]
    pwm.io.reg_duty_di <= io.wbs.m2s.data @[motor_top.scala 90:29]
    interlink.io.tmr_duty_do <= pwm.io.reg_duty_do @[motor_top.scala 91:29]
    node _io_motor_gpio_step1step_T = bits(pwm.io.reg_step_do, 5, 5) @[motor_top.scala 93:50]
    io.motor_gpio.step1step <= _io_motor_gpio_step1step_T @[motor_top.scala 93:29]
    node _io_motor_gpio_step1dir_T = bits(pwm.io.reg_step_do, 4, 4) @[motor_top.scala 94:50]
    io.motor_gpio.step1dir <= _io_motor_gpio_step1dir_T @[motor_top.scala 94:29]
    node _io_motor_gpio_step2step_T = bits(pwm.io.reg_step_do, 3, 3) @[motor_top.scala 95:50]
    io.motor_gpio.step2step <= _io_motor_gpio_step2step_T @[motor_top.scala 95:29]
    node _io_motor_gpio_step2dir_T = bits(pwm.io.reg_step_do, 2, 2) @[motor_top.scala 96:50]
    io.motor_gpio.step2dir <= _io_motor_gpio_step2dir_T @[motor_top.scala 96:29]
    wire pid_out : SInt<16> @[motor_top.scala 99:35]
    pwm.io.reg_pid_out <= pid_out @[motor_top.scala 101:29]
    io.motor_irq <= pwm.io.irq_out @[motor_top.scala 102:29]
    io.motor_gpio.pwm_high <= pwm.io.pwm_h @[motor_top.scala 105:29]
    io.motor_gpio.pwm_low <= pwm.io.pwm_l @[motor_top.scala 106:29]
    inst qei of Quad_Encoder_2 @[motor_top.scala 110:37]
    qei.clock <= clock
    qei.reset <= reset
    qei.io.quad_a <= io.motor_gpio.qei_ch_a @[motor_top.scala 111:29]
    qei.io.quad_b <= io.motor_gpio.qei_ch_b @[motor_top.scala 112:29]
    qei.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 113:29]
    qei.io.reg_count_we <= interlink.io.qei_count_we @[motor_top.scala 115:29]
    qei.io.reg_count_di <= io.wbs.m2s.data @[motor_top.scala 116:29]
    interlink.io.qei_count_do <= qei.io.reg_count_do @[motor_top.scala 117:29]
    qei.io.reg_cfg_we <= interlink.io.qei_cfg_we @[motor_top.scala 119:29]
    qei.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 120:29]
    interlink.io.qei_cfg_do <= qei.io.reg_cfg_do @[motor_top.scala 121:29]
    interlink.io.qei_speed_do <= qei.io.reg_speed_do @[motor_top.scala 123:29]
    inst pid of PID_Controller_2 @[motor_top.scala 126:37]
    pid.clock <= clock
    pid.reset <= reset
    pid.io.fb_period <= qei.io.fb_period @[motor_top.scala 127:29]
    pid.io.speed_fb_in <= qei.io.reg_speed_do @[motor_top.scala 128:29]
    pid.io.reg_kp_we <= interlink.io.pid_kp_we @[motor_top.scala 130:29]
    node _pid_io_reg_kp_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 131:41]
    node _pid_io_reg_kp_di_T_1 = asSInt(_pid_io_reg_kp_di_T) @[motor_top.scala 131:53]
    pid.io.reg_kp_di <= _pid_io_reg_kp_di_T_1 @[motor_top.scala 131:29]
    interlink.io.pid_kp_do <= pid.io.reg_kp_do @[motor_top.scala 132:29]
    pid.io.reg_ki_we <= interlink.io.pid_ki_we @[motor_top.scala 134:29]
    node _pid_io_reg_ki_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 135:41]
    node _pid_io_reg_ki_di_T_1 = asSInt(_pid_io_reg_ki_di_T) @[motor_top.scala 135:53]
    pid.io.reg_ki_di <= _pid_io_reg_ki_di_T_1 @[motor_top.scala 135:29]
    interlink.io.pid_ki_do <= pid.io.reg_ki_do @[motor_top.scala 136:29]
    pid.io.reg_kd_we <= interlink.io.pid_kd_we @[motor_top.scala 138:29]
    node _pid_io_reg_kd_di_T = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 139:41]
    node _pid_io_reg_kd_di_T_1 = asSInt(_pid_io_reg_kd_di_T) @[motor_top.scala 139:53]
    pid.io.reg_kd_di <= _pid_io_reg_kd_di_T_1 @[motor_top.scala 139:29]
    interlink.io.pid_kd_do <= pid.io.reg_kd_do @[motor_top.scala 140:29]
    pid.io.reg_ref_we <= interlink.io.pid_ref_we @[motor_top.scala 142:29]
    node _pid_io_reg_ref_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 143:41]
    node _pid_io_reg_ref_di_T_1 = asSInt(_pid_io_reg_ref_di_T) @[motor_top.scala 143:54]
    pid.io.reg_ref_di <= _pid_io_reg_ref_di_T_1 @[motor_top.scala 143:29]
    interlink.io.pid_ref_do <= pid.io.reg_ref_do @[motor_top.scala 144:29]
    pid.io.reg_fb_we <= interlink.io.pid_fb_we @[motor_top.scala 146:29]
    node _pid_io_reg_fb_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 147:41]
    node _pid_io_reg_fb_di_T_1 = asSInt(_pid_io_reg_fb_di_T) @[motor_top.scala 147:54]
    pid.io.reg_fb_di <= _pid_io_reg_fb_di_T_1 @[motor_top.scala 147:29]
    interlink.io.pid_fb_do <= pid.io.reg_fb_do @[motor_top.scala 148:29]
    pid.io.reg_cfg_we <= interlink.io.pid_cfg_we @[motor_top.scala 150:29]
    node _pid_io_reg_cfg_di_T = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 151:41]
    node _pid_io_reg_cfg_di_T_1 = asSInt(_pid_io_reg_cfg_di_T) @[motor_top.scala 151:54]
    pid.io.reg_cfg_di <= _pid_io_reg_cfg_di_T_1 @[motor_top.scala 151:29]
    interlink.io.pid_cfg_do <= pid.io.reg_cfg_do @[motor_top.scala 152:29]
    pid_out <= pid.io.pid_out @[motor_top.scala 154:29]
    pid.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 155:29]

  module WB_InterConnect :
    input clock : Clock
    input reset : Reset
    output io : { dbus : { flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}, ibus : { flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, uart_tx : UInt<1>, flip uart_rx : UInt<1>, uart_irq : UInt<1>, spi_cs : UInt<1>, spi_clk : UInt<1>, spi_mosi : UInt<1>, flip spi_miso : UInt<1>, spi_irq : UInt<1>, m1_io : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, m2_io : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, m3_io : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, m1_irq : UInt<1>, m2_irq : UInt<1>, m3_irq : UInt<1>}

    inst dmem of DMem_Interface @[wb_interconnect.scala 65:24]
    dmem.clock <= clock
    dmem.reset <= reset
    inst imem of IMem_Interface @[wb_interconnect.scala 66:24]
    imem.clock <= clock
    imem.reset <= reset
    inst wbm_dbus of WBM_DBus @[wb_interconnect.scala 67:24]
    wbm_dbus.clock <= clock
    wbm_dbus.reset <= reset
    inst uart of UART @[wb_interconnect.scala 68:24]
    uart.clock <= clock
    uart.reset <= reset
    inst spi of SPI @[wb_interconnect.scala 69:24]
    spi.clock <= clock
    spi.reset <= reset
    inst m1 of Motor_Top @[wb_interconnect.scala 70:24]
    m1.clock <= clock
    m1.reset <= reset
    inst m2 of Motor_Top_1 @[wb_interconnect.scala 71:24]
    m2.clock <= clock
    m2.reset <= reset
    inst m3 of Motor_Top_2 @[wb_interconnect.scala 72:24]
    m3.clock <= clock
    m3.reset <= reset
    io.dbus.valid <= wbm_dbus.io.dbus.valid @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.ld_type <= io.dbus.ld_type @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.st_type <= io.dbus.st_type @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.wr_en <= io.dbus.wr_en @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.rd_en <= io.dbus.rd_en @[wb_interconnect.scala 75:20]
    io.dbus.rdata <= wbm_dbus.io.dbus.rdata @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.wdata <= io.dbus.wdata @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.addr <= io.dbus.addr @[wb_interconnect.scala 75:20]
    io.ibus.valid <= imem.io.ibus.valid @[wb_interconnect.scala 76:20]
    io.ibus.inst <= imem.io.ibus.inst @[wb_interconnect.scala 76:20]
    imem.io.ibus.addr <= io.ibus.addr @[wb_interconnect.scala 76:20]
    node address = bits(wbm_dbus.io.wbm.m2s.addr, 15, 12) @[wb_interconnect.scala 79:50]
    node imem_addr_match = eq(address, UInt<4>("h0")) @[wb_interconnect.scala 80:35]
    node dmem_addr_match = eq(address, UInt<4>("h1")) @[wb_interconnect.scala 81:35]
    node uart_addr_match = eq(address, UInt<4>("h2")) @[wb_interconnect.scala 82:35]
    node spi_addr_match = eq(address, UInt<4>("h3")) @[wb_interconnect.scala 83:35]
    node m1_addr_match = eq(address, UInt<4>("h4")) @[wb_interconnect.scala 84:35]
    node m2_addr_match = eq(address, UInt<4>("h5")) @[wb_interconnect.scala 85:35]
    node m3_addr_match = eq(address, UInt<4>("h6")) @[wb_interconnect.scala 86:35]
    dmem.io.wbs.m2s <= wbm_dbus.io.wbm.m2s @[wb_interconnect.scala 89:20]
    imem.io.wbs.m2s <= wbm_dbus.io.wbm.m2s @[wb_interconnect.scala 93:20]
    uart.io.wbs.m2s <= wbm_dbus.io.wbm.m2s @[wb_interconnect.scala 96:20]
    spi.io.wbs.m2s <= wbm_dbus.io.wbm.m2s @[wb_interconnect.scala 99:19]
    m1.io.wbs.m2s <= wbm_dbus.io.wbm.m2s @[wb_interconnect.scala 102:17]
    m2.io.wbs.m2s <= wbm_dbus.io.wbm.m2s @[wb_interconnect.scala 103:17]
    m3.io.wbs.m2s <= wbm_dbus.io.wbm.m2s @[wb_interconnect.scala 104:17]
    reg imem_sel : UInt<1>, clock with :
      reset => (UInt<1>("h0"), imem_sel) @[wb_interconnect.scala 107:22]
    reg dmem_sel : UInt<1>, clock with :
      reset => (UInt<1>("h0"), dmem_sel) @[wb_interconnect.scala 108:22]
    reg uart_sel : UInt<1>, clock with :
      reset => (UInt<1>("h0"), uart_sel) @[wb_interconnect.scala 109:22]
    reg spi_sel : UInt<1>, clock with :
      reset => (UInt<1>("h0"), spi_sel) @[wb_interconnect.scala 110:22]
    reg m1_sel : UInt<1>, clock with :
      reset => (UInt<1>("h0"), m1_sel) @[wb_interconnect.scala 111:22]
    reg m2_sel : UInt<1>, clock with :
      reset => (UInt<1>("h0"), m2_sel) @[wb_interconnect.scala 112:22]
    reg m3_sel : UInt<1>, clock with :
      reset => (UInt<1>("h0"), m3_sel) @[wb_interconnect.scala 113:22]
    node _imem_sel_T = and(imem_addr_match, imem.io.wbs.m2s.stb) @[wb_interconnect.scala 115:32]
    imem_sel <= _imem_sel_T @[wb_interconnect.scala 115:13]
    node _dmem_sel_T = and(dmem_addr_match, dmem.io.wbs.m2s.stb) @[wb_interconnect.scala 116:32]
    dmem_sel <= _dmem_sel_T @[wb_interconnect.scala 116:13]
    node _uart_sel_T = and(uart_addr_match, uart.io.wbs.m2s.stb) @[wb_interconnect.scala 117:32]
    uart_sel <= _uart_sel_T @[wb_interconnect.scala 117:13]
    node _spi_sel_T = and(spi_addr_match, spi.io.wbs.m2s.stb) @[wb_interconnect.scala 118:33]
    spi_sel <= _spi_sel_T @[wb_interconnect.scala 118:13]
    node _m1_sel_T = and(m1_addr_match, m1.io.wbs.m2s.stb) @[wb_interconnect.scala 119:30]
    m1_sel <= _m1_sel_T @[wb_interconnect.scala 119:13]
    node _m2_sel_T = and(m2_addr_match, m2.io.wbs.m2s.stb) @[wb_interconnect.scala 120:30]
    m2_sel <= _m2_sel_T @[wb_interconnect.scala 120:13]
    node _m3_sel_T = and(m3_addr_match, m3.io.wbs.m2s.stb) @[wb_interconnect.scala 121:30]
    m3_sel <= _m3_sel_T @[wb_interconnect.scala 121:13]
    node _wbm_dbus_io_wbm_data_i_T = mux(m3_sel, m3.io.wbs.data_o, UInt<1>("h0")) @[wb_interconnect.scala 129:45]
    node _wbm_dbus_io_wbm_data_i_T_1 = mux(m2_sel, m2.io.wbs.data_o, _wbm_dbus_io_wbm_data_i_T) @[wb_interconnect.scala 128:43]
    node _wbm_dbus_io_wbm_data_i_T_2 = mux(m1_sel, m1.io.wbs.data_o, _wbm_dbus_io_wbm_data_i_T_1) @[wb_interconnect.scala 127:41]
    node _wbm_dbus_io_wbm_data_i_T_3 = mux(spi_sel, spi.io.wbs.data_o, _wbm_dbus_io_wbm_data_i_T_2) @[wb_interconnect.scala 126:39]
    node _wbm_dbus_io_wbm_data_i_T_4 = mux(uart_sel, uart.io.wbs.data_o, _wbm_dbus_io_wbm_data_i_T_3) @[wb_interconnect.scala 125:37]
    node _wbm_dbus_io_wbm_data_i_T_5 = mux(imem_sel, imem.io.wbs.data_o, _wbm_dbus_io_wbm_data_i_T_4) @[wb_interconnect.scala 124:35]
    node _wbm_dbus_io_wbm_data_i_T_6 = mux(dmem_sel, dmem.io.wbs.data_o, _wbm_dbus_io_wbm_data_i_T_5) @[wb_interconnect.scala 123:32]
    wbm_dbus.io.wbm.data_i <= _wbm_dbus_io_wbm_data_i_T_6 @[wb_interconnect.scala 123:26]
    node _wbm_dbus_io_wbm_ack_i_T = mux(m3_sel, m3.io.wbs.ack_o, UInt<1>("h0")) @[wb_interconnect.scala 136:45]
    node _wbm_dbus_io_wbm_ack_i_T_1 = mux(m2_sel, m2.io.wbs.ack_o, _wbm_dbus_io_wbm_ack_i_T) @[wb_interconnect.scala 135:43]
    node _wbm_dbus_io_wbm_ack_i_T_2 = mux(m1_sel, m1.io.wbs.ack_o, _wbm_dbus_io_wbm_ack_i_T_1) @[wb_interconnect.scala 134:41]
    node _wbm_dbus_io_wbm_ack_i_T_3 = mux(spi_sel, spi.io.wbs.ack_o, _wbm_dbus_io_wbm_ack_i_T_2) @[wb_interconnect.scala 133:39]
    node _wbm_dbus_io_wbm_ack_i_T_4 = mux(uart_sel, uart.io.wbs.ack_o, _wbm_dbus_io_wbm_ack_i_T_3) @[wb_interconnect.scala 132:37]
    node _wbm_dbus_io_wbm_ack_i_T_5 = mux(imem_sel, imem.io.wbs.ack_o, _wbm_dbus_io_wbm_ack_i_T_4) @[wb_interconnect.scala 131:35]
    node _wbm_dbus_io_wbm_ack_i_T_6 = mux(dmem_sel, dmem.io.wbs.ack_o, _wbm_dbus_io_wbm_ack_i_T_5) @[wb_interconnect.scala 130:32]
    wbm_dbus.io.wbm.ack_i <= _wbm_dbus_io_wbm_ack_i_T_6 @[wb_interconnect.scala 130:26]
    uart.io.uart_select <= uart_addr_match @[wb_interconnect.scala 140:24]
    uart.io.rxd <= io.uart_rx @[wb_interconnect.scala 141:24]
    io.uart_tx <= uart.io.txd @[wb_interconnect.scala 142:24]
    io.uart_irq <= uart.io.uartInt @[wb_interconnect.scala 143:24]
    spi.io.spi_select <= spi_addr_match @[wb_interconnect.scala 146:24]
    spi.io.spi_miso <= io.spi_miso @[wb_interconnect.scala 147:24]
    io.spi_cs <= spi.io.spi_cs @[wb_interconnect.scala 148:24]
    io.spi_clk <= spi.io.spi_clk @[wb_interconnect.scala 149:24]
    io.spi_mosi <= spi.io.spi_mosi @[wb_interconnect.scala 150:24]
    io.spi_irq <= spi.io.spi_intr @[wb_interconnect.scala 151:24]
    io.m1_io.step2dir <= m1.io.motor_gpio.step2dir @[wb_interconnect.scala 154:24]
    io.m1_io.step1dir <= m1.io.motor_gpio.step1dir @[wb_interconnect.scala 154:24]
    io.m1_io.step2step <= m1.io.motor_gpio.step2step @[wb_interconnect.scala 154:24]
    io.m1_io.step1step <= m1.io.motor_gpio.step1step @[wb_interconnect.scala 154:24]
    m1.io.motor_gpio.y_homed <= io.m1_io.y_homed @[wb_interconnect.scala 154:24]
    m1.io.motor_gpio.x_homed <= io.m1_io.x_homed @[wb_interconnect.scala 154:24]
    io.m1_io.pwm_low <= m1.io.motor_gpio.pwm_low @[wb_interconnect.scala 154:24]
    io.m1_io.pwm_high <= m1.io.motor_gpio.pwm_high @[wb_interconnect.scala 154:24]
    m1.io.motor_gpio.qei_ch_b <= io.m1_io.qei_ch_b @[wb_interconnect.scala 154:24]
    m1.io.motor_gpio.qei_ch_a <= io.m1_io.qei_ch_a @[wb_interconnect.scala 154:24]
    m1.io.motor_select <= m1_addr_match @[wb_interconnect.scala 155:24]
    io.m1_irq <= m1.io.motor_irq @[wb_interconnect.scala 156:24]
    io.m2_io.step2dir <= m2.io.motor_gpio.step2dir @[wb_interconnect.scala 158:24]
    io.m2_io.step1dir <= m2.io.motor_gpio.step1dir @[wb_interconnect.scala 158:24]
    io.m2_io.step2step <= m2.io.motor_gpio.step2step @[wb_interconnect.scala 158:24]
    io.m2_io.step1step <= m2.io.motor_gpio.step1step @[wb_interconnect.scala 158:24]
    m2.io.motor_gpio.y_homed <= io.m2_io.y_homed @[wb_interconnect.scala 158:24]
    m2.io.motor_gpio.x_homed <= io.m2_io.x_homed @[wb_interconnect.scala 158:24]
    io.m2_io.pwm_low <= m2.io.motor_gpio.pwm_low @[wb_interconnect.scala 158:24]
    io.m2_io.pwm_high <= m2.io.motor_gpio.pwm_high @[wb_interconnect.scala 158:24]
    m2.io.motor_gpio.qei_ch_b <= io.m2_io.qei_ch_b @[wb_interconnect.scala 158:24]
    m2.io.motor_gpio.qei_ch_a <= io.m2_io.qei_ch_a @[wb_interconnect.scala 158:24]
    m2.io.motor_select <= m2_addr_match @[wb_interconnect.scala 159:24]
    io.m2_irq <= m2.io.motor_irq @[wb_interconnect.scala 160:24]
    io.m3_io.step2dir <= m3.io.motor_gpio.step2dir @[wb_interconnect.scala 162:24]
    io.m3_io.step1dir <= m3.io.motor_gpio.step1dir @[wb_interconnect.scala 162:24]
    io.m3_io.step2step <= m3.io.motor_gpio.step2step @[wb_interconnect.scala 162:24]
    io.m3_io.step1step <= m3.io.motor_gpio.step1step @[wb_interconnect.scala 162:24]
    m3.io.motor_gpio.y_homed <= io.m3_io.y_homed @[wb_interconnect.scala 162:24]
    m3.io.motor_gpio.x_homed <= io.m3_io.x_homed @[wb_interconnect.scala 162:24]
    io.m3_io.pwm_low <= m3.io.motor_gpio.pwm_low @[wb_interconnect.scala 162:24]
    io.m3_io.pwm_high <= m3.io.motor_gpio.pwm_high @[wb_interconnect.scala 162:24]
    m3.io.motor_gpio.qei_ch_b <= io.m3_io.qei_ch_b @[wb_interconnect.scala 162:24]
    m3.io.motor_gpio.qei_ch_a <= io.m3_io.qei_ch_a @[wb_interconnect.scala 162:24]
    m3.io.motor_select <= m3_addr_match @[wb_interconnect.scala 163:24]
    io.m3_irq <= m3.io.motor_irq @[wb_interconnect.scala 164:24]

  module SoC_Tile :
    input clock : Clock
    input reset : UInt<1>
    output io : { uart_tx : UInt<1>, flip uart_rx : UInt<1>, spi_cs : UInt<1>, spi_clk : UInt<1>, spi_mosi : UInt<1>, flip spi_miso : UInt<1>, m1_io : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, m2_io : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}, m3_io : { flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>, flip x_homed : UInt<1>, flip y_homed : UInt<1>, step1step : UInt<1>, step2step : UInt<1>, step1dir : UInt<1>, step2dir : UInt<1>}}

    inst core of Core @[SoC_Tile.scala 48:32]
    core.clock <= clock
    core.reset <= reset
    inst wb_inter_connect of WB_InterConnect @[SoC_Tile.scala 49:32]
    wb_inter_connect.clock <= clock
    wb_inter_connect.reset <= reset
    core.io.ibus <= wb_inter_connect.io.ibus @[SoC_Tile.scala 52:24]
    core.io.dbus <= wb_inter_connect.io.dbus @[SoC_Tile.scala 53:24]
    io.uart_tx <= wb_inter_connect.io.uart_tx @[SoC_Tile.scala 56:32]
    wb_inter_connect.io.uart_rx <= io.uart_rx @[SoC_Tile.scala 57:32]
    core.io.irq.uart_irq <= wb_inter_connect.io.uart_irq @[SoC_Tile.scala 58:32]
    io.spi_cs <= wb_inter_connect.io.spi_cs @[SoC_Tile.scala 61:32]
    io.spi_clk <= wb_inter_connect.io.spi_clk @[SoC_Tile.scala 62:32]
    io.spi_mosi <= wb_inter_connect.io.spi_mosi @[SoC_Tile.scala 63:32]
    wb_inter_connect.io.spi_miso <= io.spi_miso @[SoC_Tile.scala 64:32]
    core.io.irq.spi_irq <= wb_inter_connect.io.spi_irq @[SoC_Tile.scala 65:32]
    io.m1_io.step2dir <= wb_inter_connect.io.m1_io.step2dir @[SoC_Tile.scala 68:12]
    io.m1_io.step1dir <= wb_inter_connect.io.m1_io.step1dir @[SoC_Tile.scala 68:12]
    io.m1_io.step2step <= wb_inter_connect.io.m1_io.step2step @[SoC_Tile.scala 68:12]
    io.m1_io.step1step <= wb_inter_connect.io.m1_io.step1step @[SoC_Tile.scala 68:12]
    wb_inter_connect.io.m1_io.y_homed <= io.m1_io.y_homed @[SoC_Tile.scala 68:12]
    wb_inter_connect.io.m1_io.x_homed <= io.m1_io.x_homed @[SoC_Tile.scala 68:12]
    io.m1_io.pwm_low <= wb_inter_connect.io.m1_io.pwm_low @[SoC_Tile.scala 68:12]
    io.m1_io.pwm_high <= wb_inter_connect.io.m1_io.pwm_high @[SoC_Tile.scala 68:12]
    wb_inter_connect.io.m1_io.qei_ch_b <= io.m1_io.qei_ch_b @[SoC_Tile.scala 68:12]
    wb_inter_connect.io.m1_io.qei_ch_a <= io.m1_io.qei_ch_a @[SoC_Tile.scala 68:12]
    io.m2_io.step2dir <= wb_inter_connect.io.m2_io.step2dir @[SoC_Tile.scala 69:12]
    io.m2_io.step1dir <= wb_inter_connect.io.m2_io.step1dir @[SoC_Tile.scala 69:12]
    io.m2_io.step2step <= wb_inter_connect.io.m2_io.step2step @[SoC_Tile.scala 69:12]
    io.m2_io.step1step <= wb_inter_connect.io.m2_io.step1step @[SoC_Tile.scala 69:12]
    wb_inter_connect.io.m2_io.y_homed <= io.m2_io.y_homed @[SoC_Tile.scala 69:12]
    wb_inter_connect.io.m2_io.x_homed <= io.m2_io.x_homed @[SoC_Tile.scala 69:12]
    io.m2_io.pwm_low <= wb_inter_connect.io.m2_io.pwm_low @[SoC_Tile.scala 69:12]
    io.m2_io.pwm_high <= wb_inter_connect.io.m2_io.pwm_high @[SoC_Tile.scala 69:12]
    wb_inter_connect.io.m2_io.qei_ch_b <= io.m2_io.qei_ch_b @[SoC_Tile.scala 69:12]
    wb_inter_connect.io.m2_io.qei_ch_a <= io.m2_io.qei_ch_a @[SoC_Tile.scala 69:12]
    io.m3_io.step2dir <= wb_inter_connect.io.m3_io.step2dir @[SoC_Tile.scala 70:12]
    io.m3_io.step1dir <= wb_inter_connect.io.m3_io.step1dir @[SoC_Tile.scala 70:12]
    io.m3_io.step2step <= wb_inter_connect.io.m3_io.step2step @[SoC_Tile.scala 70:12]
    io.m3_io.step1step <= wb_inter_connect.io.m3_io.step1step @[SoC_Tile.scala 70:12]
    wb_inter_connect.io.m3_io.y_homed <= io.m3_io.y_homed @[SoC_Tile.scala 70:12]
    wb_inter_connect.io.m3_io.x_homed <= io.m3_io.x_homed @[SoC_Tile.scala 70:12]
    io.m3_io.pwm_low <= wb_inter_connect.io.m3_io.pwm_low @[SoC_Tile.scala 70:12]
    io.m3_io.pwm_high <= wb_inter_connect.io.m3_io.pwm_high @[SoC_Tile.scala 70:12]
    wb_inter_connect.io.m3_io.qei_ch_b <= io.m3_io.qei_ch_b @[SoC_Tile.scala 70:12]
    wb_inter_connect.io.m3_io.qei_ch_a <= io.m3_io.qei_ch_a @[SoC_Tile.scala 70:12]
    core.io.irq.m1_irq <= wb_inter_connect.io.m1_irq @[SoC_Tile.scala 73:22]
    core.io.irq.m2_irq <= wb_inter_connect.io.m2_irq @[SoC_Tile.scala 74:22]
    core.io.irq.m3_irq <= wb_inter_connect.io.m3_irq @[SoC_Tile.scala 75:22]

