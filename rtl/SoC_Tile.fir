;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.12.4, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:43:20.285, builtAtMillis: 1562607800285
circuit SoC_Tile : 
  module CSR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip stall : UInt<1>, flip cmd : UInt<3>, flip in : UInt<32>, out : UInt<32>, flip pc : UInt<32>, flip addr : UInt<32>, flip inst : UInt<32>, flip illegal : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, flip pc_check : UInt<1>, expt : UInt<1>, evec : UInt<32>, epc : UInt<32>, irq : {flip uart_irq : UInt<1>, flip spi_irq : UInt<1>, flip m1_irq : UInt<1>, flip m2_irq : UInt<1>, flip m3_irq : UInt<1>}, flip br_taken : UInt<1>}
    
    node csr_addr = bits(io.inst, 31, 20) @[csr.scala 108:27]
    node rs1_addr = bits(io.inst, 19, 15) @[csr.scala 109:27]
    reg time : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[csr.scala 112:27]
    reg timeh : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[csr.scala 113:27]
    reg cycle : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[csr.scala 114:27]
    reg cycleh : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[csr.scala 115:27]
    reg instret : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[csr.scala 116:27]
    reg instreth : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[csr.scala 117:27]
    reg mstatus : {sd : UInt<1>, wpri0 : UInt<6>, prv : UInt<2>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, wpri1 : UInt<2>, spp : UInt<1>, mpie : UInt<1>, wpri2 : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, wpri3 : UInt<1>, sie : UInt<1>, uie : UInt<1>}, clock @[csr.scala 131:23]
    reg mie : {wpri4 : UInt<11>, motor3ie : UInt<1>, motor2ie : UInt<1>, motor1ie : UInt<1>, spiie : UInt<1>, uartie : UInt<1>, wpri3 : UInt<4>, meie : UInt<1>, wpri2 : UInt<1>, seie : UInt<1>, ueie : UInt<1>, mtie : UInt<1>, wpri1 : UInt<1>, stie : UInt<1>, utie : UInt<1>, msie : UInt<1>, wpri0 : UInt<1>, ssie : UInt<1>, usie : UInt<1>}, clock @[csr.scala 132:23]
    reg mip_reg : {wpri4 : UInt<11>, motor1ip : UInt<1>, motor2ip : UInt<1>, motor3ip : UInt<1>, spiip : UInt<1>, uartip : UInt<1>, wpri3 : UInt<4>, meip : UInt<1>, wpri2 : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, wpri1 : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, wpri0 : UInt<1>, ssip : UInt<1>, usip : UInt<1>}, clock @[csr.scala 133:23]
    reg mip : {wpri4 : UInt<11>, motor1ip : UInt<1>, motor2ip : UInt<1>, motor3ip : UInt<1>, spiip : UInt<1>, uartip : UInt<1>, wpri3 : UInt<4>, meip : UInt<1>, wpri2 : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, wpri1 : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, wpri0 : UInt<1>, ssip : UInt<1>, usip : UInt<1>}, clock with : (reset => (reset, mip_reg)) @[csr.scala 134:27]
    reg mtvec : UInt<32>, clock with : (reset => (reset, UInt<32>("h09"))) @[csr.scala 138:27]
    reg mscratch : UInt<32>, clock @[csr.scala 141:23]
    reg mepc : UInt<32>, clock @[csr.scala 142:23]
    reg mcause : UInt<32>, clock @[csr.scala 143:23]
    reg mtval : UInt<32>, clock @[csr.scala 144:23]
    node _T_114 = bits(reset, 0, 0) @[csr.scala 147:14]
    when _T_114 : @[csr.scala 148:3]
      mie.motor3ie <= UInt<1>("h00") @[csr.scala 149:19]
      mie.motor2ie <= UInt<1>("h00") @[csr.scala 150:19]
      mie.motor1ie <= UInt<1>("h00") @[csr.scala 151:19]
      mie.spiie <= UInt<1>("h00") @[csr.scala 152:18]
      mie.uartie <= UInt<1>("h01") @[csr.scala 153:18]
      mstatus.mie <= UInt<1>("h01") @[csr.scala 154:18]
      mstatus.prv <= UInt<2>("h03") @[csr.scala 155:18]
      mstatus.mpp <= UInt<2>("h03") @[csr.scala 156:18]
      skip @[csr.scala 148:3]
    node _T_147 = cat(mie.ssie, mie.usie) @[csr.scala 168:34]
    node _T_148 = cat(mie.msie, mie.wpri0) @[csr.scala 168:34]
    node _T_149 = cat(_T_148, _T_147) @[csr.scala 168:34]
    node _T_150 = cat(mie.stie, mie.utie) @[csr.scala 168:34]
    node _T_151 = cat(mie.ueie, mie.mtie) @[csr.scala 168:34]
    node _T_152 = cat(_T_151, mie.wpri1) @[csr.scala 168:34]
    node _T_153 = cat(_T_152, _T_150) @[csr.scala 168:34]
    node _T_154 = cat(_T_153, _T_149) @[csr.scala 168:34]
    node _T_155 = cat(mie.wpri2, mie.seie) @[csr.scala 168:34]
    node _T_156 = cat(mie.uartie, mie.wpri3) @[csr.scala 168:34]
    node _T_157 = cat(_T_156, mie.meie) @[csr.scala 168:34]
    node _T_158 = cat(_T_157, _T_155) @[csr.scala 168:34]
    node _T_159 = cat(mie.motor1ie, mie.spiie) @[csr.scala 168:34]
    node _T_160 = cat(mie.wpri4, mie.motor3ie) @[csr.scala 168:34]
    node _T_161 = cat(_T_160, mie.motor2ie) @[csr.scala 168:34]
    node _T_162 = cat(_T_161, _T_159) @[csr.scala 168:34]
    node _T_163 = cat(_T_162, _T_158) @[csr.scala 168:34]
    node _T_164 = cat(_T_163, _T_154) @[csr.scala 168:34]
    node _T_165 = cat(mip.ssip, mip.usip) @[csr.scala 173:34]
    node _T_166 = cat(mip.msip, mip.wpri0) @[csr.scala 173:34]
    node _T_167 = cat(_T_166, _T_165) @[csr.scala 173:34]
    node _T_168 = cat(mip.stip, mip.utip) @[csr.scala 173:34]
    node _T_169 = cat(mip.ueip, mip.mtip) @[csr.scala 173:34]
    node _T_170 = cat(_T_169, mip.wpri1) @[csr.scala 173:34]
    node _T_171 = cat(_T_170, _T_168) @[csr.scala 173:34]
    node _T_172 = cat(_T_171, _T_167) @[csr.scala 173:34]
    node _T_173 = cat(mip.wpri2, mip.seip) @[csr.scala 173:34]
    node _T_174 = cat(mip.uartip, mip.wpri3) @[csr.scala 173:34]
    node _T_175 = cat(_T_174, mip.meip) @[csr.scala 173:34]
    node _T_176 = cat(_T_175, _T_173) @[csr.scala 173:34]
    node _T_177 = cat(mip.motor3ip, mip.spiip) @[csr.scala 173:34]
    node _T_178 = cat(mip.wpri4, mip.motor1ip) @[csr.scala 173:34]
    node _T_179 = cat(_T_178, mip.motor2ip) @[csr.scala 173:34]
    node _T_180 = cat(_T_179, _T_177) @[csr.scala 173:34]
    node _T_181 = cat(_T_180, _T_176) @[csr.scala 173:34]
    node _T_182 = cat(_T_181, _T_172) @[csr.scala 173:34]
    node _T_183 = cat(mstatus.sie, mstatus.uie) @[csr.scala 174:38]
    node _T_184 = cat(mstatus.upie, mstatus.mie) @[csr.scala 174:38]
    node _T_185 = cat(_T_184, mstatus.wpri3) @[csr.scala 174:38]
    node _T_186 = cat(_T_185, _T_183) @[csr.scala 174:38]
    node _T_187 = cat(mstatus.mpie, mstatus.wpri2) @[csr.scala 174:38]
    node _T_188 = cat(_T_187, mstatus.spie) @[csr.scala 174:38]
    node _T_189 = cat(mstatus.mpp, mstatus.wpri1) @[csr.scala 174:38]
    node _T_190 = cat(_T_189, mstatus.spp) @[csr.scala 174:38]
    node _T_191 = cat(_T_190, _T_188) @[csr.scala 174:38]
    node _T_192 = cat(_T_191, _T_186) @[csr.scala 174:38]
    node _T_193 = cat(mstatus.xs, mstatus.fs) @[csr.scala 174:38]
    node _T_194 = cat(mstatus.mxr, mstatus.sum) @[csr.scala 174:38]
    node _T_195 = cat(_T_194, mstatus.mprv) @[csr.scala 174:38]
    node _T_196 = cat(_T_195, _T_193) @[csr.scala 174:38]
    node _T_197 = cat(mstatus.tsr, mstatus.tw) @[csr.scala 174:38]
    node _T_198 = cat(_T_197, mstatus.tvm) @[csr.scala 174:38]
    node _T_199 = cat(mstatus.sd, mstatus.wpri0) @[csr.scala 174:38]
    node _T_200 = cat(_T_199, mstatus.prv) @[csr.scala 174:38]
    node _T_201 = cat(_T_200, _T_198) @[csr.scala 174:38]
    node _T_202 = cat(_T_201, _T_196) @[csr.scala 174:38]
    node _T_203 = cat(_T_202, _T_192) @[csr.scala 174:38]
    node _T_207 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_208 = eq(UInt<12>("h0c00"), _T_207) @[Lookup.scala 9:38]
    node _T_211 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_212 = eq(UInt<12>("h0c01"), _T_211) @[Lookup.scala 9:38]
    node _T_215 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_216 = eq(UInt<12>("h0c02"), _T_215) @[Lookup.scala 9:38]
    node _T_219 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_220 = eq(UInt<12>("h0c80"), _T_219) @[Lookup.scala 9:38]
    node _T_223 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_224 = eq(UInt<12>("h0c81"), _T_223) @[Lookup.scala 9:38]
    node _T_227 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_228 = eq(UInt<12>("h0c82"), _T_227) @[Lookup.scala 9:38]
    node _T_231 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_232 = eq(UInt<10>("h0305"), _T_231) @[Lookup.scala 9:38]
    node _T_235 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_236 = eq(UInt<10>("h0304"), _T_235) @[Lookup.scala 9:38]
    node _T_239 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_240 = eq(UInt<10>("h0340"), _T_239) @[Lookup.scala 9:38]
    node _T_243 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_244 = eq(UInt<10>("h0341"), _T_243) @[Lookup.scala 9:38]
    node _T_247 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_248 = eq(UInt<10>("h0342"), _T_247) @[Lookup.scala 9:38]
    node _T_251 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_252 = eq(UInt<10>("h0343"), _T_251) @[Lookup.scala 9:38]
    node _T_255 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_256 = eq(UInt<10>("h0344"), _T_255) @[Lookup.scala 9:38]
    node _T_259 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_260 = eq(UInt<10>("h0300"), _T_259) @[Lookup.scala 9:38]
    node _T_263 = and(csr_addr, UInt<12>("h0fff")) @[Lookup.scala 9:38]
    node _T_264 = eq(UInt<10>("h0301"), _T_263) @[Lookup.scala 9:38]
    node _T_265 = mux(_T_264, UInt<32>("h040000100"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_266 = mux(_T_260, _T_203, _T_265) @[Lookup.scala 11:37]
    node _T_267 = mux(_T_256, _T_182, _T_266) @[Lookup.scala 11:37]
    node _T_268 = mux(_T_252, mtval, _T_267) @[Lookup.scala 11:37]
    node _T_269 = mux(_T_248, mcause, _T_268) @[Lookup.scala 11:37]
    node _T_270 = mux(_T_244, mepc, _T_269) @[Lookup.scala 11:37]
    node _T_271 = mux(_T_240, mscratch, _T_270) @[Lookup.scala 11:37]
    node _T_272 = mux(_T_236, _T_164, _T_271) @[Lookup.scala 11:37]
    node _T_273 = mux(_T_232, mtvec, _T_272) @[Lookup.scala 11:37]
    node _T_274 = mux(_T_228, instreth, _T_273) @[Lookup.scala 11:37]
    node _T_275 = mux(_T_224, timeh, _T_274) @[Lookup.scala 11:37]
    node _T_276 = mux(_T_220, cycleh, _T_275) @[Lookup.scala 11:37]
    node _T_277 = mux(_T_216, instret, _T_276) @[Lookup.scala 11:37]
    node _T_278 = mux(_T_212, time, _T_277) @[Lookup.scala 11:37]
    node _T_279 = mux(_T_208, cycle, _T_278) @[Lookup.scala 11:37]
    io.out <= _T_279 @[csr.scala 179:10]
    node _T_280 = bits(csr_addr, 9, 8) @[csr.scala 182:31]
    node privValid = leq(_T_280, mstatus.prv) @[csr.scala 182:38]
    node privInst = eq(io.cmd, UInt<3>("h04")) @[csr.scala 183:30]
    node _T_281 = bits(csr_addr, 0, 0) @[csr.scala 184:44]
    node _T_283 = eq(_T_281, UInt<1>("h00")) @[csr.scala 184:35]
    node _T_284 = and(privInst, _T_283) @[csr.scala 184:32]
    node _T_285 = bits(csr_addr, 8, 8) @[csr.scala 184:60]
    node _T_287 = eq(_T_285, UInt<1>("h00")) @[csr.scala 184:51]
    node isEcall = and(_T_284, _T_287) @[csr.scala 184:48]
    node _T_288 = bits(csr_addr, 0, 0) @[csr.scala 185:44]
    node _T_289 = and(privInst, _T_288) @[csr.scala 185:32]
    node _T_290 = bits(csr_addr, 8, 8) @[csr.scala 185:60]
    node _T_292 = eq(_T_290, UInt<1>("h00")) @[csr.scala 185:51]
    node isEbreak = and(_T_289, _T_292) @[csr.scala 185:48]
    node _T_293 = bits(csr_addr, 0, 0) @[csr.scala 186:44]
    node _T_295 = eq(_T_293, UInt<1>("h00")) @[csr.scala 186:35]
    node _T_296 = and(privInst, _T_295) @[csr.scala 186:32]
    node _T_297 = bits(csr_addr, 8, 8) @[csr.scala 186:60]
    node isEret = and(_T_296, _T_297) @[csr.scala 186:48]
    node _T_298 = bits(io.addr, 1, 1) @[csr.scala 187:45]
    node iaddrInvalid = and(io.pc_check, _T_298) @[csr.scala 187:35]
    node _T_300 = bits(io.addr, 1, 0) @[csr.scala 189:49]
    node _T_302 = neq(_T_300, UInt<1>("h00")) @[csr.scala 189:56]
    node _T_303 = bits(io.addr, 0, 0) @[csr.scala 189:77]
    node _T_304 = bits(io.addr, 0, 0) @[csr.scala 189:99]
    node _T_305 = eq(UInt<3>("h04"), io.ld_type) @[Mux.scala 46:19]
    node _T_306 = mux(_T_305, _T_304, UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_307 = eq(UInt<3>("h02"), io.ld_type) @[Mux.scala 46:19]
    node _T_308 = mux(_T_307, _T_303, _T_306) @[Mux.scala 46:16]
    node _T_309 = eq(UInt<3>("h01"), io.ld_type) @[Mux.scala 46:19]
    node laddrInvalid = mux(_T_309, _T_302, _T_308) @[Mux.scala 46:16]
    node _T_311 = bits(io.addr, 1, 0) @[csr.scala 191:49]
    node _T_313 = neq(_T_311, UInt<1>("h00")) @[csr.scala 191:56]
    node _T_314 = bits(io.addr, 0, 0) @[csr.scala 191:77]
    node _T_315 = eq(UInt<2>("h02"), io.st_type) @[Mux.scala 46:19]
    node _T_316 = mux(_T_315, _T_314, UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_317 = eq(UInt<2>("h01"), io.st_type) @[Mux.scala 46:19]
    node saddrInvalid = mux(_T_317, _T_313, _T_316) @[Mux.scala 46:16]
    node isMotor1 = and(mip.motor1ip, mie.motor1ie) @[csr.scala 193:37]
    node isMotor2 = and(mip.motor2ip, mie.motor2ie) @[csr.scala 194:37]
    node isMotor3 = and(mip.motor3ip, mie.motor3ie) @[csr.scala 195:37]
    node isSpi = and(mip.spiip, mie.spiie) @[csr.scala 196:35]
    node isUart = and(mip.uartip, mie.uartie) @[csr.scala 197:36]
    node isTimer = and(mip.mtip, mie.mtie) @[csr.scala 198:36]
    node isExternal = and(mip.meip, mie.meie) @[csr.scala 199:36]
    node isSoftware = and(mip.msip, mie.msie) @[csr.scala 200:36]
    node _T_320 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_321 = eq(UInt<12>("h0c00"), _T_320) @[csr.scala 203:41]
    node _T_324 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_325 = eq(UInt<12>("h0c01"), _T_324) @[csr.scala 203:41]
    node _T_328 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_329 = eq(UInt<12>("h0c02"), _T_328) @[csr.scala 203:41]
    node _T_332 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_333 = eq(UInt<12>("h0c80"), _T_332) @[csr.scala 203:41]
    node _T_336 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_337 = eq(UInt<12>("h0c81"), _T_336) @[csr.scala 203:41]
    node _T_340 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_341 = eq(UInt<12>("h0c82"), _T_340) @[csr.scala 203:41]
    node _T_344 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_345 = eq(UInt<10>("h0305"), _T_344) @[csr.scala 203:41]
    node _T_348 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_349 = eq(UInt<10>("h0304"), _T_348) @[csr.scala 203:41]
    node _T_352 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_353 = eq(UInt<10>("h0340"), _T_352) @[csr.scala 203:41]
    node _T_356 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_357 = eq(UInt<10>("h0341"), _T_356) @[csr.scala 203:41]
    node _T_360 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_361 = eq(UInt<10>("h0342"), _T_360) @[csr.scala 203:41]
    node _T_364 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_365 = eq(UInt<10>("h0343"), _T_364) @[csr.scala 203:41]
    node _T_368 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_369 = eq(UInt<10>("h0344"), _T_368) @[csr.scala 203:41]
    node _T_372 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_373 = eq(UInt<10>("h0300"), _T_372) @[csr.scala 203:41]
    node _T_376 = and(csr_addr, UInt<12>("h0fff")) @[csr.scala 203:41]
    node _T_377 = eq(UInt<10>("h0301"), _T_376) @[csr.scala 203:41]
    node _T_378 = or(_T_321, _T_325) @[csr.scala 203:65]
    node _T_379 = or(_T_378, _T_329) @[csr.scala 203:65]
    node _T_380 = or(_T_379, _T_333) @[csr.scala 203:65]
    node _T_381 = or(_T_380, _T_337) @[csr.scala 203:65]
    node _T_382 = or(_T_381, _T_341) @[csr.scala 203:65]
    node _T_383 = or(_T_382, _T_345) @[csr.scala 203:65]
    node _T_384 = or(_T_383, _T_349) @[csr.scala 203:65]
    node _T_385 = or(_T_384, _T_353) @[csr.scala 203:65]
    node _T_386 = or(_T_385, _T_357) @[csr.scala 203:65]
    node _T_387 = or(_T_386, _T_361) @[csr.scala 203:65]
    node _T_388 = or(_T_387, _T_365) @[csr.scala 203:65]
    node _T_389 = or(_T_388, _T_369) @[csr.scala 203:65]
    node _T_390 = or(_T_389, _T_373) @[csr.scala 203:65]
    node csrValid = or(_T_390, _T_377) @[csr.scala 203:65]
    node _T_391 = bits(csr_addr, 11, 10) @[csr.scala 204:31]
    node _T_392 = not(_T_391) @[csr.scala 204:40]
    node csrRO = eq(_T_392, UInt<1>("h00")) @[csr.scala 204:40]
    node _T_394 = eq(io.cmd, UInt<3>("h01")) @[csr.scala 205:30]
    node _T_395 = bits(io.cmd, 1, 1) @[csr.scala 205:49]
    node _T_397 = neq(rs1_addr, UInt<1>("h00")) @[csr.scala 205:65]
    node _T_398 = and(_T_395, _T_397) @[csr.scala 205:53]
    node wen = or(_T_394, _T_398) @[csr.scala 205:40]
    node _T_400 = or(io.out, io.in) @[csr.scala 207:68]
    node _T_401 = not(io.in) @[csr.scala 208:70]
    node _T_402 = and(io.out, _T_401) @[csr.scala 208:68]
    node _T_403 = eq(UInt<3>("h03"), io.cmd) @[Mux.scala 46:19]
    node _T_404 = mux(_T_403, _T_402, UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_405 = eq(UInt<3>("h02"), io.cmd) @[Mux.scala 46:19]
    node _T_406 = mux(_T_405, _T_400, _T_404) @[Mux.scala 46:16]
    node _T_407 = eq(UInt<3>("h01"), io.cmd) @[Mux.scala 46:19]
    node wdata = mux(_T_407, io.in, _T_406) @[Mux.scala 46:16]
    node _T_422 = add(UInt<30>("h08"), mstatus.prv) @[csr.scala 214:50]
    node _T_423 = tail(_T_422, 1) @[csr.scala 214:50]
    node _T_424 = mux(isEbreak, UInt<30>("h03"), UInt<30>("h02")) @[csr.scala 215:22]
    node _T_425 = mux(isEcall, _T_423, _T_424) @[csr.scala 214:22]
    node _T_426 = mux(saddrInvalid, UInt<30>("h06"), _T_425) @[csr.scala 213:22]
    node _T_427 = mux(laddrInvalid, UInt<30>("h04"), _T_426) @[csr.scala 212:22]
    node causeExpt = mux(iaddrInvalid, UInt<30>("h00"), _T_427) @[csr.scala 211:22]
    node _T_428 = mux(isMotor2, UInt<30>("h013"), UInt<30>("h014")) @[csr.scala 223:22]
    node _T_429 = mux(isMotor1, UInt<30>("h012"), _T_428) @[csr.scala 222:22]
    node _T_430 = mux(isSpi, UInt<30>("h011"), _T_429) @[csr.scala 221:22]
    node _T_431 = mux(isUart, UInt<30>("h010"), _T_430) @[csr.scala 220:22]
    node _T_432 = mux(isTimer, UInt<30>("h07"), _T_431) @[csr.scala 219:22]
    node _T_433 = mux(isExternal, UInt<30>("h0b"), _T_432) @[csr.scala 218:22]
    node causeInt = mux(isSoftware, UInt<30>("h03"), _T_433) @[csr.scala 217:22]
    node _T_434 = or(isMotor1, isMotor2) @[csr.scala 226:30]
    node _T_435 = or(_T_434, isMotor3) @[csr.scala 226:42]
    node _T_436 = or(_T_435, isSpi) @[csr.scala 226:54]
    node _T_437 = or(_T_436, isUart) @[csr.scala 226:63]
    node _T_438 = or(_T_437, isTimer) @[csr.scala 226:73]
    node _T_439 = or(_T_438, isExternal) @[csr.scala 226:84]
    node _T_440 = or(_T_439, isSoftware) @[csr.scala 226:98]
    node isInt = and(_T_440, mstatus.mie) @[csr.scala 226:113]
    node cause = mux(isInt, causeInt, causeExpt) @[csr.scala 227:23]
    node _T_441 = shr(mtvec, 2) @[csr.scala 230:26]
    node base = shl(_T_441, 2) @[csr.scala 230:31]
    node mode = bits(mtvec, 1, 0) @[csr.scala 231:25]
    node _T_442 = bits(mode, 0, 0) @[csr.scala 232:38]
    node _T_443 = and(isInt, _T_442) @[csr.scala 232:31]
    node _T_444 = shl(cause, 2) @[csr.scala 232:57]
    node _T_445 = add(base, _T_444) @[csr.scala 232:48]
    node _T_446 = tail(_T_445, 1) @[csr.scala 232:48]
    node _T_447 = mux(_T_443, _T_446, base) @[csr.scala 232:24]
    io.evec <= _T_447 @[csr.scala 232:18]
    node _T_448 = or(io.illegal, iaddrInvalid) @[csr.scala 235:33]
    node _T_449 = or(_T_448, laddrInvalid) @[csr.scala 235:49]
    node _T_450 = or(_T_449, saddrInvalid) @[csr.scala 235:65]
    node _T_451 = bits(io.cmd, 1, 0) @[csr.scala 236:28]
    node _T_453 = neq(_T_451, UInt<1>("h00")) @[csr.scala 236:35]
    node _T_455 = eq(csrValid, UInt<1>("h00")) @[csr.scala 236:43]
    node _T_457 = eq(privValid, UInt<1>("h00")) @[csr.scala 236:56]
    node _T_458 = or(_T_455, _T_457) @[csr.scala 236:53]
    node _T_459 = and(_T_453, _T_458) @[csr.scala 236:39]
    node _T_460 = or(_T_450, _T_459) @[csr.scala 235:81]
    node _T_461 = and(wen, csrRO) @[csr.scala 236:75]
    node _T_462 = or(_T_460, _T_461) @[csr.scala 236:68]
    node _T_464 = eq(privValid, UInt<1>("h00")) @[csr.scala 237:35]
    node _T_465 = and(privInst, _T_464) @[csr.scala 237:32]
    node _T_466 = or(_T_462, _T_465) @[csr.scala 236:84]
    node _T_467 = or(_T_466, isEcall) @[csr.scala 237:47]
    node _T_468 = or(_T_467, isEbreak) @[csr.scala 237:58]
    node _T_469 = or(_T_468, isInt) @[csr.scala 237:70]
    io.expt <= _T_469 @[csr.scala 235:18]
    io.epc <= mepc @[csr.scala 238:18]
    node _T_471 = add(time, UInt<1>("h01")) @[csr.scala 241:26]
    node _T_472 = tail(_T_471, 1) @[csr.scala 241:26]
    time <= _T_472 @[csr.scala 241:18]
    node _T_473 = not(time) @[csr.scala 242:13]
    node _T_475 = eq(_T_473, UInt<1>("h00")) @[csr.scala 242:13]
    when _T_475 : @[csr.scala 242:19]
      node _T_477 = add(timeh, UInt<1>("h01")) @[csr.scala 243:27]
      node _T_478 = tail(_T_477, 1) @[csr.scala 243:27]
      timeh <= _T_478 @[csr.scala 243:18]
      skip @[csr.scala 242:19]
    node _T_480 = add(cycle, UInt<1>("h01")) @[csr.scala 245:27]
    node _T_481 = tail(_T_480, 1) @[csr.scala 245:27]
    cycle <= _T_481 @[csr.scala 245:18]
    node _T_482 = not(cycle) @[csr.scala 246:14]
    node _T_484 = eq(_T_482, UInt<1>("h00")) @[csr.scala 246:14]
    when _T_484 : @[csr.scala 246:20]
      node _T_486 = add(cycleh, UInt<1>("h01")) @[csr.scala 247:28]
      node _T_487 = tail(_T_486, 1) @[csr.scala 247:28]
      cycleh <= _T_487 @[csr.scala 247:18]
      skip @[csr.scala 246:20]
    node _T_489 = neq(io.inst, UInt<32>("h013")) @[csr.scala 249:28]
    node _T_491 = eq(io.expt, UInt<1>("h00")) @[csr.scala 249:53]
    node _T_492 = or(_T_491, isEcall) @[csr.scala 249:62]
    node _T_493 = or(_T_492, isEbreak) @[csr.scala 249:73]
    node _T_494 = and(_T_489, _T_493) @[csr.scala 249:49]
    node _T_496 = eq(io.stall, UInt<1>("h00")) @[csr.scala 249:89]
    node isInstRet = and(_T_494, _T_496) @[csr.scala 249:86]
    when isInstRet : @[csr.scala 251:19]
      node _T_498 = add(instret, UInt<1>("h01")) @[csr.scala 252:29]
      node _T_499 = tail(_T_498, 1) @[csr.scala 252:29]
      instret <= _T_499 @[csr.scala 252:18]
      skip @[csr.scala 251:19]
    node _T_500 = not(instret) @[csr.scala 254:29]
    node _T_502 = eq(_T_500, UInt<1>("h00")) @[csr.scala 254:29]
    node _T_503 = and(isInstRet, _T_502) @[csr.scala 254:18]
    when _T_503 : @[csr.scala 254:35]
      node _T_505 = add(instreth, UInt<1>("h01")) @[csr.scala 255:30]
      node _T_506 = tail(_T_505, 1) @[csr.scala 255:30]
      instreth <= _T_506 @[csr.scala 255:18]
      skip @[csr.scala 254:35]
    reg wasEret : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[csr.scala 259:28]
    wasEret <= isEret @[csr.scala 260:19]
    reg br_taken : UInt<1>, clock @[csr.scala 263:30]
    reg br_taken_delayed : UInt<1>, clock @[csr.scala 264:30]
    br_taken <= io.br_taken @[csr.scala 265:24]
    br_taken_delayed <= br_taken @[csr.scala 266:24]
    node _T_512 = eq(io.stall, UInt<1>("h00")) @[csr.scala 268:8]
    when _T_512 : @[csr.scala 268:20]
      when io.expt : @[csr.scala 269:19]
        node _T_514 = eq(wasEret, UInt<1>("h00")) @[csr.scala 273:12]
        when _T_514 : @[csr.scala 274:7]
          node _T_516 = sub(io.pc, UInt<3>("h04")) @[csr.scala 274:54]
          node _T_517 = asUInt(_T_516) @[csr.scala 274:54]
          node _T_518 = tail(_T_517, 1) @[csr.scala 274:54]
          node _T_519 = mux(br_taken_delayed, _T_518, io.pc) @[csr.scala 274:29]
          node _T_520 = shr(_T_519, 2) @[csr.scala 274:69]
          node _T_521 = shl(_T_520, 2) @[csr.scala 274:74]
          mepc <= _T_521 @[csr.scala 274:22]
          skip @[csr.scala 274:7]
        node _T_524 = mux(isInt, UInt<1>("h01"), UInt<1>("h00")) @[csr.scala 277:32]
        node _T_526 = cat(_T_524, UInt<1>("h00")) @[Cat.scala 30:58]
        node _T_527 = cat(_T_526, cause) @[Cat.scala 30:58]
        mcause <= _T_527 @[csr.scala 277:22]
        mstatus.prv <= UInt<2>("h03") @[csr.scala 278:22]
        mstatus.mie <= UInt<1>("h00") @[csr.scala 279:22]
        mstatus.mpp <= mstatus.prv @[csr.scala 280:22]
        mstatus.mpie <= mstatus.mie @[csr.scala 281:22]
        node _T_529 = or(iaddrInvalid, laddrInvalid) @[csr.scala 282:25]
        node _T_530 = or(_T_529, saddrInvalid) @[csr.scala 282:41]
        when _T_530 : @[csr.scala 282:58]
          mtval <= io.addr @[csr.scala 282:66]
          skip @[csr.scala 282:58]
        skip @[csr.scala 269:19]
      else : @[csr.scala 283:24]
        when isEret : @[csr.scala 283:24]
          mstatus.prv <= mstatus.mpp @[csr.scala 284:22]
          mstatus.mie <= mstatus.mpie @[csr.scala 285:22]
          mstatus.mpp <= UInt<2>("h03") @[csr.scala 286:22]
          mstatus.mpie <= UInt<1>("h01") @[csr.scala 287:22]
          skip @[csr.scala 283:24]
        else : @[csr.scala 288:21]
          when wen : @[csr.scala 288:21]
            node _T_532 = eq(csr_addr, UInt<12>("h0300")) @[csr.scala 289:21]
            when _T_532 : @[csr.scala 289:38]
              node _T_533 = bits(wdata, 12, 11) @[csr.scala 290:30]
              mstatus.mpp <= _T_533 @[csr.scala 290:22]
              node _T_534 = bits(wdata, 7, 7) @[csr.scala 291:30]
              mstatus.mpie <= _T_534 @[csr.scala 291:22]
              node _T_535 = bits(wdata, 24, 23) @[csr.scala 292:30]
              mstatus.prv <= _T_535 @[csr.scala 292:22]
              node _T_536 = bits(wdata, 3, 3) @[csr.scala 293:30]
              mstatus.mie <= _T_536 @[csr.scala 293:22]
              skip @[csr.scala 289:38]
            else : @[csr.scala 295:39]
              node _T_537 = eq(csr_addr, UInt<12>("h0344")) @[csr.scala 295:26]
              when _T_537 : @[csr.scala 295:39]
                node _T_538 = bits(wdata, 20, 20) @[csr.scala 296:30]
                mip.motor3ip <= _T_538 @[csr.scala 296:22]
                node _T_539 = bits(wdata, 19, 19) @[csr.scala 297:30]
                mip.motor2ip <= _T_539 @[csr.scala 297:22]
                node _T_540 = bits(wdata, 18, 18) @[csr.scala 298:30]
                mip.motor1ip <= _T_540 @[csr.scala 298:22]
                node _T_541 = bits(wdata, 17, 17) @[csr.scala 299:30]
                mip.spiip <= _T_541 @[csr.scala 299:22]
                node _T_542 = bits(wdata, 16, 16) @[csr.scala 300:30]
                mip.uartip <= _T_542 @[csr.scala 300:22]
                node _T_543 = bits(wdata, 7, 7) @[csr.scala 301:30]
                mip.mtip <= _T_543 @[csr.scala 301:22]
                node _T_544 = bits(wdata, 3, 3) @[csr.scala 302:30]
                mip.msip <= _T_544 @[csr.scala 302:22]
                skip @[csr.scala 295:39]
              else : @[csr.scala 304:39]
                node _T_545 = eq(csr_addr, UInt<12>("h0304")) @[csr.scala 304:26]
                when _T_545 : @[csr.scala 304:39]
                  node _T_546 = bits(wdata, 20, 20) @[csr.scala 305:30]
                  mie.motor3ie <= _T_546 @[csr.scala 305:22]
                  node _T_547 = bits(wdata, 19, 19) @[csr.scala 306:30]
                  mie.motor2ie <= _T_547 @[csr.scala 306:22]
                  node _T_548 = bits(wdata, 18, 18) @[csr.scala 307:30]
                  mie.motor1ie <= _T_548 @[csr.scala 307:22]
                  node _T_549 = bits(wdata, 17, 17) @[csr.scala 308:30]
                  mie.spiie <= _T_549 @[csr.scala 308:22]
                  node _T_550 = bits(wdata, 16, 16) @[csr.scala 309:30]
                  mie.uartie <= _T_550 @[csr.scala 309:22]
                  node _T_551 = bits(wdata, 7, 7) @[csr.scala 310:30]
                  mie.mtie <= _T_551 @[csr.scala 310:22]
                  node _T_552 = bits(wdata, 3, 3) @[csr.scala 311:30]
                  mie.msie <= _T_552 @[csr.scala 311:22]
                  skip @[csr.scala 304:39]
                else : @[csr.scala 313:41]
                  node _T_553 = eq(csr_addr, UInt<12>("h0305")) @[csr.scala 313:26]
                  when _T_553 : @[csr.scala 313:41]
                    mtvec <= wdata @[csr.scala 313:49]
                    skip @[csr.scala 313:41]
                  else : @[csr.scala 314:44]
                    node _T_554 = eq(csr_addr, UInt<12>("h0340")) @[csr.scala 314:26]
                    when _T_554 : @[csr.scala 314:44]
                      mscratch <= wdata @[csr.scala 314:55]
                      skip @[csr.scala 314:44]
                    else : @[csr.scala 315:40]
                      node _T_555 = eq(csr_addr, UInt<12>("h0341")) @[csr.scala 315:26]
                      when _T_555 : @[csr.scala 315:40]
                        node _T_557 = dshr(wdata, UInt<2>("h02")) @[csr.scala 315:56]
                        node _T_559 = dshl(_T_557, UInt<2>("h02")) @[csr.scala 315:63]
                        mepc <= _T_559 @[csr.scala 315:47]
                        skip @[csr.scala 315:40]
                      else : @[csr.scala 316:42]
                        node _T_560 = eq(csr_addr, UInt<12>("h0342")) @[csr.scala 316:26]
                        when _T_560 : @[csr.scala 316:42]
                          node _T_562 = and(wdata, UInt<32>("h08000000f")) @[csr.scala 316:60]
                          mcause <= _T_562 @[csr.scala 316:51]
                          skip @[csr.scala 316:42]
                        else : @[csr.scala 317:41]
                          node _T_563 = eq(csr_addr, UInt<12>("h0343")) @[csr.scala 317:26]
                          when _T_563 : @[csr.scala 317:41]
                            mtval <= wdata @[csr.scala 317:49]
                            skip @[csr.scala 317:41]
            skip @[csr.scala 288:21]
      mip.uartip <= io.irq.uart_irq @[csr.scala 320:21]
      mip.spiip <= io.irq.spi_irq @[csr.scala 321:21]
      mip.motor1ip <= io.irq.m1_irq @[csr.scala 322:21]
      mip.motor2ip <= io.irq.m2_irq @[csr.scala 323:21]
      mip.motor3ip <= io.irq.m3_irq @[csr.scala 324:21]
      skip @[csr.scala 268:20]
    
  module RegFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip raddr_1 : UInt<5>, flip raddr_2 : UInt<5>, rdata_1 : UInt<32>, rdata_2 : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>}
    
    cmem regs : UInt<32>[32] @[reg_file.scala 31:17]
    node _T_22 = neq(io.raddr_1, UInt<1>("h00")) @[reg_file.scala 33:33]
    infer mport _T_23 = regs[io.raddr_1], clock @[reg_file.scala 33:43]
    node _T_25 = mux(_T_22, _T_23, UInt<1>("h00")) @[reg_file.scala 33:20]
    io.rdata_1 <= _T_25 @[reg_file.scala 33:14]
    node _T_27 = neq(io.raddr_2, UInt<1>("h00")) @[reg_file.scala 34:33]
    infer mport _T_28 = regs[io.raddr_2], clock @[reg_file.scala 34:43]
    node _T_30 = mux(_T_27, _T_28, UInt<1>("h00")) @[reg_file.scala 34:20]
    io.rdata_2 <= _T_30 @[reg_file.scala 34:14]
    node _T_32 = neq(io.waddr, UInt<1>("h00")) @[reg_file.scala 36:26]
    node _T_33 = and(io.wen, _T_32) @[reg_file.scala 36:15]
    when _T_33 : @[reg_file.scala 36:31]
      infer mport _T_34 = regs[io.waddr], clock @[reg_file.scala 37:9]
      _T_34 <= io.wdata @[reg_file.scala 37:20]
      skip @[reg_file.scala 36:31]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in_a : UInt<32>, flip in_b : UInt<32>, flip alu_op : UInt<4>, out : UInt<32>, sum : UInt<32>}
    
    node _T_15 = bits(io.alu_op, 0, 0) @[alu.scala 45:39]
    node _T_17 = sub(UInt<1>("h00"), io.in_b) @[alu.scala 45:44]
    node _T_18 = asUInt(_T_17) @[alu.scala 45:44]
    node _T_19 = tail(_T_18, 1) @[alu.scala 45:44]
    node _T_20 = mux(_T_15, _T_19, io.in_b) @[alu.scala 45:29]
    node _T_21 = add(io.in_a, _T_20) @[alu.scala 45:24]
    node sum = tail(_T_21, 1) @[alu.scala 45:24]
    node _T_22 = bits(io.in_a, 31, 31) @[alu.scala 46:28]
    node _T_23 = bits(io.in_b, 31, 31) @[alu.scala 46:48]
    node _T_24 = eq(_T_22, _T_23) @[alu.scala 46:37]
    node _T_25 = bits(sum, 31, 31) @[alu.scala 46:61]
    node _T_26 = bits(io.alu_op, 1, 1) @[alu.scala 47:33]
    node _T_27 = bits(io.in_b, 31, 31) @[alu.scala 47:45]
    node _T_28 = bits(io.in_a, 31, 31) @[alu.scala 47:62]
    node _T_29 = mux(_T_26, _T_27, _T_28) @[alu.scala 47:23]
    node cmp = mux(_T_24, _T_25, _T_29) @[alu.scala 46:19]
    node shamt = bits(io.in_b, 4, 0) @[alu.scala 48:23]
    node _T_30 = bits(io.alu_op, 3, 3) @[alu.scala 49:29]
    node _T_33 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _T_34 = xor(UInt<32>("h0ffffffff"), _T_33) @[Bitwise.scala 102:21]
    node _T_35 = shr(io.in_a, 16) @[Bitwise.scala 103:21]
    node _T_36 = and(_T_35, _T_34) @[Bitwise.scala 103:31]
    node _T_37 = bits(io.in_a, 15, 0) @[Bitwise.scala 103:46]
    node _T_38 = shl(_T_37, 16) @[Bitwise.scala 103:65]
    node _T_39 = not(_T_34) @[Bitwise.scala 103:77]
    node _T_40 = and(_T_38, _T_39) @[Bitwise.scala 103:75]
    node _T_41 = or(_T_36, _T_40) @[Bitwise.scala 103:39]
    node _T_42 = bits(_T_34, 23, 0) @[Bitwise.scala 102:28]
    node _T_43 = shl(_T_42, 8) @[Bitwise.scala 102:47]
    node _T_44 = xor(_T_34, _T_43) @[Bitwise.scala 102:21]
    node _T_45 = shr(_T_41, 8) @[Bitwise.scala 103:21]
    node _T_46 = and(_T_45, _T_44) @[Bitwise.scala 103:31]
    node _T_47 = bits(_T_41, 23, 0) @[Bitwise.scala 103:46]
    node _T_48 = shl(_T_47, 8) @[Bitwise.scala 103:65]
    node _T_49 = not(_T_44) @[Bitwise.scala 103:77]
    node _T_50 = and(_T_48, _T_49) @[Bitwise.scala 103:75]
    node _T_51 = or(_T_46, _T_50) @[Bitwise.scala 103:39]
    node _T_52 = bits(_T_44, 27, 0) @[Bitwise.scala 102:28]
    node _T_53 = shl(_T_52, 4) @[Bitwise.scala 102:47]
    node _T_54 = xor(_T_44, _T_53) @[Bitwise.scala 102:21]
    node _T_55 = shr(_T_51, 4) @[Bitwise.scala 103:21]
    node _T_56 = and(_T_55, _T_54) @[Bitwise.scala 103:31]
    node _T_57 = bits(_T_51, 27, 0) @[Bitwise.scala 103:46]
    node _T_58 = shl(_T_57, 4) @[Bitwise.scala 103:65]
    node _T_59 = not(_T_54) @[Bitwise.scala 103:77]
    node _T_60 = and(_T_58, _T_59) @[Bitwise.scala 103:75]
    node _T_61 = or(_T_56, _T_60) @[Bitwise.scala 103:39]
    node _T_62 = bits(_T_54, 29, 0) @[Bitwise.scala 102:28]
    node _T_63 = shl(_T_62, 2) @[Bitwise.scala 102:47]
    node _T_64 = xor(_T_54, _T_63) @[Bitwise.scala 102:21]
    node _T_65 = shr(_T_61, 2) @[Bitwise.scala 103:21]
    node _T_66 = and(_T_65, _T_64) @[Bitwise.scala 103:31]
    node _T_67 = bits(_T_61, 29, 0) @[Bitwise.scala 103:46]
    node _T_68 = shl(_T_67, 2) @[Bitwise.scala 103:65]
    node _T_69 = not(_T_64) @[Bitwise.scala 103:77]
    node _T_70 = and(_T_68, _T_69) @[Bitwise.scala 103:75]
    node _T_71 = or(_T_66, _T_70) @[Bitwise.scala 103:39]
    node _T_72 = bits(_T_64, 30, 0) @[Bitwise.scala 102:28]
    node _T_73 = shl(_T_72, 1) @[Bitwise.scala 102:47]
    node _T_74 = xor(_T_64, _T_73) @[Bitwise.scala 102:21]
    node _T_75 = shr(_T_71, 1) @[Bitwise.scala 103:21]
    node _T_76 = and(_T_75, _T_74) @[Bitwise.scala 103:31]
    node _T_77 = bits(_T_71, 30, 0) @[Bitwise.scala 103:46]
    node _T_78 = shl(_T_77, 1) @[Bitwise.scala 103:65]
    node _T_79 = not(_T_74) @[Bitwise.scala 103:77]
    node _T_80 = and(_T_78, _T_79) @[Bitwise.scala 103:75]
    node _T_81 = or(_T_76, _T_80) @[Bitwise.scala 103:39]
    node shin = mux(_T_30, io.in_a, _T_81) @[alu.scala 49:19]
    node _T_82 = bits(io.alu_op, 0, 0) @[alu.scala 50:30]
    node _T_83 = bits(shin, 31, 31) @[alu.scala 50:41]
    node _T_84 = and(_T_82, _T_83) @[alu.scala 50:34]
    node _T_85 = cat(_T_84, shin) @[Cat.scala 30:58]
    node _T_86 = asSInt(_T_85) @[alu.scala 50:57]
    node _T_87 = dshr(_T_86, shamt) @[alu.scala 50:64]
    node shiftr = bits(_T_87, 31, 0) @[alu.scala 50:73]
    node _T_90 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _T_91 = xor(UInt<32>("h0ffffffff"), _T_90) @[Bitwise.scala 102:21]
    node _T_92 = shr(shiftr, 16) @[Bitwise.scala 103:21]
    node _T_93 = and(_T_92, _T_91) @[Bitwise.scala 103:31]
    node _T_94 = bits(shiftr, 15, 0) @[Bitwise.scala 103:46]
    node _T_95 = shl(_T_94, 16) @[Bitwise.scala 103:65]
    node _T_96 = not(_T_91) @[Bitwise.scala 103:77]
    node _T_97 = and(_T_95, _T_96) @[Bitwise.scala 103:75]
    node _T_98 = or(_T_93, _T_97) @[Bitwise.scala 103:39]
    node _T_99 = bits(_T_91, 23, 0) @[Bitwise.scala 102:28]
    node _T_100 = shl(_T_99, 8) @[Bitwise.scala 102:47]
    node _T_101 = xor(_T_91, _T_100) @[Bitwise.scala 102:21]
    node _T_102 = shr(_T_98, 8) @[Bitwise.scala 103:21]
    node _T_103 = and(_T_102, _T_101) @[Bitwise.scala 103:31]
    node _T_104 = bits(_T_98, 23, 0) @[Bitwise.scala 103:46]
    node _T_105 = shl(_T_104, 8) @[Bitwise.scala 103:65]
    node _T_106 = not(_T_101) @[Bitwise.scala 103:77]
    node _T_107 = and(_T_105, _T_106) @[Bitwise.scala 103:75]
    node _T_108 = or(_T_103, _T_107) @[Bitwise.scala 103:39]
    node _T_109 = bits(_T_101, 27, 0) @[Bitwise.scala 102:28]
    node _T_110 = shl(_T_109, 4) @[Bitwise.scala 102:47]
    node _T_111 = xor(_T_101, _T_110) @[Bitwise.scala 102:21]
    node _T_112 = shr(_T_108, 4) @[Bitwise.scala 103:21]
    node _T_113 = and(_T_112, _T_111) @[Bitwise.scala 103:31]
    node _T_114 = bits(_T_108, 27, 0) @[Bitwise.scala 103:46]
    node _T_115 = shl(_T_114, 4) @[Bitwise.scala 103:65]
    node _T_116 = not(_T_111) @[Bitwise.scala 103:77]
    node _T_117 = and(_T_115, _T_116) @[Bitwise.scala 103:75]
    node _T_118 = or(_T_113, _T_117) @[Bitwise.scala 103:39]
    node _T_119 = bits(_T_111, 29, 0) @[Bitwise.scala 102:28]
    node _T_120 = shl(_T_119, 2) @[Bitwise.scala 102:47]
    node _T_121 = xor(_T_111, _T_120) @[Bitwise.scala 102:21]
    node _T_122 = shr(_T_118, 2) @[Bitwise.scala 103:21]
    node _T_123 = and(_T_122, _T_121) @[Bitwise.scala 103:31]
    node _T_124 = bits(_T_118, 29, 0) @[Bitwise.scala 103:46]
    node _T_125 = shl(_T_124, 2) @[Bitwise.scala 103:65]
    node _T_126 = not(_T_121) @[Bitwise.scala 103:77]
    node _T_127 = and(_T_125, _T_126) @[Bitwise.scala 103:75]
    node _T_128 = or(_T_123, _T_127) @[Bitwise.scala 103:39]
    node _T_129 = bits(_T_121, 30, 0) @[Bitwise.scala 102:28]
    node _T_130 = shl(_T_129, 1) @[Bitwise.scala 102:47]
    node _T_131 = xor(_T_121, _T_130) @[Bitwise.scala 102:21]
    node _T_132 = shr(_T_128, 1) @[Bitwise.scala 103:21]
    node _T_133 = and(_T_132, _T_131) @[Bitwise.scala 103:31]
    node _T_134 = bits(_T_128, 30, 0) @[Bitwise.scala 103:46]
    node _T_135 = shl(_T_134, 1) @[Bitwise.scala 103:65]
    node _T_136 = not(_T_131) @[Bitwise.scala 103:77]
    node _T_137 = and(_T_135, _T_136) @[Bitwise.scala 103:75]
    node shiftl = or(_T_133, _T_137) @[Bitwise.scala 103:39]
    node _T_151 = eq(io.alu_op, UInt<4>("h00")) @[alu.scala 54:19]
    node _T_152 = eq(io.alu_op, UInt<4>("h01")) @[alu.scala 54:44]
    node _T_153 = or(_T_151, _T_152) @[alu.scala 54:31]
    node _T_154 = eq(io.alu_op, UInt<4>("h05")) @[alu.scala 55:19]
    node _T_155 = eq(io.alu_op, UInt<4>("h07")) @[alu.scala 55:44]
    node _T_156 = or(_T_154, _T_155) @[alu.scala 55:31]
    node _T_157 = eq(io.alu_op, UInt<4>("h09")) @[alu.scala 56:19]
    node _T_158 = eq(io.alu_op, UInt<4>("h08")) @[alu.scala 56:44]
    node _T_159 = or(_T_157, _T_158) @[alu.scala 56:31]
    node _T_160 = eq(io.alu_op, UInt<4>("h06")) @[alu.scala 57:19]
    node _T_161 = eq(io.alu_op, UInt<4>("h02")) @[alu.scala 58:19]
    node _T_162 = and(io.in_a, io.in_b) @[alu.scala 58:41]
    node _T_163 = eq(io.alu_op, UInt<4>("h03")) @[alu.scala 59:19]
    node _T_164 = or(io.in_a, io.in_b) @[alu.scala 59:41]
    node _T_165 = eq(io.alu_op, UInt<4>("h04")) @[alu.scala 60:19]
    node _T_166 = xor(io.in_a, io.in_b) @[alu.scala 60:41]
    node _T_167 = eq(io.alu_op, UInt<4>("h0a")) @[alu.scala 61:19]
    node _T_168 = mux(_T_167, io.in_a, io.in_b) @[alu.scala 61:8]
    node _T_169 = mux(_T_165, _T_166, _T_168) @[alu.scala 60:8]
    node _T_170 = mux(_T_163, _T_164, _T_169) @[alu.scala 59:8]
    node _T_171 = mux(_T_161, _T_162, _T_170) @[alu.scala 58:8]
    node _T_172 = mux(_T_160, shiftl, _T_171) @[alu.scala 57:8]
    node _T_173 = mux(_T_159, shiftr, _T_172) @[alu.scala 56:8]
    node _T_174 = mux(_T_156, cmp, _T_173) @[alu.scala 55:8]
    node out = mux(_T_153, sum, _T_174) @[alu.scala 54:8]
    io.out <= out @[alu.scala 63:10]
    io.sum <= sum @[alu.scala 64:10]
    
  module Imm : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, flip imm_sel : UInt<3>, imm_out : UInt<32>}
    
    node _T_11 = eq(io.imm_sel, UInt<3>("h06")) @[imm_gen.scala 25:33]
    node _T_13 = bits(io.inst, 31, 31) @[imm_gen.scala 25:56]
    node _T_14 = asSInt(_T_13) @[imm_gen.scala 25:61]
    node sign_val = mux(_T_11, asSInt(UInt<1>("h00")), _T_14) @[imm_gen.scala 25:21]
    node _T_15 = eq(io.imm_sel, UInt<3>("h03")) @[imm_gen.scala 26:33]
    node _T_16 = bits(io.inst, 30, 20) @[imm_gen.scala 26:51]
    node _T_17 = asSInt(_T_16) @[imm_gen.scala 26:59]
    node imm30_20 = mux(_T_15, _T_17, sign_val) @[imm_gen.scala 26:21]
    node _T_18 = neq(io.imm_sel, UInt<3>("h03")) @[imm_gen.scala 27:33]
    node _T_19 = neq(io.imm_sel, UInt<3>("h04")) @[imm_gen.scala 27:57]
    node _T_20 = and(_T_18, _T_19) @[imm_gen.scala 27:43]
    node _T_21 = bits(io.inst, 19, 12) @[imm_gen.scala 27:85]
    node _T_22 = asSInt(_T_21) @[imm_gen.scala 27:93]
    node imm19_12 = mux(_T_20, sign_val, _T_22) @[imm_gen.scala 27:21]
    node _T_23 = eq(io.imm_sel, UInt<3>("h03")) @[imm_gen.scala 28:33]
    node _T_24 = eq(io.imm_sel, UInt<3>("h06")) @[imm_gen.scala 28:57]
    node _T_25 = or(_T_23, _T_24) @[imm_gen.scala 28:43]
    node _T_27 = eq(io.imm_sel, UInt<3>("h04")) @[imm_gen.scala 29:35]
    node _T_28 = bits(io.inst, 20, 20) @[imm_gen.scala 29:53]
    node _T_29 = asSInt(_T_28) @[imm_gen.scala 29:58]
    node _T_30 = eq(io.imm_sel, UInt<3>("h05")) @[imm_gen.scala 30:37]
    node _T_31 = bits(io.inst, 7, 7) @[imm_gen.scala 30:55]
    node _T_32 = asSInt(_T_31) @[imm_gen.scala 30:59]
    node _T_33 = mux(_T_30, _T_32, sign_val) @[imm_gen.scala 30:25]
    node _T_34 = mux(_T_27, _T_29, _T_33) @[imm_gen.scala 29:23]
    node imm11 = mux(_T_25, asSInt(UInt<1>("h00")), _T_34) @[imm_gen.scala 28:21]
    node _T_35 = eq(io.imm_sel, UInt<3>("h03")) @[imm_gen.scala 31:33]
    node _T_36 = eq(io.imm_sel, UInt<3>("h06")) @[imm_gen.scala 31:57]
    node _T_37 = or(_T_35, _T_36) @[imm_gen.scala 31:43]
    node _T_39 = bits(io.inst, 30, 25) @[imm_gen.scala 31:80]
    node imm10_5 = mux(_T_37, UInt<1>("h00"), _T_39) @[imm_gen.scala 31:21]
    node _T_40 = eq(io.imm_sel, UInt<3>("h03")) @[imm_gen.scala 32:33]
    node _T_42 = eq(io.imm_sel, UInt<3>("h02")) @[imm_gen.scala 33:35]
    node _T_43 = eq(io.imm_sel, UInt<3>("h05")) @[imm_gen.scala 33:59]
    node _T_44 = or(_T_42, _T_43) @[imm_gen.scala 33:45]
    node _T_45 = bits(io.inst, 11, 8) @[imm_gen.scala 33:77]
    node _T_46 = eq(io.imm_sel, UInt<3>("h06")) @[imm_gen.scala 34:37]
    node _T_47 = bits(io.inst, 19, 16) @[imm_gen.scala 34:55]
    node _T_48 = bits(io.inst, 24, 21) @[imm_gen.scala 34:71]
    node _T_49 = mux(_T_46, _T_47, _T_48) @[imm_gen.scala 34:25]
    node _T_50 = mux(_T_44, _T_45, _T_49) @[imm_gen.scala 33:23]
    node imm4_1 = mux(_T_40, UInt<1>("h00"), _T_50) @[imm_gen.scala 32:21]
    node _T_51 = eq(io.imm_sel, UInt<3>("h02")) @[imm_gen.scala 35:33]
    node _T_52 = bits(io.inst, 7, 7) @[imm_gen.scala 35:51]
    node _T_53 = eq(io.imm_sel, UInt<3>("h01")) @[imm_gen.scala 36:35]
    node _T_54 = bits(io.inst, 20, 20) @[imm_gen.scala 36:53]
    node _T_55 = eq(io.imm_sel, UInt<3>("h06")) @[imm_gen.scala 37:36]
    node _T_56 = bits(io.inst, 15, 15) @[imm_gen.scala 37:54]
    node _T_58 = mux(_T_55, _T_56, UInt<1>("h00")) @[imm_gen.scala 37:24]
    node _T_59 = mux(_T_53, _T_54, _T_58) @[imm_gen.scala 36:23]
    node imm0 = mux(_T_51, _T_52, _T_59) @[imm_gen.scala 35:21]
    node _T_60 = cat(imm10_5, imm4_1) @[Cat.scala 30:58]
    node _T_61 = cat(_T_60, imm0) @[Cat.scala 30:58]
    node _T_62 = asUInt(imm11) @[Cat.scala 30:58]
    node _T_63 = asUInt(imm19_12) @[Cat.scala 30:58]
    node _T_64 = cat(_T_63, _T_62) @[Cat.scala 30:58]
    node _T_65 = asUInt(imm30_20) @[Cat.scala 30:58]
    node _T_66 = asUInt(sign_val) @[Cat.scala 30:58]
    node _T_67 = cat(_T_66, _T_65) @[Cat.scala 30:58]
    node _T_68 = cat(_T_67, _T_64) @[Cat.scala 30:58]
    node _T_69 = cat(_T_68, _T_61) @[Cat.scala 30:58]
    node _T_70 = asSInt(_T_69) @[imm_gen.scala 39:81]
    node _T_71 = asUInt(_T_70) @[imm_gen.scala 39:88]
    io.imm_out <= _T_71 @[imm_gen.scala 39:14]
    
  module Branch : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in_a : UInt<32>, flip in_b : UInt<32>, flip br_type : UInt<3>, br_taken : UInt<1>}
    
    node _T_13 = sub(io.in_a, io.in_b) @[branch.scala 24:33]
    node _T_14 = asUInt(_T_13) @[branch.scala 24:33]
    node difference = tail(_T_14, 1) @[branch.scala 24:33]
    node not_equal = neq(difference, UInt<1>("h00")) @[branch.scala 25:36]
    node equal = eq(not_equal, UInt<1>("h00")) @[branch.scala 26:25]
    node _T_17 = bits(io.in_a, 31, 31) @[branch.scala 27:32]
    node _T_18 = bits(io.in_b, 31, 31) @[branch.scala 27:52]
    node is_same_sign = eq(_T_17, _T_18) @[branch.scala 27:41]
    node _T_19 = bits(difference, 31, 31) @[branch.scala 28:53]
    node _T_20 = bits(io.in_a, 31, 31) @[branch.scala 28:70]
    node less_than = mux(is_same_sign, _T_19, _T_20) @[branch.scala 28:28]
    node _T_21 = bits(difference, 31, 31) @[branch.scala 29:53]
    node _T_22 = bits(io.in_b, 31, 31) @[branch.scala 29:70]
    node less_than_u = mux(is_same_sign, _T_21, _T_22) @[branch.scala 29:28]
    node greater_equal = eq(less_than, UInt<1>("h00")) @[branch.scala 30:25]
    node greater_equal_u = eq(less_than_u, UInt<1>("h00")) @[branch.scala 31:25]
    node _T_25 = eq(io.br_type, UInt<3>("h03")) @[branch.scala 35:18]
    node _T_26 = and(_T_25, equal) @[branch.scala 35:30]
    node _T_27 = eq(io.br_type, UInt<3>("h06")) @[branch.scala 36:18]
    node _T_28 = and(_T_27, not_equal) @[branch.scala 36:30]
    node _T_29 = or(_T_26, _T_28) @[branch.scala 35:40]
    node _T_30 = eq(io.br_type, UInt<3>("h02")) @[branch.scala 37:18]
    node _T_31 = and(_T_30, less_than) @[branch.scala 37:30]
    node _T_32 = or(_T_29, _T_31) @[branch.scala 36:44]
    node _T_33 = eq(io.br_type, UInt<3>("h05")) @[branch.scala 38:18]
    node _T_34 = and(_T_33, greater_equal) @[branch.scala 38:30]
    node _T_35 = or(_T_32, _T_34) @[branch.scala 37:44]
    node _T_36 = eq(io.br_type, UInt<3>("h01")) @[branch.scala 39:18]
    node _T_37 = and(_T_36, less_than_u) @[branch.scala 39:30]
    node _T_38 = or(_T_35, _T_37) @[branch.scala 38:48]
    node _T_39 = eq(io.br_type, UInt<3>("h04")) @[branch.scala 40:18]
    node _T_40 = and(_T_39, greater_equal_u) @[branch.scala 40:30]
    node _T_41 = or(_T_38, _T_40) @[branch.scala 39:46]
    io.br_taken <= _T_41 @[branch.scala 34:15]
    
  module LS_Unit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip lsu_st_type : UInt<2>, flip lsu_wdata_in : UInt<32>, lsu_wdata_out : UInt<32>, flip lsu_rdata_in : UInt<32>, lsu_rdata_out : SInt<32>, flip lsu_ld_type : UInt<3>}
    
    node _T_18 = bits(io.lsu_wdata_in, 15, 0) @[ls_unit.scala 34:31]
    node _T_19 = bits(io.lsu_wdata_in, 7, 0) @[ls_unit.scala 35:31]
    node _T_20 = eq(UInt<2>("h03"), io.lsu_st_type) @[Mux.scala 46:19]
    node _T_21 = mux(_T_20, _T_19, UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_22 = eq(UInt<2>("h02"), io.lsu_st_type) @[Mux.scala 46:19]
    node _T_23 = mux(_T_22, _T_18, _T_21) @[Mux.scala 46:16]
    node _T_24 = eq(UInt<2>("h01"), io.lsu_st_type) @[Mux.scala 46:19]
    node _T_25 = mux(_T_24, io.lsu_wdata_in, _T_23) @[Mux.scala 46:16]
    io.lsu_wdata_out <= _T_25 @[ls_unit.scala 32:20]
    node _T_27 = cvt(io.lsu_rdata_in) @[ls_unit.scala 40:29]
    node _T_28 = bits(io.lsu_rdata_in, 15, 0) @[ls_unit.scala 41:28]
    node _T_29 = asSInt(_T_28) @[ls_unit.scala 41:36]
    node _T_30 = bits(io.lsu_rdata_in, 7, 0) @[ls_unit.scala 42:28]
    node _T_31 = asSInt(_T_30) @[ls_unit.scala 42:35]
    node _T_32 = bits(io.lsu_rdata_in, 15, 0) @[ls_unit.scala 43:28]
    node _T_33 = cvt(_T_32) @[ls_unit.scala 43:36]
    node _T_34 = bits(io.lsu_rdata_in, 7, 0) @[ls_unit.scala 44:28]
    node _T_35 = cvt(_T_34) @[ls_unit.scala 44:35]
    node _T_36 = eq(UInt<3>("h05"), io.lsu_ld_type) @[Mux.scala 46:19]
    node _T_37 = mux(_T_36, _T_35, asSInt(UInt<1>("h00"))) @[Mux.scala 46:16]
    node _T_38 = eq(UInt<3>("h04"), io.lsu_ld_type) @[Mux.scala 46:19]
    node _T_39 = mux(_T_38, _T_33, _T_37) @[Mux.scala 46:16]
    node _T_40 = eq(UInt<3>("h03"), io.lsu_ld_type) @[Mux.scala 46:19]
    node _T_41 = mux(_T_40, _T_31, _T_39) @[Mux.scala 46:16]
    node _T_42 = eq(UInt<3>("h02"), io.lsu_ld_type) @[Mux.scala 46:19]
    node _T_43 = mux(_T_42, _T_29, _T_41) @[Mux.scala 46:16]
    node _T_44 = eq(UInt<3>("h01"), io.lsu_ld_type) @[Mux.scala 46:19]
    node _T_45 = mux(_T_44, _T_27, _T_43) @[Mux.scala 46:16]
    io.lsu_rdata_out <= _T_45 @[ls_unit.scala 39:21]
    
  module Datapath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {irq : {flip uart_irq : UInt<1>, flip spi_irq : UInt<1>, flip m1_irq : UInt<1>, flip m2_irq : UInt<1>, flip m3_irq : UInt<1>}, flip ibus : {flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, flip dbus : {flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}, flip ctrl : {flip inst : UInt<32>, pc_sel : UInt<2>, inst_kill : UInt<1>, a_sel : UInt<1>, b_sel : UInt<1>, imm_sel : UInt<3>, alu_op : UInt<5>, br_type : UInt<3>, st_type : UInt<2>, ld_type : UInt<3>, wb_mux_sel : UInt<2>, wb_en : UInt<1>, csr_cmd : UInt<3>, illegal : UInt<1>, en_rs1 : UInt<1>, en_rs2 : UInt<1>}}
    
    inst csr of CSR @[pipeline.scala 34:26]
    csr.clock <= clock
    csr.reset <= reset
    inst reg_file of RegFile @[pipeline.scala 35:26]
    reg_file.clock <= clock
    reg_file.reset <= reset
    inst alu of ALU @[pipeline.scala 36:26]
    alu.clock <= clock
    alu.reset <= reset
    inst gen_imm of Imm @[pipeline.scala 37:26]
    gen_imm.clock <= clock
    gen_imm.reset <= reset
    inst cond_br of Branch @[pipeline.scala 38:26]
    cond_br.clock <= clock
    cond_br.reset <= reset
    reg fet_exe_inst : UInt<32>, clock with : (reset => (reset, UInt<32>("h013"))) @[pipeline.scala 42:30]
    reg fet_exe_pc : UInt, clock @[pipeline.scala 43:26]
    reg exe_wb_inst : UInt<32>, clock with : (reset => (reset, UInt<32>("h013"))) @[pipeline.scala 46:33]
    reg exe_wb_pc : UInt, clock @[pipeline.scala 47:29]
    reg exe_wb_alu : UInt, clock @[pipeline.scala 48:29]
    reg csr_in : UInt, clock @[pipeline.scala 49:29]
    reg ctrl_st_type : UInt<2>, clock @[pipeline.scala 52:29]
    reg ctrl_ld_type : UInt<3>, clock @[pipeline.scala 53:29]
    reg ctrl_wb_mux_sel : UInt<2>, clock @[pipeline.scala 54:29]
    reg ctrl_wb_en : UInt<1>, clock @[pipeline.scala 55:29]
    reg ctrl_csr_cmd : UInt<3>, clock @[pipeline.scala 56:29]
    reg ctrl_illegal : UInt<1>, clock @[pipeline.scala 57:29]
    reg ctrl_pc_check : UInt<1>, clock @[pipeline.scala 58:29]
    node _T_144 = bits(reset, 0, 0) @[pipeline.scala 61:34]
    reg notstarted : UInt<1>, clock @[pipeline.scala 61:27]
    notstarted <= _T_144 @[pipeline.scala 61:27]
    wire stall : UInt<1>
    stall <= UInt<1>("h00")
    node _T_150 = sub(UInt<32>("h07000"), UInt<32>("h04")) @[pipeline.scala 64:57]
    node _T_151 = asUInt(_T_150) @[pipeline.scala 64:57]
    node _T_152 = tail(_T_151, 1) @[pipeline.scala 64:57]
    reg pc : UInt, clock with : (reset => (reset, _T_152)) @[pipeline.scala 64:27]
    wire npc : UInt<32>
    npc <= UInt<32>("h00")
    node _T_157 = eq(io.ibus.valid, UInt<1>("h00")) @[pipeline.scala 66:33]
    node _T_158 = or(stall, _T_157) @[pipeline.scala 66:30]
    node _T_159 = eq(io.ctrl.pc_sel, UInt<2>("h03")) @[pipeline.scala 67:39]
    node _T_160 = eq(io.ctrl.pc_sel, UInt<2>("h01")) @[pipeline.scala 68:39]
    node _T_161 = or(_T_160, cond_br.io.br_taken) @[pipeline.scala 68:50]
    node _T_163 = dshr(alu.io.sum, UInt<1>("h01")) @[pipeline.scala 68:85]
    node _T_165 = dshl(_T_163, UInt<1>("h01")) @[pipeline.scala 68:92]
    node _T_166 = eq(io.ctrl.pc_sel, UInt<2>("h02")) @[pipeline.scala 69:39]
    node _T_168 = add(pc, UInt<3>("h04")) @[pipeline.scala 69:56]
    node _T_169 = tail(_T_168, 1) @[pipeline.scala 69:56]
    node _T_170 = mux(_T_166, pc, _T_169) @[pipeline.scala 69:23]
    node _T_171 = mux(_T_161, _T_165, _T_170) @[pipeline.scala 68:23]
    node _T_172 = mux(_T_159, csr.io.epc, _T_171) @[pipeline.scala 67:23]
    node _T_173 = mux(csr.io.expt, csr.io.evec, _T_172) @[pipeline.scala 66:57]
    node _T_174 = mux(_T_158, pc, _T_173) @[pipeline.scala 66:23]
    npc <= _T_174 @[pipeline.scala 66:17]
    node _T_175 = or(notstarted, io.ctrl.inst_kill) @[pipeline.scala 72:35]
    node _T_176 = or(_T_175, cond_br.io.br_taken) @[pipeline.scala 72:56]
    node _T_177 = or(_T_176, csr.io.expt) @[pipeline.scala 72:79]
    node _T_179 = eq(io.ibus.valid, UInt<1>("h00")) @[pipeline.scala 72:97]
    node _T_180 = or(_T_177, _T_179) @[pipeline.scala 72:94]
    node inst = mux(_T_180, UInt<32>("h013"), io.ibus.inst) @[pipeline.scala 72:23]
    pc <= npc @[pipeline.scala 74:18]
    io.ibus.addr <= npc @[pipeline.scala 75:18]
    node _T_183 = eq(stall, UInt<1>("h00")) @[pipeline.scala 80:9]
    when _T_183 : @[pipeline.scala 80:17]
      node _T_184 = or(io.ctrl.inst_kill, cond_br.io.br_taken) @[pipeline.scala 81:45]
      node _T_185 = or(_T_184, csr.io.expt) @[pipeline.scala 81:68]
      node _T_186 = mux(_T_185, fet_exe_pc, pc) @[pipeline.scala 81:25]
      fet_exe_pc <= _T_186 @[pipeline.scala 81:19]
      fet_exe_inst <= inst @[pipeline.scala 82:19]
      skip @[pipeline.scala 80:17]
    io.ctrl.inst <= fet_exe_inst @[pipeline.scala 87:22]
    node rd_addr = bits(fet_exe_inst, 11, 7) @[pipeline.scala 90:37]
    node rs1_addr = bits(fet_exe_inst, 19, 15) @[pipeline.scala 91:37]
    node rs2_addr = bits(fet_exe_inst, 24, 20) @[pipeline.scala 92:37]
    reg_file.io.raddr_1 <= rs1_addr @[pipeline.scala 93:23]
    reg_file.io.raddr_2 <= rs2_addr @[pipeline.scala 94:23]
    gen_imm.io.inst <= fet_exe_inst @[pipeline.scala 97:22]
    gen_imm.io.imm_sel <= io.ctrl.imm_sel @[pipeline.scala 98:26]
    node wrbk_rd_addr = bits(exe_wb_inst, 11, 7) @[pipeline.scala 102:35]
    node _T_188 = neq(rs1_addr, UInt<1>("h00")) @[pipeline.scala 103:47]
    node _T_189 = and(ctrl_wb_en, _T_188) @[pipeline.scala 103:35]
    node _T_190 = eq(rs1_addr, wrbk_rd_addr) @[pipeline.scala 103:64]
    node rs1hazard = and(_T_189, _T_190) @[pipeline.scala 103:51]
    node _T_192 = neq(rs2_addr, UInt<1>("h00")) @[pipeline.scala 104:47]
    node _T_193 = and(ctrl_wb_en, _T_192) @[pipeline.scala 104:35]
    node _T_194 = eq(rs2_addr, wrbk_rd_addr) @[pipeline.scala 104:64]
    node rs2hazard = and(_T_193, _T_194) @[pipeline.scala 104:51]
    node _T_195 = eq(ctrl_wb_mux_sel, UInt<2>("h00")) @[pipeline.scala 107:44]
    node _T_196 = and(_T_195, rs1hazard) @[pipeline.scala 107:55]
    node rs1 = mux(_T_196, exe_wb_alu, reg_file.io.rdata_1) @[pipeline.scala 107:27]
    node _T_197 = eq(ctrl_wb_mux_sel, UInt<2>("h00")) @[pipeline.scala 108:44]
    node _T_198 = and(_T_197, rs2hazard) @[pipeline.scala 108:55]
    node rs2 = mux(_T_198, exe_wb_alu, reg_file.io.rdata_2) @[pipeline.scala 108:27]
    wire hazard_stall : UInt<1>
    hazard_stall <= UInt<1>("h00")
    node _T_202 = neq(ctrl_ld_type, UInt<1>("h00")) @[pipeline.scala 113:39]
    node _T_203 = neq(ctrl_csr_cmd, UInt<3>("h00")) @[pipeline.scala 113:59]
    node _T_204 = or(_T_202, _T_203) @[pipeline.scala 113:43]
    node _T_205 = and(io.ctrl.en_rs1, rs1hazard) @[pipeline.scala 113:90]
    node _T_206 = and(io.ctrl.en_rs2, rs2hazard) @[pipeline.scala 113:123]
    node _T_207 = or(_T_205, _T_206) @[pipeline.scala 113:104]
    node _T_208 = and(_T_204, _T_207) @[pipeline.scala 113:70]
    hazard_stall <= _T_208 @[pipeline.scala 113:22]
    node _T_210 = neq(ctrl_ld_type, UInt<1>("h00")) @[pipeline.scala 117:37]
    node _T_212 = neq(ctrl_st_type, UInt<1>("h00")) @[pipeline.scala 117:57]
    node is_load_store = or(_T_210, _T_212) @[pipeline.scala 117:41]
    wire dmem_stall : UInt<1>
    dmem_stall <= UInt<1>("h00")
    node _T_215 = and(io.dbus.valid, is_load_store) @[pipeline.scala 119:42]
    node _T_217 = eq(is_load_store, UInt<1>("h00")) @[pipeline.scala 119:63]
    node _T_218 = or(_T_215, _T_217) @[pipeline.scala 119:60]
    node _T_220 = eq(_T_218, UInt<1>("h00")) @[pipeline.scala 119:25]
    dmem_stall <= _T_220 @[pipeline.scala 119:22]
    node _T_221 = or(hazard_stall, dmem_stall) @[pipeline.scala 120:38]
    stall <= _T_221 @[pipeline.scala 120:22]
    node _T_223 = neq(UInt<2>("h00"), UInt<1>("h00")) @[pipeline.scala 123:50]
    node _T_225 = neq(io.ctrl.st_type, UInt<1>("h00")) @[pipeline.scala 123:71]
    node _T_226 = mux(hazard_stall, _T_223, _T_225) @[pipeline.scala 123:28]
    io.dbus.wr_en <= _T_226 @[pipeline.scala 123:22]
    io.dbus.st_type <= io.ctrl.st_type @[pipeline.scala 124:22]
    node _T_227 = eq(io.ctrl.a_sel, UInt<1>("h01")) @[pipeline.scala 127:43]
    node _T_228 = mux(_T_227, rs1, fet_exe_pc) @[pipeline.scala 127:28]
    alu.io.in_a <= _T_228 @[pipeline.scala 127:22]
    node _T_229 = eq(io.ctrl.b_sel, UInt<1>("h01")) @[pipeline.scala 128:43]
    node _T_230 = mux(_T_229, rs2, gen_imm.io.imm_out) @[pipeline.scala 128:28]
    alu.io.in_b <= _T_230 @[pipeline.scala 128:22]
    alu.io.alu_op <= io.ctrl.alu_op @[pipeline.scala 129:22]
    cond_br.io.in_a <= rs1 @[pipeline.scala 132:23]
    cond_br.io.in_b <= rs2 @[pipeline.scala 133:23]
    cond_br.io.br_type <= io.ctrl.br_type @[pipeline.scala 134:22]
    inst lsu of LS_Unit @[pipeline.scala 137:19]
    lsu.clock <= clock
    lsu.reset <= reset
    lsu.io.lsu_st_type <= io.ctrl.st_type @[pipeline.scala 140:23]
    lsu.io.lsu_wdata_in <= rs2 @[pipeline.scala 141:23]
    io.dbus.wdata <= lsu.io.lsu_wdata_out @[pipeline.scala 142:23]
    node _T_232 = neq(io.ctrl.ld_type, UInt<1>("h00")) @[pipeline.scala 145:42]
    io.dbus.rd_en <= _T_232 @[pipeline.scala 145:23]
    io.dbus.ld_type <= io.ctrl.ld_type @[pipeline.scala 146:23]
    lsu.io.lsu_ld_type <= ctrl_ld_type @[pipeline.scala 147:23]
    lsu.io.lsu_rdata_in <= io.dbus.rdata @[pipeline.scala 148:23]
    io.dbus.addr <= alu.io.sum @[pipeline.scala 152:23]
    node _T_233 = bits(reset, 0, 0) @[pipeline.scala 157:14]
    node _T_235 = eq(stall, UInt<1>("h00")) @[pipeline.scala 157:24]
    node _T_236 = and(_T_235, csr.io.expt) @[pipeline.scala 157:31]
    node _T_237 = or(_T_233, _T_236) @[pipeline.scala 157:21]
    when _T_237 : @[pipeline.scala 157:47]
      ctrl_st_type <= UInt<1>("h00") @[pipeline.scala 158:23]
      ctrl_ld_type <= UInt<1>("h00") @[pipeline.scala 159:23]
      ctrl_wb_en <= UInt<1>("h00") @[pipeline.scala 160:23]
      ctrl_csr_cmd <= UInt<1>("h00") @[pipeline.scala 161:23]
      ctrl_illegal <= UInt<1>("h00") @[pipeline.scala 162:23]
      ctrl_pc_check <= UInt<1>("h00") @[pipeline.scala 163:23]
      skip @[pipeline.scala 157:47]
    else : @[pipeline.scala 164:38]
      node _T_245 = eq(stall, UInt<1>("h00")) @[pipeline.scala 164:14]
      node _T_247 = eq(csr.io.expt, UInt<1>("h00")) @[pipeline.scala 164:24]
      node _T_248 = and(_T_245, _T_247) @[pipeline.scala 164:21]
      when _T_248 : @[pipeline.scala 164:38]
        exe_wb_pc <= fet_exe_pc @[pipeline.scala 166:23]
        exe_wb_inst <= fet_exe_inst @[pipeline.scala 167:23]
        exe_wb_alu <= alu.io.out @[pipeline.scala 168:23]
        node _T_249 = eq(io.ctrl.imm_sel, UInt<3>("h06")) @[pipeline.scala 170:46]
        node _T_250 = mux(_T_249, gen_imm.io.imm_out, rs1) @[pipeline.scala 170:29]
        csr_in <= _T_250 @[pipeline.scala 170:23]
        ctrl_st_type <= io.ctrl.st_type @[pipeline.scala 171:23]
        ctrl_ld_type <= io.ctrl.ld_type @[pipeline.scala 172:23]
        ctrl_wb_mux_sel <= io.ctrl.wb_mux_sel @[pipeline.scala 173:23]
        ctrl_wb_en <= io.ctrl.wb_en @[pipeline.scala 174:23]
        ctrl_csr_cmd <= io.ctrl.csr_cmd @[pipeline.scala 175:23]
        ctrl_illegal <= io.ctrl.illegal @[pipeline.scala 176:23]
        node _T_251 = eq(io.ctrl.pc_sel, UInt<2>("h01")) @[pipeline.scala 177:41]
        ctrl_pc_check <= _T_251 @[pipeline.scala 177:23]
        skip @[pipeline.scala 164:38]
      else : @[pipeline.scala 178:28]
        when hazard_stall : @[pipeline.scala 178:28]
          ctrl_st_type <= UInt<2>("h00") @[pipeline.scala 182:23]
          ctrl_ld_type <= UInt<3>("h00") @[pipeline.scala 183:23]
          ctrl_wb_en <= UInt<1>("h00") @[pipeline.scala 184:23]
          ctrl_csr_cmd <= UInt<3>("h00") @[pipeline.scala 185:23]
          skip @[pipeline.scala 178:28]
    csr.io.stall <= stall @[pipeline.scala 190:20]
    csr.io.in <= csr_in @[pipeline.scala 191:20]
    csr.io.cmd <= ctrl_csr_cmd @[pipeline.scala 192:20]
    csr.io.inst <= exe_wb_inst @[pipeline.scala 193:20]
    csr.io.pc <= exe_wb_pc @[pipeline.scala 194:20]
    csr.io.addr <= exe_wb_alu @[pipeline.scala 195:20]
    csr.io.illegal <= ctrl_illegal @[pipeline.scala 196:20]
    csr.io.pc_check <= ctrl_pc_check @[pipeline.scala 197:20]
    csr.io.ld_type <= ctrl_ld_type @[pipeline.scala 198:20]
    csr.io.st_type <= ctrl_st_type @[pipeline.scala 199:20]
    csr.io.br_taken <= cond_br.io.br_taken @[pipeline.scala 200:20]
    csr.io.irq.m3_irq <= io.irq.m3_irq @[pipeline.scala 203:20]
    csr.io.irq.m2_irq <= io.irq.m2_irq @[pipeline.scala 203:20]
    csr.io.irq.m1_irq <= io.irq.m1_irq @[pipeline.scala 203:20]
    csr.io.irq.spi_irq <= io.irq.spi_irq @[pipeline.scala 203:20]
    csr.io.irq.uart_irq <= io.irq.uart_irq @[pipeline.scala 203:20]
    node _T_253 = cvt(exe_wb_alu) @[pipeline.scala 208:62]
    node _T_255 = add(exe_wb_pc, UInt<3>("h04")) @[pipeline.scala 210:54]
    node _T_256 = tail(_T_255, 1) @[pipeline.scala 210:54]
    node _T_257 = cvt(_T_256) @[pipeline.scala 210:61]
    node _T_258 = cvt(csr.io.out) @[pipeline.scala 211:54]
    node _T_259 = eq(UInt<2>("h03"), ctrl_wb_mux_sel) @[Mux.scala 46:19]
    node _T_260 = mux(_T_259, _T_258, _T_253) @[Mux.scala 46:16]
    node _T_261 = eq(UInt<2>("h02"), ctrl_wb_mux_sel) @[Mux.scala 46:19]
    node _T_262 = mux(_T_261, _T_257, _T_260) @[Mux.scala 46:16]
    node _T_263 = eq(UInt<2>("h01"), ctrl_wb_mux_sel) @[Mux.scala 46:19]
    node _T_264 = mux(_T_263, lsu.io.lsu_rdata_out, _T_262) @[Mux.scala 46:16]
    node reg_file_wdata = asUInt(_T_264) @[pipeline.scala 211:62]
    node _T_266 = eq(csr.io.expt, UInt<1>("h00")) @[pipeline.scala 213:39]
    node _T_267 = and(ctrl_wb_en, _T_266) @[pipeline.scala 213:36]
    reg_file.io.wen <= _T_267 @[pipeline.scala 213:22]
    reg_file.io.waddr <= wrbk_rd_addr @[pipeline.scala 214:22]
    reg_file.io.wdata <= reg_file_wdata @[pipeline.scala 215:22]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, pc_sel : UInt<2>, inst_kill : UInt<1>, a_sel : UInt<1>, b_sel : UInt<1>, imm_sel : UInt<3>, alu_op : UInt<5>, br_type : UInt<3>, st_type : UInt<2>, ld_type : UInt<3>, wb_mux_sel : UInt<2>, wb_en : UInt<1>, csr_cmd : UInt<3>, illegal : UInt<1>, en_rs1 : UInt<1>, en_rs2 : UInt<1>}
    
    node _T_39 = and(io.inst, UInt<7>("h07f")) @[Lookup.scala 9:38]
    node _T_40 = eq(UInt<6>("h037"), _T_39) @[Lookup.scala 9:38]
    node _T_43 = and(io.inst, UInt<7>("h07f")) @[Lookup.scala 9:38]
    node _T_44 = eq(UInt<5>("h017"), _T_43) @[Lookup.scala 9:38]
    node _T_47 = and(io.inst, UInt<7>("h07f")) @[Lookup.scala 9:38]
    node _T_48 = eq(UInt<7>("h06f"), _T_47) @[Lookup.scala 9:38]
    node _T_51 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_52 = eq(UInt<7>("h067"), _T_51) @[Lookup.scala 9:38]
    node _T_55 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_56 = eq(UInt<7>("h063"), _T_55) @[Lookup.scala 9:38]
    node _T_59 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_60 = eq(UInt<13>("h01063"), _T_59) @[Lookup.scala 9:38]
    node _T_63 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_64 = eq(UInt<15>("h04063"), _T_63) @[Lookup.scala 9:38]
    node _T_67 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_68 = eq(UInt<15>("h05063"), _T_67) @[Lookup.scala 9:38]
    node _T_71 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_72 = eq(UInt<15>("h06063"), _T_71) @[Lookup.scala 9:38]
    node _T_75 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_76 = eq(UInt<15>("h07063"), _T_75) @[Lookup.scala 9:38]
    node _T_79 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_80 = eq(UInt<2>("h03"), _T_79) @[Lookup.scala 9:38]
    node _T_83 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_84 = eq(UInt<13>("h01003"), _T_83) @[Lookup.scala 9:38]
    node _T_87 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_88 = eq(UInt<14>("h02003"), _T_87) @[Lookup.scala 9:38]
    node _T_91 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_92 = eq(UInt<15>("h04003"), _T_91) @[Lookup.scala 9:38]
    node _T_95 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_96 = eq(UInt<15>("h05003"), _T_95) @[Lookup.scala 9:38]
    node _T_99 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_100 = eq(UInt<6>("h023"), _T_99) @[Lookup.scala 9:38]
    node _T_103 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_104 = eq(UInt<13>("h01023"), _T_103) @[Lookup.scala 9:38]
    node _T_107 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_108 = eq(UInt<14>("h02023"), _T_107) @[Lookup.scala 9:38]
    node _T_111 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_112 = eq(UInt<5>("h013"), _T_111) @[Lookup.scala 9:38]
    node _T_115 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_116 = eq(UInt<14>("h02013"), _T_115) @[Lookup.scala 9:38]
    node _T_119 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_120 = eq(UInt<14>("h03013"), _T_119) @[Lookup.scala 9:38]
    node _T_123 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_124 = eq(UInt<15>("h04013"), _T_123) @[Lookup.scala 9:38]
    node _T_127 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_128 = eq(UInt<15>("h06013"), _T_127) @[Lookup.scala 9:38]
    node _T_131 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_132 = eq(UInt<15>("h07013"), _T_131) @[Lookup.scala 9:38]
    node _T_135 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_136 = eq(UInt<13>("h01013"), _T_135) @[Lookup.scala 9:38]
    node _T_139 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_140 = eq(UInt<15>("h05013"), _T_139) @[Lookup.scala 9:38]
    node _T_143 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_144 = eq(UInt<31>("h040005013"), _T_143) @[Lookup.scala 9:38]
    node _T_147 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_148 = eq(UInt<6>("h033"), _T_147) @[Lookup.scala 9:38]
    node _T_151 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_152 = eq(UInt<31>("h040000033"), _T_151) @[Lookup.scala 9:38]
    node _T_155 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_156 = eq(UInt<13>("h01033"), _T_155) @[Lookup.scala 9:38]
    node _T_159 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_160 = eq(UInt<14>("h02033"), _T_159) @[Lookup.scala 9:38]
    node _T_163 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_164 = eq(UInt<14>("h03033"), _T_163) @[Lookup.scala 9:38]
    node _T_167 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_168 = eq(UInt<15>("h04033"), _T_167) @[Lookup.scala 9:38]
    node _T_171 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_172 = eq(UInt<15>("h05033"), _T_171) @[Lookup.scala 9:38]
    node _T_175 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_176 = eq(UInt<31>("h040005033"), _T_175) @[Lookup.scala 9:38]
    node _T_179 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_180 = eq(UInt<15>("h06033"), _T_179) @[Lookup.scala 9:38]
    node _T_183 = and(io.inst, UInt<32>("h0fe00707f")) @[Lookup.scala 9:38]
    node _T_184 = eq(UInt<15>("h07033"), _T_183) @[Lookup.scala 9:38]
    node _T_187 = and(io.inst, UInt<32>("h0f00fffff")) @[Lookup.scala 9:38]
    node _T_188 = eq(UInt<4>("h0f"), _T_187) @[Lookup.scala 9:38]
    node _T_191 = and(io.inst, UInt<32>("h0ffffffff")) @[Lookup.scala 9:38]
    node _T_192 = eq(UInt<13>("h0100f"), _T_191) @[Lookup.scala 9:38]
    node _T_195 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_196 = eq(UInt<13>("h01073"), _T_195) @[Lookup.scala 9:38]
    node _T_199 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_200 = eq(UInt<14>("h02073"), _T_199) @[Lookup.scala 9:38]
    node _T_203 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_204 = eq(UInt<14>("h03073"), _T_203) @[Lookup.scala 9:38]
    node _T_207 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_208 = eq(UInt<15>("h05073"), _T_207) @[Lookup.scala 9:38]
    node _T_211 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_212 = eq(UInt<15>("h06073"), _T_211) @[Lookup.scala 9:38]
    node _T_215 = and(io.inst, UInt<15>("h0707f")) @[Lookup.scala 9:38]
    node _T_216 = eq(UInt<15>("h07073"), _T_215) @[Lookup.scala 9:38]
    node _T_219 = and(io.inst, UInt<32>("h0ffffffff")) @[Lookup.scala 9:38]
    node _T_220 = eq(UInt<7>("h073"), _T_219) @[Lookup.scala 9:38]
    node _T_223 = and(io.inst, UInt<32>("h0ffffffff")) @[Lookup.scala 9:38]
    node _T_224 = eq(UInt<21>("h0100073"), _T_223) @[Lookup.scala 9:38]
    node _T_227 = and(io.inst, UInt<32>("h0ffffffff")) @[Lookup.scala 9:38]
    node _T_228 = eq(UInt<30>("h030200073"), _T_227) @[Lookup.scala 9:38]
    node _T_231 = and(io.inst, UInt<32>("h0ffffffff")) @[Lookup.scala 9:38]
    node _T_232 = eq(UInt<29>("h010500073"), _T_231) @[Lookup.scala 9:38]
    node _T_233 = mux(_T_232, UInt<2>("h00"), UInt<2>("h00")) @[Lookup.scala 11:37]
    node _T_234 = mux(_T_228, UInt<2>("h03"), _T_233) @[Lookup.scala 11:37]
    node _T_235 = mux(_T_224, UInt<2>("h00"), _T_234) @[Lookup.scala 11:37]
    node _T_236 = mux(_T_220, UInt<2>("h00"), _T_235) @[Lookup.scala 11:37]
    node _T_237 = mux(_T_216, UInt<2>("h00"), _T_236) @[Lookup.scala 11:37]
    node _T_238 = mux(_T_212, UInt<2>("h00"), _T_237) @[Lookup.scala 11:37]
    node _T_239 = mux(_T_208, UInt<2>("h00"), _T_238) @[Lookup.scala 11:37]
    node _T_240 = mux(_T_204, UInt<2>("h00"), _T_239) @[Lookup.scala 11:37]
    node _T_241 = mux(_T_200, UInt<2>("h00"), _T_240) @[Lookup.scala 11:37]
    node _T_242 = mux(_T_196, UInt<2>("h00"), _T_241) @[Lookup.scala 11:37]
    node _T_243 = mux(_T_192, UInt<2>("h02"), _T_242) @[Lookup.scala 11:37]
    node _T_244 = mux(_T_188, UInt<2>("h00"), _T_243) @[Lookup.scala 11:37]
    node _T_245 = mux(_T_184, UInt<2>("h00"), _T_244) @[Lookup.scala 11:37]
    node _T_246 = mux(_T_180, UInt<2>("h00"), _T_245) @[Lookup.scala 11:37]
    node _T_247 = mux(_T_176, UInt<2>("h00"), _T_246) @[Lookup.scala 11:37]
    node _T_248 = mux(_T_172, UInt<2>("h00"), _T_247) @[Lookup.scala 11:37]
    node _T_249 = mux(_T_168, UInt<2>("h00"), _T_248) @[Lookup.scala 11:37]
    node _T_250 = mux(_T_164, UInt<2>("h00"), _T_249) @[Lookup.scala 11:37]
    node _T_251 = mux(_T_160, UInt<2>("h00"), _T_250) @[Lookup.scala 11:37]
    node _T_252 = mux(_T_156, UInt<2>("h00"), _T_251) @[Lookup.scala 11:37]
    node _T_253 = mux(_T_152, UInt<2>("h00"), _T_252) @[Lookup.scala 11:37]
    node _T_254 = mux(_T_148, UInt<2>("h00"), _T_253) @[Lookup.scala 11:37]
    node _T_255 = mux(_T_144, UInt<2>("h00"), _T_254) @[Lookup.scala 11:37]
    node _T_256 = mux(_T_140, UInt<2>("h00"), _T_255) @[Lookup.scala 11:37]
    node _T_257 = mux(_T_136, UInt<2>("h00"), _T_256) @[Lookup.scala 11:37]
    node _T_258 = mux(_T_132, UInt<2>("h00"), _T_257) @[Lookup.scala 11:37]
    node _T_259 = mux(_T_128, UInt<2>("h00"), _T_258) @[Lookup.scala 11:37]
    node _T_260 = mux(_T_124, UInt<2>("h00"), _T_259) @[Lookup.scala 11:37]
    node _T_261 = mux(_T_120, UInt<2>("h00"), _T_260) @[Lookup.scala 11:37]
    node _T_262 = mux(_T_116, UInt<2>("h00"), _T_261) @[Lookup.scala 11:37]
    node _T_263 = mux(_T_112, UInt<2>("h00"), _T_262) @[Lookup.scala 11:37]
    node _T_264 = mux(_T_108, UInt<2>("h00"), _T_263) @[Lookup.scala 11:37]
    node _T_265 = mux(_T_104, UInt<2>("h00"), _T_264) @[Lookup.scala 11:37]
    node _T_266 = mux(_T_100, UInt<2>("h00"), _T_265) @[Lookup.scala 11:37]
    node _T_267 = mux(_T_96, UInt<2>("h00"), _T_266) @[Lookup.scala 11:37]
    node _T_268 = mux(_T_92, UInt<2>("h00"), _T_267) @[Lookup.scala 11:37]
    node _T_269 = mux(_T_88, UInt<2>("h00"), _T_268) @[Lookup.scala 11:37]
    node _T_270 = mux(_T_84, UInt<2>("h00"), _T_269) @[Lookup.scala 11:37]
    node _T_271 = mux(_T_80, UInt<2>("h00"), _T_270) @[Lookup.scala 11:37]
    node _T_272 = mux(_T_76, UInt<2>("h00"), _T_271) @[Lookup.scala 11:37]
    node _T_273 = mux(_T_72, UInt<2>("h00"), _T_272) @[Lookup.scala 11:37]
    node _T_274 = mux(_T_68, UInt<2>("h00"), _T_273) @[Lookup.scala 11:37]
    node _T_275 = mux(_T_64, UInt<2>("h00"), _T_274) @[Lookup.scala 11:37]
    node _T_276 = mux(_T_60, UInt<2>("h00"), _T_275) @[Lookup.scala 11:37]
    node _T_277 = mux(_T_56, UInt<2>("h00"), _T_276) @[Lookup.scala 11:37]
    node _T_278 = mux(_T_52, UInt<2>("h01"), _T_277) @[Lookup.scala 11:37]
    node _T_279 = mux(_T_48, UInt<2>("h01"), _T_278) @[Lookup.scala 11:37]
    node _T_280 = mux(_T_44, UInt<2>("h00"), _T_279) @[Lookup.scala 11:37]
    node ctrlSignals_0 = mux(_T_40, UInt<2>("h00"), _T_280) @[Lookup.scala 11:37]
    node _T_281 = mux(_T_232, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_282 = mux(_T_228, UInt<1>("h00"), _T_281) @[Lookup.scala 11:37]
    node _T_283 = mux(_T_224, UInt<1>("h00"), _T_282) @[Lookup.scala 11:37]
    node _T_284 = mux(_T_220, UInt<1>("h00"), _T_283) @[Lookup.scala 11:37]
    node _T_285 = mux(_T_216, UInt<1>("h00"), _T_284) @[Lookup.scala 11:37]
    node _T_286 = mux(_T_212, UInt<1>("h00"), _T_285) @[Lookup.scala 11:37]
    node _T_287 = mux(_T_208, UInt<1>("h00"), _T_286) @[Lookup.scala 11:37]
    node _T_288 = mux(_T_204, UInt<1>("h01"), _T_287) @[Lookup.scala 11:37]
    node _T_289 = mux(_T_200, UInt<1>("h01"), _T_288) @[Lookup.scala 11:37]
    node _T_290 = mux(_T_196, UInt<1>("h01"), _T_289) @[Lookup.scala 11:37]
    node _T_291 = mux(_T_192, UInt<1>("h00"), _T_290) @[Lookup.scala 11:37]
    node _T_292 = mux(_T_188, UInt<1>("h00"), _T_291) @[Lookup.scala 11:37]
    node _T_293 = mux(_T_184, UInt<1>("h01"), _T_292) @[Lookup.scala 11:37]
    node _T_294 = mux(_T_180, UInt<1>("h01"), _T_293) @[Lookup.scala 11:37]
    node _T_295 = mux(_T_176, UInt<1>("h01"), _T_294) @[Lookup.scala 11:37]
    node _T_296 = mux(_T_172, UInt<1>("h01"), _T_295) @[Lookup.scala 11:37]
    node _T_297 = mux(_T_168, UInt<1>("h01"), _T_296) @[Lookup.scala 11:37]
    node _T_298 = mux(_T_164, UInt<1>("h01"), _T_297) @[Lookup.scala 11:37]
    node _T_299 = mux(_T_160, UInt<1>("h01"), _T_298) @[Lookup.scala 11:37]
    node _T_300 = mux(_T_156, UInt<1>("h01"), _T_299) @[Lookup.scala 11:37]
    node _T_301 = mux(_T_152, UInt<1>("h01"), _T_300) @[Lookup.scala 11:37]
    node _T_302 = mux(_T_148, UInt<1>("h01"), _T_301) @[Lookup.scala 11:37]
    node _T_303 = mux(_T_144, UInt<1>("h01"), _T_302) @[Lookup.scala 11:37]
    node _T_304 = mux(_T_140, UInt<1>("h01"), _T_303) @[Lookup.scala 11:37]
    node _T_305 = mux(_T_136, UInt<1>("h01"), _T_304) @[Lookup.scala 11:37]
    node _T_306 = mux(_T_132, UInt<1>("h01"), _T_305) @[Lookup.scala 11:37]
    node _T_307 = mux(_T_128, UInt<1>("h01"), _T_306) @[Lookup.scala 11:37]
    node _T_308 = mux(_T_124, UInt<1>("h01"), _T_307) @[Lookup.scala 11:37]
    node _T_309 = mux(_T_120, UInt<1>("h01"), _T_308) @[Lookup.scala 11:37]
    node _T_310 = mux(_T_116, UInt<1>("h01"), _T_309) @[Lookup.scala 11:37]
    node _T_311 = mux(_T_112, UInt<1>("h01"), _T_310) @[Lookup.scala 11:37]
    node _T_312 = mux(_T_108, UInt<1>("h01"), _T_311) @[Lookup.scala 11:37]
    node _T_313 = mux(_T_104, UInt<1>("h01"), _T_312) @[Lookup.scala 11:37]
    node _T_314 = mux(_T_100, UInt<1>("h01"), _T_313) @[Lookup.scala 11:37]
    node _T_315 = mux(_T_96, UInt<1>("h01"), _T_314) @[Lookup.scala 11:37]
    node _T_316 = mux(_T_92, UInt<1>("h01"), _T_315) @[Lookup.scala 11:37]
    node _T_317 = mux(_T_88, UInt<1>("h01"), _T_316) @[Lookup.scala 11:37]
    node _T_318 = mux(_T_84, UInt<1>("h01"), _T_317) @[Lookup.scala 11:37]
    node _T_319 = mux(_T_80, UInt<1>("h01"), _T_318) @[Lookup.scala 11:37]
    node _T_320 = mux(_T_76, UInt<1>("h00"), _T_319) @[Lookup.scala 11:37]
    node _T_321 = mux(_T_72, UInt<1>("h00"), _T_320) @[Lookup.scala 11:37]
    node _T_322 = mux(_T_68, UInt<1>("h00"), _T_321) @[Lookup.scala 11:37]
    node _T_323 = mux(_T_64, UInt<1>("h00"), _T_322) @[Lookup.scala 11:37]
    node _T_324 = mux(_T_60, UInt<1>("h00"), _T_323) @[Lookup.scala 11:37]
    node _T_325 = mux(_T_56, UInt<1>("h00"), _T_324) @[Lookup.scala 11:37]
    node _T_326 = mux(_T_52, UInt<1>("h01"), _T_325) @[Lookup.scala 11:37]
    node _T_327 = mux(_T_48, UInt<1>("h00"), _T_326) @[Lookup.scala 11:37]
    node _T_328 = mux(_T_44, UInt<1>("h00"), _T_327) @[Lookup.scala 11:37]
    node ctrlSignals_1 = mux(_T_40, UInt<1>("h00"), _T_328) @[Lookup.scala 11:37]
    node _T_329 = mux(_T_232, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_330 = mux(_T_228, UInt<1>("h00"), _T_329) @[Lookup.scala 11:37]
    node _T_331 = mux(_T_224, UInt<1>("h00"), _T_330) @[Lookup.scala 11:37]
    node _T_332 = mux(_T_220, UInt<1>("h00"), _T_331) @[Lookup.scala 11:37]
    node _T_333 = mux(_T_216, UInt<1>("h00"), _T_332) @[Lookup.scala 11:37]
    node _T_334 = mux(_T_212, UInt<1>("h00"), _T_333) @[Lookup.scala 11:37]
    node _T_335 = mux(_T_208, UInt<1>("h00"), _T_334) @[Lookup.scala 11:37]
    node _T_336 = mux(_T_204, UInt<1>("h00"), _T_335) @[Lookup.scala 11:37]
    node _T_337 = mux(_T_200, UInt<1>("h00"), _T_336) @[Lookup.scala 11:37]
    node _T_338 = mux(_T_196, UInt<1>("h00"), _T_337) @[Lookup.scala 11:37]
    node _T_339 = mux(_T_192, UInt<1>("h00"), _T_338) @[Lookup.scala 11:37]
    node _T_340 = mux(_T_188, UInt<1>("h00"), _T_339) @[Lookup.scala 11:37]
    node _T_341 = mux(_T_184, UInt<1>("h01"), _T_340) @[Lookup.scala 11:37]
    node _T_342 = mux(_T_180, UInt<1>("h01"), _T_341) @[Lookup.scala 11:37]
    node _T_343 = mux(_T_176, UInt<1>("h01"), _T_342) @[Lookup.scala 11:37]
    node _T_344 = mux(_T_172, UInt<1>("h01"), _T_343) @[Lookup.scala 11:37]
    node _T_345 = mux(_T_168, UInt<1>("h01"), _T_344) @[Lookup.scala 11:37]
    node _T_346 = mux(_T_164, UInt<1>("h01"), _T_345) @[Lookup.scala 11:37]
    node _T_347 = mux(_T_160, UInt<1>("h01"), _T_346) @[Lookup.scala 11:37]
    node _T_348 = mux(_T_156, UInt<1>("h01"), _T_347) @[Lookup.scala 11:37]
    node _T_349 = mux(_T_152, UInt<1>("h01"), _T_348) @[Lookup.scala 11:37]
    node _T_350 = mux(_T_148, UInt<1>("h01"), _T_349) @[Lookup.scala 11:37]
    node _T_351 = mux(_T_144, UInt<1>("h00"), _T_350) @[Lookup.scala 11:37]
    node _T_352 = mux(_T_140, UInt<1>("h00"), _T_351) @[Lookup.scala 11:37]
    node _T_353 = mux(_T_136, UInt<1>("h00"), _T_352) @[Lookup.scala 11:37]
    node _T_354 = mux(_T_132, UInt<1>("h00"), _T_353) @[Lookup.scala 11:37]
    node _T_355 = mux(_T_128, UInt<1>("h00"), _T_354) @[Lookup.scala 11:37]
    node _T_356 = mux(_T_124, UInt<1>("h00"), _T_355) @[Lookup.scala 11:37]
    node _T_357 = mux(_T_120, UInt<1>("h00"), _T_356) @[Lookup.scala 11:37]
    node _T_358 = mux(_T_116, UInt<1>("h00"), _T_357) @[Lookup.scala 11:37]
    node _T_359 = mux(_T_112, UInt<1>("h00"), _T_358) @[Lookup.scala 11:37]
    node _T_360 = mux(_T_108, UInt<1>("h00"), _T_359) @[Lookup.scala 11:37]
    node _T_361 = mux(_T_104, UInt<1>("h00"), _T_360) @[Lookup.scala 11:37]
    node _T_362 = mux(_T_100, UInt<1>("h00"), _T_361) @[Lookup.scala 11:37]
    node _T_363 = mux(_T_96, UInt<1>("h00"), _T_362) @[Lookup.scala 11:37]
    node _T_364 = mux(_T_92, UInt<1>("h00"), _T_363) @[Lookup.scala 11:37]
    node _T_365 = mux(_T_88, UInt<1>("h00"), _T_364) @[Lookup.scala 11:37]
    node _T_366 = mux(_T_84, UInt<1>("h00"), _T_365) @[Lookup.scala 11:37]
    node _T_367 = mux(_T_80, UInt<1>("h00"), _T_366) @[Lookup.scala 11:37]
    node _T_368 = mux(_T_76, UInt<1>("h00"), _T_367) @[Lookup.scala 11:37]
    node _T_369 = mux(_T_72, UInt<1>("h00"), _T_368) @[Lookup.scala 11:37]
    node _T_370 = mux(_T_68, UInt<1>("h00"), _T_369) @[Lookup.scala 11:37]
    node _T_371 = mux(_T_64, UInt<1>("h00"), _T_370) @[Lookup.scala 11:37]
    node _T_372 = mux(_T_60, UInt<1>("h00"), _T_371) @[Lookup.scala 11:37]
    node _T_373 = mux(_T_56, UInt<1>("h00"), _T_372) @[Lookup.scala 11:37]
    node _T_374 = mux(_T_52, UInt<1>("h00"), _T_373) @[Lookup.scala 11:37]
    node _T_375 = mux(_T_48, UInt<1>("h00"), _T_374) @[Lookup.scala 11:37]
    node _T_376 = mux(_T_44, UInt<1>("h00"), _T_375) @[Lookup.scala 11:37]
    node ctrlSignals_2 = mux(_T_40, UInt<1>("h00"), _T_376) @[Lookup.scala 11:37]
    node _T_377 = mux(_T_232, UInt<3>("h00"), UInt<3>("h00")) @[Lookup.scala 11:37]
    node _T_378 = mux(_T_228, UInt<3>("h00"), _T_377) @[Lookup.scala 11:37]
    node _T_379 = mux(_T_224, UInt<3>("h00"), _T_378) @[Lookup.scala 11:37]
    node _T_380 = mux(_T_220, UInt<3>("h00"), _T_379) @[Lookup.scala 11:37]
    node _T_381 = mux(_T_216, UInt<3>("h06"), _T_380) @[Lookup.scala 11:37]
    node _T_382 = mux(_T_212, UInt<3>("h06"), _T_381) @[Lookup.scala 11:37]
    node _T_383 = mux(_T_208, UInt<3>("h06"), _T_382) @[Lookup.scala 11:37]
    node _T_384 = mux(_T_204, UInt<3>("h00"), _T_383) @[Lookup.scala 11:37]
    node _T_385 = mux(_T_200, UInt<3>("h00"), _T_384) @[Lookup.scala 11:37]
    node _T_386 = mux(_T_196, UInt<3>("h00"), _T_385) @[Lookup.scala 11:37]
    node _T_387 = mux(_T_192, UInt<3>("h00"), _T_386) @[Lookup.scala 11:37]
    node _T_388 = mux(_T_188, UInt<3>("h00"), _T_387) @[Lookup.scala 11:37]
    node _T_389 = mux(_T_184, UInt<3>("h00"), _T_388) @[Lookup.scala 11:37]
    node _T_390 = mux(_T_180, UInt<3>("h00"), _T_389) @[Lookup.scala 11:37]
    node _T_391 = mux(_T_176, UInt<3>("h00"), _T_390) @[Lookup.scala 11:37]
    node _T_392 = mux(_T_172, UInt<3>("h00"), _T_391) @[Lookup.scala 11:37]
    node _T_393 = mux(_T_168, UInt<3>("h00"), _T_392) @[Lookup.scala 11:37]
    node _T_394 = mux(_T_164, UInt<3>("h00"), _T_393) @[Lookup.scala 11:37]
    node _T_395 = mux(_T_160, UInt<3>("h00"), _T_394) @[Lookup.scala 11:37]
    node _T_396 = mux(_T_156, UInt<3>("h00"), _T_395) @[Lookup.scala 11:37]
    node _T_397 = mux(_T_152, UInt<3>("h00"), _T_396) @[Lookup.scala 11:37]
    node _T_398 = mux(_T_148, UInt<3>("h00"), _T_397) @[Lookup.scala 11:37]
    node _T_399 = mux(_T_144, UInt<3>("h01"), _T_398) @[Lookup.scala 11:37]
    node _T_400 = mux(_T_140, UInt<3>("h01"), _T_399) @[Lookup.scala 11:37]
    node _T_401 = mux(_T_136, UInt<3>("h01"), _T_400) @[Lookup.scala 11:37]
    node _T_402 = mux(_T_132, UInt<3>("h01"), _T_401) @[Lookup.scala 11:37]
    node _T_403 = mux(_T_128, UInt<3>("h01"), _T_402) @[Lookup.scala 11:37]
    node _T_404 = mux(_T_124, UInt<3>("h01"), _T_403) @[Lookup.scala 11:37]
    node _T_405 = mux(_T_120, UInt<3>("h01"), _T_404) @[Lookup.scala 11:37]
    node _T_406 = mux(_T_116, UInt<3>("h01"), _T_405) @[Lookup.scala 11:37]
    node _T_407 = mux(_T_112, UInt<3>("h01"), _T_406) @[Lookup.scala 11:37]
    node _T_408 = mux(_T_108, UInt<3>("h02"), _T_407) @[Lookup.scala 11:37]
    node _T_409 = mux(_T_104, UInt<3>("h02"), _T_408) @[Lookup.scala 11:37]
    node _T_410 = mux(_T_100, UInt<3>("h02"), _T_409) @[Lookup.scala 11:37]
    node _T_411 = mux(_T_96, UInt<3>("h01"), _T_410) @[Lookup.scala 11:37]
    node _T_412 = mux(_T_92, UInt<3>("h01"), _T_411) @[Lookup.scala 11:37]
    node _T_413 = mux(_T_88, UInt<3>("h01"), _T_412) @[Lookup.scala 11:37]
    node _T_414 = mux(_T_84, UInt<3>("h01"), _T_413) @[Lookup.scala 11:37]
    node _T_415 = mux(_T_80, UInt<3>("h01"), _T_414) @[Lookup.scala 11:37]
    node _T_416 = mux(_T_76, UInt<3>("h05"), _T_415) @[Lookup.scala 11:37]
    node _T_417 = mux(_T_72, UInt<3>("h05"), _T_416) @[Lookup.scala 11:37]
    node _T_418 = mux(_T_68, UInt<3>("h05"), _T_417) @[Lookup.scala 11:37]
    node _T_419 = mux(_T_64, UInt<3>("h05"), _T_418) @[Lookup.scala 11:37]
    node _T_420 = mux(_T_60, UInt<3>("h05"), _T_419) @[Lookup.scala 11:37]
    node _T_421 = mux(_T_56, UInt<3>("h05"), _T_420) @[Lookup.scala 11:37]
    node _T_422 = mux(_T_52, UInt<3>("h01"), _T_421) @[Lookup.scala 11:37]
    node _T_423 = mux(_T_48, UInt<3>("h04"), _T_422) @[Lookup.scala 11:37]
    node _T_424 = mux(_T_44, UInt<3>("h03"), _T_423) @[Lookup.scala 11:37]
    node ctrlSignals_3 = mux(_T_40, UInt<3>("h03"), _T_424) @[Lookup.scala 11:37]
    node _T_425 = mux(_T_232, UInt<4>("h0f"), UInt<4>("h0f")) @[Lookup.scala 11:37]
    node _T_426 = mux(_T_228, UInt<4>("h0f"), _T_425) @[Lookup.scala 11:37]
    node _T_427 = mux(_T_224, UInt<4>("h0f"), _T_426) @[Lookup.scala 11:37]
    node _T_428 = mux(_T_220, UInt<4>("h0f"), _T_427) @[Lookup.scala 11:37]
    node _T_429 = mux(_T_216, UInt<4>("h0f"), _T_428) @[Lookup.scala 11:37]
    node _T_430 = mux(_T_212, UInt<4>("h0f"), _T_429) @[Lookup.scala 11:37]
    node _T_431 = mux(_T_208, UInt<4>("h0f"), _T_430) @[Lookup.scala 11:37]
    node _T_432 = mux(_T_204, UInt<4>("h0a"), _T_431) @[Lookup.scala 11:37]
    node _T_433 = mux(_T_200, UInt<4>("h0a"), _T_432) @[Lookup.scala 11:37]
    node _T_434 = mux(_T_196, UInt<4>("h0a"), _T_433) @[Lookup.scala 11:37]
    node _T_435 = mux(_T_192, UInt<4>("h0f"), _T_434) @[Lookup.scala 11:37]
    node _T_436 = mux(_T_188, UInt<4>("h0f"), _T_435) @[Lookup.scala 11:37]
    node _T_437 = mux(_T_184, UInt<4>("h02"), _T_436) @[Lookup.scala 11:37]
    node _T_438 = mux(_T_180, UInt<4>("h03"), _T_437) @[Lookup.scala 11:37]
    node _T_439 = mux(_T_176, UInt<4>("h09"), _T_438) @[Lookup.scala 11:37]
    node _T_440 = mux(_T_172, UInt<4>("h08"), _T_439) @[Lookup.scala 11:37]
    node _T_441 = mux(_T_168, UInt<4>("h04"), _T_440) @[Lookup.scala 11:37]
    node _T_442 = mux(_T_164, UInt<4>("h07"), _T_441) @[Lookup.scala 11:37]
    node _T_443 = mux(_T_160, UInt<4>("h05"), _T_442) @[Lookup.scala 11:37]
    node _T_444 = mux(_T_156, UInt<4>("h06"), _T_443) @[Lookup.scala 11:37]
    node _T_445 = mux(_T_152, UInt<4>("h01"), _T_444) @[Lookup.scala 11:37]
    node _T_446 = mux(_T_148, UInt<4>("h00"), _T_445) @[Lookup.scala 11:37]
    node _T_447 = mux(_T_144, UInt<4>("h09"), _T_446) @[Lookup.scala 11:37]
    node _T_448 = mux(_T_140, UInt<4>("h08"), _T_447) @[Lookup.scala 11:37]
    node _T_449 = mux(_T_136, UInt<4>("h06"), _T_448) @[Lookup.scala 11:37]
    node _T_450 = mux(_T_132, UInt<4>("h02"), _T_449) @[Lookup.scala 11:37]
    node _T_451 = mux(_T_128, UInt<4>("h03"), _T_450) @[Lookup.scala 11:37]
    node _T_452 = mux(_T_124, UInt<4>("h04"), _T_451) @[Lookup.scala 11:37]
    node _T_453 = mux(_T_120, UInt<4>("h07"), _T_452) @[Lookup.scala 11:37]
    node _T_454 = mux(_T_116, UInt<4>("h05"), _T_453) @[Lookup.scala 11:37]
    node _T_455 = mux(_T_112, UInt<4>("h00"), _T_454) @[Lookup.scala 11:37]
    node _T_456 = mux(_T_108, UInt<4>("h00"), _T_455) @[Lookup.scala 11:37]
    node _T_457 = mux(_T_104, UInt<4>("h00"), _T_456) @[Lookup.scala 11:37]
    node _T_458 = mux(_T_100, UInt<4>("h00"), _T_457) @[Lookup.scala 11:37]
    node _T_459 = mux(_T_96, UInt<4>("h00"), _T_458) @[Lookup.scala 11:37]
    node _T_460 = mux(_T_92, UInt<4>("h00"), _T_459) @[Lookup.scala 11:37]
    node _T_461 = mux(_T_88, UInt<4>("h00"), _T_460) @[Lookup.scala 11:37]
    node _T_462 = mux(_T_84, UInt<4>("h00"), _T_461) @[Lookup.scala 11:37]
    node _T_463 = mux(_T_80, UInt<4>("h00"), _T_462) @[Lookup.scala 11:37]
    node _T_464 = mux(_T_76, UInt<4>("h00"), _T_463) @[Lookup.scala 11:37]
    node _T_465 = mux(_T_72, UInt<4>("h00"), _T_464) @[Lookup.scala 11:37]
    node _T_466 = mux(_T_68, UInt<4>("h00"), _T_465) @[Lookup.scala 11:37]
    node _T_467 = mux(_T_64, UInt<4>("h00"), _T_466) @[Lookup.scala 11:37]
    node _T_468 = mux(_T_60, UInt<4>("h00"), _T_467) @[Lookup.scala 11:37]
    node _T_469 = mux(_T_56, UInt<4>("h00"), _T_468) @[Lookup.scala 11:37]
    node _T_470 = mux(_T_52, UInt<4>("h00"), _T_469) @[Lookup.scala 11:37]
    node _T_471 = mux(_T_48, UInt<4>("h00"), _T_470) @[Lookup.scala 11:37]
    node _T_472 = mux(_T_44, UInt<4>("h00"), _T_471) @[Lookup.scala 11:37]
    node ctrlSignals_4 = mux(_T_40, UInt<4>("h0b"), _T_472) @[Lookup.scala 11:37]
    node _T_473 = mux(_T_232, UInt<3>("h00"), UInt<3>("h00")) @[Lookup.scala 11:37]
    node _T_474 = mux(_T_228, UInt<3>("h00"), _T_473) @[Lookup.scala 11:37]
    node _T_475 = mux(_T_224, UInt<3>("h00"), _T_474) @[Lookup.scala 11:37]
    node _T_476 = mux(_T_220, UInt<3>("h00"), _T_475) @[Lookup.scala 11:37]
    node _T_477 = mux(_T_216, UInt<3>("h00"), _T_476) @[Lookup.scala 11:37]
    node _T_478 = mux(_T_212, UInt<3>("h00"), _T_477) @[Lookup.scala 11:37]
    node _T_479 = mux(_T_208, UInt<3>("h00"), _T_478) @[Lookup.scala 11:37]
    node _T_480 = mux(_T_204, UInt<3>("h00"), _T_479) @[Lookup.scala 11:37]
    node _T_481 = mux(_T_200, UInt<3>("h00"), _T_480) @[Lookup.scala 11:37]
    node _T_482 = mux(_T_196, UInt<3>("h00"), _T_481) @[Lookup.scala 11:37]
    node _T_483 = mux(_T_192, UInt<3>("h00"), _T_482) @[Lookup.scala 11:37]
    node _T_484 = mux(_T_188, UInt<3>("h00"), _T_483) @[Lookup.scala 11:37]
    node _T_485 = mux(_T_184, UInt<3>("h00"), _T_484) @[Lookup.scala 11:37]
    node _T_486 = mux(_T_180, UInt<3>("h00"), _T_485) @[Lookup.scala 11:37]
    node _T_487 = mux(_T_176, UInt<3>("h00"), _T_486) @[Lookup.scala 11:37]
    node _T_488 = mux(_T_172, UInt<3>("h00"), _T_487) @[Lookup.scala 11:37]
    node _T_489 = mux(_T_168, UInt<3>("h00"), _T_488) @[Lookup.scala 11:37]
    node _T_490 = mux(_T_164, UInt<3>("h00"), _T_489) @[Lookup.scala 11:37]
    node _T_491 = mux(_T_160, UInt<3>("h00"), _T_490) @[Lookup.scala 11:37]
    node _T_492 = mux(_T_156, UInt<3>("h00"), _T_491) @[Lookup.scala 11:37]
    node _T_493 = mux(_T_152, UInt<3>("h00"), _T_492) @[Lookup.scala 11:37]
    node _T_494 = mux(_T_148, UInt<3>("h00"), _T_493) @[Lookup.scala 11:37]
    node _T_495 = mux(_T_144, UInt<3>("h00"), _T_494) @[Lookup.scala 11:37]
    node _T_496 = mux(_T_140, UInt<3>("h00"), _T_495) @[Lookup.scala 11:37]
    node _T_497 = mux(_T_136, UInt<3>("h00"), _T_496) @[Lookup.scala 11:37]
    node _T_498 = mux(_T_132, UInt<3>("h00"), _T_497) @[Lookup.scala 11:37]
    node _T_499 = mux(_T_128, UInt<3>("h00"), _T_498) @[Lookup.scala 11:37]
    node _T_500 = mux(_T_124, UInt<3>("h00"), _T_499) @[Lookup.scala 11:37]
    node _T_501 = mux(_T_120, UInt<3>("h00"), _T_500) @[Lookup.scala 11:37]
    node _T_502 = mux(_T_116, UInt<3>("h00"), _T_501) @[Lookup.scala 11:37]
    node _T_503 = mux(_T_112, UInt<3>("h00"), _T_502) @[Lookup.scala 11:37]
    node _T_504 = mux(_T_108, UInt<3>("h00"), _T_503) @[Lookup.scala 11:37]
    node _T_505 = mux(_T_104, UInt<3>("h00"), _T_504) @[Lookup.scala 11:37]
    node _T_506 = mux(_T_100, UInt<3>("h00"), _T_505) @[Lookup.scala 11:37]
    node _T_507 = mux(_T_96, UInt<3>("h00"), _T_506) @[Lookup.scala 11:37]
    node _T_508 = mux(_T_92, UInt<3>("h00"), _T_507) @[Lookup.scala 11:37]
    node _T_509 = mux(_T_88, UInt<3>("h00"), _T_508) @[Lookup.scala 11:37]
    node _T_510 = mux(_T_84, UInt<3>("h00"), _T_509) @[Lookup.scala 11:37]
    node _T_511 = mux(_T_80, UInt<3>("h00"), _T_510) @[Lookup.scala 11:37]
    node _T_512 = mux(_T_76, UInt<3>("h04"), _T_511) @[Lookup.scala 11:37]
    node _T_513 = mux(_T_72, UInt<3>("h01"), _T_512) @[Lookup.scala 11:37]
    node _T_514 = mux(_T_68, UInt<3>("h05"), _T_513) @[Lookup.scala 11:37]
    node _T_515 = mux(_T_64, UInt<3>("h02"), _T_514) @[Lookup.scala 11:37]
    node _T_516 = mux(_T_60, UInt<3>("h06"), _T_515) @[Lookup.scala 11:37]
    node _T_517 = mux(_T_56, UInt<3>("h03"), _T_516) @[Lookup.scala 11:37]
    node _T_518 = mux(_T_52, UInt<3>("h00"), _T_517) @[Lookup.scala 11:37]
    node _T_519 = mux(_T_48, UInt<3>("h00"), _T_518) @[Lookup.scala 11:37]
    node _T_520 = mux(_T_44, UInt<3>("h00"), _T_519) @[Lookup.scala 11:37]
    node ctrlSignals_5 = mux(_T_40, UInt<3>("h00"), _T_520) @[Lookup.scala 11:37]
    node _T_521 = mux(_T_232, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_522 = mux(_T_228, UInt<1>("h01"), _T_521) @[Lookup.scala 11:37]
    node _T_523 = mux(_T_224, UInt<1>("h00"), _T_522) @[Lookup.scala 11:37]
    node _T_524 = mux(_T_220, UInt<1>("h00"), _T_523) @[Lookup.scala 11:37]
    node _T_525 = mux(_T_216, UInt<1>("h00"), _T_524) @[Lookup.scala 11:37]
    node _T_526 = mux(_T_212, UInt<1>("h00"), _T_525) @[Lookup.scala 11:37]
    node _T_527 = mux(_T_208, UInt<1>("h00"), _T_526) @[Lookup.scala 11:37]
    node _T_528 = mux(_T_204, UInt<1>("h00"), _T_527) @[Lookup.scala 11:37]
    node _T_529 = mux(_T_200, UInt<1>("h00"), _T_528) @[Lookup.scala 11:37]
    node _T_530 = mux(_T_196, UInt<1>("h00"), _T_529) @[Lookup.scala 11:37]
    node _T_531 = mux(_T_192, UInt<1>("h01"), _T_530) @[Lookup.scala 11:37]
    node _T_532 = mux(_T_188, UInt<1>("h00"), _T_531) @[Lookup.scala 11:37]
    node _T_533 = mux(_T_184, UInt<1>("h00"), _T_532) @[Lookup.scala 11:37]
    node _T_534 = mux(_T_180, UInt<1>("h00"), _T_533) @[Lookup.scala 11:37]
    node _T_535 = mux(_T_176, UInt<1>("h00"), _T_534) @[Lookup.scala 11:37]
    node _T_536 = mux(_T_172, UInt<1>("h00"), _T_535) @[Lookup.scala 11:37]
    node _T_537 = mux(_T_168, UInt<1>("h00"), _T_536) @[Lookup.scala 11:37]
    node _T_538 = mux(_T_164, UInt<1>("h00"), _T_537) @[Lookup.scala 11:37]
    node _T_539 = mux(_T_160, UInt<1>("h00"), _T_538) @[Lookup.scala 11:37]
    node _T_540 = mux(_T_156, UInt<1>("h00"), _T_539) @[Lookup.scala 11:37]
    node _T_541 = mux(_T_152, UInt<1>("h00"), _T_540) @[Lookup.scala 11:37]
    node _T_542 = mux(_T_148, UInt<1>("h00"), _T_541) @[Lookup.scala 11:37]
    node _T_543 = mux(_T_144, UInt<1>("h00"), _T_542) @[Lookup.scala 11:37]
    node _T_544 = mux(_T_140, UInt<1>("h00"), _T_543) @[Lookup.scala 11:37]
    node _T_545 = mux(_T_136, UInt<1>("h00"), _T_544) @[Lookup.scala 11:37]
    node _T_546 = mux(_T_132, UInt<1>("h00"), _T_545) @[Lookup.scala 11:37]
    node _T_547 = mux(_T_128, UInt<1>("h00"), _T_546) @[Lookup.scala 11:37]
    node _T_548 = mux(_T_124, UInt<1>("h00"), _T_547) @[Lookup.scala 11:37]
    node _T_549 = mux(_T_120, UInt<1>("h00"), _T_548) @[Lookup.scala 11:37]
    node _T_550 = mux(_T_116, UInt<1>("h00"), _T_549) @[Lookup.scala 11:37]
    node _T_551 = mux(_T_112, UInt<1>("h00"), _T_550) @[Lookup.scala 11:37]
    node _T_552 = mux(_T_108, UInt<1>("h00"), _T_551) @[Lookup.scala 11:37]
    node _T_553 = mux(_T_104, UInt<1>("h00"), _T_552) @[Lookup.scala 11:37]
    node _T_554 = mux(_T_100, UInt<1>("h00"), _T_553) @[Lookup.scala 11:37]
    node _T_555 = mux(_T_96, UInt<1>("h00"), _T_554) @[Lookup.scala 11:37]
    node _T_556 = mux(_T_92, UInt<1>("h00"), _T_555) @[Lookup.scala 11:37]
    node _T_557 = mux(_T_88, UInt<1>("h00"), _T_556) @[Lookup.scala 11:37]
    node _T_558 = mux(_T_84, UInt<1>("h00"), _T_557) @[Lookup.scala 11:37]
    node _T_559 = mux(_T_80, UInt<1>("h00"), _T_558) @[Lookup.scala 11:37]
    node _T_560 = mux(_T_76, UInt<1>("h00"), _T_559) @[Lookup.scala 11:37]
    node _T_561 = mux(_T_72, UInt<1>("h00"), _T_560) @[Lookup.scala 11:37]
    node _T_562 = mux(_T_68, UInt<1>("h00"), _T_561) @[Lookup.scala 11:37]
    node _T_563 = mux(_T_64, UInt<1>("h00"), _T_562) @[Lookup.scala 11:37]
    node _T_564 = mux(_T_60, UInt<1>("h00"), _T_563) @[Lookup.scala 11:37]
    node _T_565 = mux(_T_56, UInt<1>("h00"), _T_564) @[Lookup.scala 11:37]
    node _T_566 = mux(_T_52, UInt<1>("h01"), _T_565) @[Lookup.scala 11:37]
    node _T_567 = mux(_T_48, UInt<1>("h01"), _T_566) @[Lookup.scala 11:37]
    node _T_568 = mux(_T_44, UInt<1>("h00"), _T_567) @[Lookup.scala 11:37]
    node ctrlSignals_6 = mux(_T_40, UInt<1>("h00"), _T_568) @[Lookup.scala 11:37]
    node _T_569 = mux(_T_232, UInt<2>("h00"), UInt<2>("h00")) @[Lookup.scala 11:37]
    node _T_570 = mux(_T_228, UInt<2>("h00"), _T_569) @[Lookup.scala 11:37]
    node _T_571 = mux(_T_224, UInt<2>("h00"), _T_570) @[Lookup.scala 11:37]
    node _T_572 = mux(_T_220, UInt<2>("h00"), _T_571) @[Lookup.scala 11:37]
    node _T_573 = mux(_T_216, UInt<2>("h00"), _T_572) @[Lookup.scala 11:37]
    node _T_574 = mux(_T_212, UInt<2>("h00"), _T_573) @[Lookup.scala 11:37]
    node _T_575 = mux(_T_208, UInt<2>("h00"), _T_574) @[Lookup.scala 11:37]
    node _T_576 = mux(_T_204, UInt<2>("h00"), _T_575) @[Lookup.scala 11:37]
    node _T_577 = mux(_T_200, UInt<2>("h00"), _T_576) @[Lookup.scala 11:37]
    node _T_578 = mux(_T_196, UInt<2>("h00"), _T_577) @[Lookup.scala 11:37]
    node _T_579 = mux(_T_192, UInt<2>("h00"), _T_578) @[Lookup.scala 11:37]
    node _T_580 = mux(_T_188, UInt<2>("h00"), _T_579) @[Lookup.scala 11:37]
    node _T_581 = mux(_T_184, UInt<2>("h00"), _T_580) @[Lookup.scala 11:37]
    node _T_582 = mux(_T_180, UInt<2>("h00"), _T_581) @[Lookup.scala 11:37]
    node _T_583 = mux(_T_176, UInt<2>("h00"), _T_582) @[Lookup.scala 11:37]
    node _T_584 = mux(_T_172, UInt<2>("h00"), _T_583) @[Lookup.scala 11:37]
    node _T_585 = mux(_T_168, UInt<2>("h00"), _T_584) @[Lookup.scala 11:37]
    node _T_586 = mux(_T_164, UInt<2>("h00"), _T_585) @[Lookup.scala 11:37]
    node _T_587 = mux(_T_160, UInt<2>("h00"), _T_586) @[Lookup.scala 11:37]
    node _T_588 = mux(_T_156, UInt<2>("h00"), _T_587) @[Lookup.scala 11:37]
    node _T_589 = mux(_T_152, UInt<2>("h00"), _T_588) @[Lookup.scala 11:37]
    node _T_590 = mux(_T_148, UInt<2>("h00"), _T_589) @[Lookup.scala 11:37]
    node _T_591 = mux(_T_144, UInt<2>("h00"), _T_590) @[Lookup.scala 11:37]
    node _T_592 = mux(_T_140, UInt<2>("h00"), _T_591) @[Lookup.scala 11:37]
    node _T_593 = mux(_T_136, UInt<2>("h00"), _T_592) @[Lookup.scala 11:37]
    node _T_594 = mux(_T_132, UInt<2>("h00"), _T_593) @[Lookup.scala 11:37]
    node _T_595 = mux(_T_128, UInt<2>("h00"), _T_594) @[Lookup.scala 11:37]
    node _T_596 = mux(_T_124, UInt<2>("h00"), _T_595) @[Lookup.scala 11:37]
    node _T_597 = mux(_T_120, UInt<2>("h00"), _T_596) @[Lookup.scala 11:37]
    node _T_598 = mux(_T_116, UInt<2>("h00"), _T_597) @[Lookup.scala 11:37]
    node _T_599 = mux(_T_112, UInt<2>("h00"), _T_598) @[Lookup.scala 11:37]
    node _T_600 = mux(_T_108, UInt<2>("h01"), _T_599) @[Lookup.scala 11:37]
    node _T_601 = mux(_T_104, UInt<2>("h02"), _T_600) @[Lookup.scala 11:37]
    node _T_602 = mux(_T_100, UInt<2>("h03"), _T_601) @[Lookup.scala 11:37]
    node _T_603 = mux(_T_96, UInt<2>("h00"), _T_602) @[Lookup.scala 11:37]
    node _T_604 = mux(_T_92, UInt<2>("h00"), _T_603) @[Lookup.scala 11:37]
    node _T_605 = mux(_T_88, UInt<2>("h00"), _T_604) @[Lookup.scala 11:37]
    node _T_606 = mux(_T_84, UInt<2>("h00"), _T_605) @[Lookup.scala 11:37]
    node _T_607 = mux(_T_80, UInt<2>("h00"), _T_606) @[Lookup.scala 11:37]
    node _T_608 = mux(_T_76, UInt<2>("h00"), _T_607) @[Lookup.scala 11:37]
    node _T_609 = mux(_T_72, UInt<2>("h00"), _T_608) @[Lookup.scala 11:37]
    node _T_610 = mux(_T_68, UInt<2>("h00"), _T_609) @[Lookup.scala 11:37]
    node _T_611 = mux(_T_64, UInt<2>("h00"), _T_610) @[Lookup.scala 11:37]
    node _T_612 = mux(_T_60, UInt<2>("h00"), _T_611) @[Lookup.scala 11:37]
    node _T_613 = mux(_T_56, UInt<2>("h00"), _T_612) @[Lookup.scala 11:37]
    node _T_614 = mux(_T_52, UInt<2>("h00"), _T_613) @[Lookup.scala 11:37]
    node _T_615 = mux(_T_48, UInt<2>("h00"), _T_614) @[Lookup.scala 11:37]
    node _T_616 = mux(_T_44, UInt<2>("h00"), _T_615) @[Lookup.scala 11:37]
    node ctrlSignals_7 = mux(_T_40, UInt<2>("h00"), _T_616) @[Lookup.scala 11:37]
    node _T_617 = mux(_T_232, UInt<3>("h00"), UInt<3>("h00")) @[Lookup.scala 11:37]
    node _T_618 = mux(_T_228, UInt<3>("h00"), _T_617) @[Lookup.scala 11:37]
    node _T_619 = mux(_T_224, UInt<3>("h00"), _T_618) @[Lookup.scala 11:37]
    node _T_620 = mux(_T_220, UInt<3>("h00"), _T_619) @[Lookup.scala 11:37]
    node _T_621 = mux(_T_216, UInt<3>("h00"), _T_620) @[Lookup.scala 11:37]
    node _T_622 = mux(_T_212, UInt<3>("h00"), _T_621) @[Lookup.scala 11:37]
    node _T_623 = mux(_T_208, UInt<3>("h00"), _T_622) @[Lookup.scala 11:37]
    node _T_624 = mux(_T_204, UInt<3>("h00"), _T_623) @[Lookup.scala 11:37]
    node _T_625 = mux(_T_200, UInt<3>("h00"), _T_624) @[Lookup.scala 11:37]
    node _T_626 = mux(_T_196, UInt<3>("h00"), _T_625) @[Lookup.scala 11:37]
    node _T_627 = mux(_T_192, UInt<3>("h00"), _T_626) @[Lookup.scala 11:37]
    node _T_628 = mux(_T_188, UInt<3>("h00"), _T_627) @[Lookup.scala 11:37]
    node _T_629 = mux(_T_184, UInt<3>("h00"), _T_628) @[Lookup.scala 11:37]
    node _T_630 = mux(_T_180, UInt<3>("h00"), _T_629) @[Lookup.scala 11:37]
    node _T_631 = mux(_T_176, UInt<3>("h00"), _T_630) @[Lookup.scala 11:37]
    node _T_632 = mux(_T_172, UInt<3>("h00"), _T_631) @[Lookup.scala 11:37]
    node _T_633 = mux(_T_168, UInt<3>("h00"), _T_632) @[Lookup.scala 11:37]
    node _T_634 = mux(_T_164, UInt<3>("h00"), _T_633) @[Lookup.scala 11:37]
    node _T_635 = mux(_T_160, UInt<3>("h00"), _T_634) @[Lookup.scala 11:37]
    node _T_636 = mux(_T_156, UInt<3>("h00"), _T_635) @[Lookup.scala 11:37]
    node _T_637 = mux(_T_152, UInt<3>("h00"), _T_636) @[Lookup.scala 11:37]
    node _T_638 = mux(_T_148, UInt<3>("h00"), _T_637) @[Lookup.scala 11:37]
    node _T_639 = mux(_T_144, UInt<3>("h00"), _T_638) @[Lookup.scala 11:37]
    node _T_640 = mux(_T_140, UInt<3>("h00"), _T_639) @[Lookup.scala 11:37]
    node _T_641 = mux(_T_136, UInt<3>("h00"), _T_640) @[Lookup.scala 11:37]
    node _T_642 = mux(_T_132, UInt<3>("h00"), _T_641) @[Lookup.scala 11:37]
    node _T_643 = mux(_T_128, UInt<3>("h00"), _T_642) @[Lookup.scala 11:37]
    node _T_644 = mux(_T_124, UInt<3>("h00"), _T_643) @[Lookup.scala 11:37]
    node _T_645 = mux(_T_120, UInt<3>("h00"), _T_644) @[Lookup.scala 11:37]
    node _T_646 = mux(_T_116, UInt<3>("h00"), _T_645) @[Lookup.scala 11:37]
    node _T_647 = mux(_T_112, UInt<3>("h00"), _T_646) @[Lookup.scala 11:37]
    node _T_648 = mux(_T_108, UInt<3>("h00"), _T_647) @[Lookup.scala 11:37]
    node _T_649 = mux(_T_104, UInt<3>("h00"), _T_648) @[Lookup.scala 11:37]
    node _T_650 = mux(_T_100, UInt<3>("h00"), _T_649) @[Lookup.scala 11:37]
    node _T_651 = mux(_T_96, UInt<3>("h04"), _T_650) @[Lookup.scala 11:37]
    node _T_652 = mux(_T_92, UInt<3>("h05"), _T_651) @[Lookup.scala 11:37]
    node _T_653 = mux(_T_88, UInt<3>("h01"), _T_652) @[Lookup.scala 11:37]
    node _T_654 = mux(_T_84, UInt<3>("h02"), _T_653) @[Lookup.scala 11:37]
    node _T_655 = mux(_T_80, UInt<3>("h03"), _T_654) @[Lookup.scala 11:37]
    node _T_656 = mux(_T_76, UInt<3>("h00"), _T_655) @[Lookup.scala 11:37]
    node _T_657 = mux(_T_72, UInt<3>("h00"), _T_656) @[Lookup.scala 11:37]
    node _T_658 = mux(_T_68, UInt<3>("h00"), _T_657) @[Lookup.scala 11:37]
    node _T_659 = mux(_T_64, UInt<3>("h00"), _T_658) @[Lookup.scala 11:37]
    node _T_660 = mux(_T_60, UInt<3>("h00"), _T_659) @[Lookup.scala 11:37]
    node _T_661 = mux(_T_56, UInt<3>("h00"), _T_660) @[Lookup.scala 11:37]
    node _T_662 = mux(_T_52, UInt<3>("h00"), _T_661) @[Lookup.scala 11:37]
    node _T_663 = mux(_T_48, UInt<3>("h00"), _T_662) @[Lookup.scala 11:37]
    node _T_664 = mux(_T_44, UInt<3>("h00"), _T_663) @[Lookup.scala 11:37]
    node ctrlSignals_8 = mux(_T_40, UInt<3>("h00"), _T_664) @[Lookup.scala 11:37]
    node _T_665 = mux(_T_232, UInt<2>("h00"), UInt<2>("h00")) @[Lookup.scala 11:37]
    node _T_666 = mux(_T_228, UInt<2>("h03"), _T_665) @[Lookup.scala 11:37]
    node _T_667 = mux(_T_224, UInt<2>("h03"), _T_666) @[Lookup.scala 11:37]
    node _T_668 = mux(_T_220, UInt<2>("h03"), _T_667) @[Lookup.scala 11:37]
    node _T_669 = mux(_T_216, UInt<2>("h03"), _T_668) @[Lookup.scala 11:37]
    node _T_670 = mux(_T_212, UInt<2>("h03"), _T_669) @[Lookup.scala 11:37]
    node _T_671 = mux(_T_208, UInt<2>("h03"), _T_670) @[Lookup.scala 11:37]
    node _T_672 = mux(_T_204, UInt<2>("h03"), _T_671) @[Lookup.scala 11:37]
    node _T_673 = mux(_T_200, UInt<2>("h03"), _T_672) @[Lookup.scala 11:37]
    node _T_674 = mux(_T_196, UInt<2>("h03"), _T_673) @[Lookup.scala 11:37]
    node _T_675 = mux(_T_192, UInt<2>("h00"), _T_674) @[Lookup.scala 11:37]
    node _T_676 = mux(_T_188, UInt<2>("h00"), _T_675) @[Lookup.scala 11:37]
    node _T_677 = mux(_T_184, UInt<2>("h00"), _T_676) @[Lookup.scala 11:37]
    node _T_678 = mux(_T_180, UInt<2>("h00"), _T_677) @[Lookup.scala 11:37]
    node _T_679 = mux(_T_176, UInt<2>("h00"), _T_678) @[Lookup.scala 11:37]
    node _T_680 = mux(_T_172, UInt<2>("h00"), _T_679) @[Lookup.scala 11:37]
    node _T_681 = mux(_T_168, UInt<2>("h00"), _T_680) @[Lookup.scala 11:37]
    node _T_682 = mux(_T_164, UInt<2>("h00"), _T_681) @[Lookup.scala 11:37]
    node _T_683 = mux(_T_160, UInt<2>("h00"), _T_682) @[Lookup.scala 11:37]
    node _T_684 = mux(_T_156, UInt<2>("h00"), _T_683) @[Lookup.scala 11:37]
    node _T_685 = mux(_T_152, UInt<2>("h00"), _T_684) @[Lookup.scala 11:37]
    node _T_686 = mux(_T_148, UInt<2>("h00"), _T_685) @[Lookup.scala 11:37]
    node _T_687 = mux(_T_144, UInt<2>("h00"), _T_686) @[Lookup.scala 11:37]
    node _T_688 = mux(_T_140, UInt<2>("h00"), _T_687) @[Lookup.scala 11:37]
    node _T_689 = mux(_T_136, UInt<2>("h00"), _T_688) @[Lookup.scala 11:37]
    node _T_690 = mux(_T_132, UInt<2>("h00"), _T_689) @[Lookup.scala 11:37]
    node _T_691 = mux(_T_128, UInt<2>("h00"), _T_690) @[Lookup.scala 11:37]
    node _T_692 = mux(_T_124, UInt<2>("h00"), _T_691) @[Lookup.scala 11:37]
    node _T_693 = mux(_T_120, UInt<2>("h00"), _T_692) @[Lookup.scala 11:37]
    node _T_694 = mux(_T_116, UInt<2>("h00"), _T_693) @[Lookup.scala 11:37]
    node _T_695 = mux(_T_112, UInt<2>("h00"), _T_694) @[Lookup.scala 11:37]
    node _T_696 = mux(_T_108, UInt<2>("h00"), _T_695) @[Lookup.scala 11:37]
    node _T_697 = mux(_T_104, UInt<2>("h00"), _T_696) @[Lookup.scala 11:37]
    node _T_698 = mux(_T_100, UInt<2>("h00"), _T_697) @[Lookup.scala 11:37]
    node _T_699 = mux(_T_96, UInt<2>("h01"), _T_698) @[Lookup.scala 11:37]
    node _T_700 = mux(_T_92, UInt<2>("h01"), _T_699) @[Lookup.scala 11:37]
    node _T_701 = mux(_T_88, UInt<2>("h01"), _T_700) @[Lookup.scala 11:37]
    node _T_702 = mux(_T_84, UInt<2>("h01"), _T_701) @[Lookup.scala 11:37]
    node _T_703 = mux(_T_80, UInt<2>("h01"), _T_702) @[Lookup.scala 11:37]
    node _T_704 = mux(_T_76, UInt<2>("h00"), _T_703) @[Lookup.scala 11:37]
    node _T_705 = mux(_T_72, UInt<2>("h00"), _T_704) @[Lookup.scala 11:37]
    node _T_706 = mux(_T_68, UInt<2>("h00"), _T_705) @[Lookup.scala 11:37]
    node _T_707 = mux(_T_64, UInt<2>("h00"), _T_706) @[Lookup.scala 11:37]
    node _T_708 = mux(_T_60, UInt<2>("h00"), _T_707) @[Lookup.scala 11:37]
    node _T_709 = mux(_T_56, UInt<2>("h00"), _T_708) @[Lookup.scala 11:37]
    node _T_710 = mux(_T_52, UInt<2>("h02"), _T_709) @[Lookup.scala 11:37]
    node _T_711 = mux(_T_48, UInt<2>("h02"), _T_710) @[Lookup.scala 11:37]
    node _T_712 = mux(_T_44, UInt<2>("h00"), _T_711) @[Lookup.scala 11:37]
    node ctrlSignals_9 = mux(_T_40, UInt<2>("h00"), _T_712) @[Lookup.scala 11:37]
    node _T_713 = mux(_T_232, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_714 = mux(_T_228, UInt<1>("h00"), _T_713) @[Lookup.scala 11:37]
    node _T_715 = mux(_T_224, UInt<1>("h00"), _T_714) @[Lookup.scala 11:37]
    node _T_716 = mux(_T_220, UInt<1>("h00"), _T_715) @[Lookup.scala 11:37]
    node _T_717 = mux(_T_216, UInt<1>("h01"), _T_716) @[Lookup.scala 11:37]
    node _T_718 = mux(_T_212, UInt<1>("h01"), _T_717) @[Lookup.scala 11:37]
    node _T_719 = mux(_T_208, UInt<1>("h01"), _T_718) @[Lookup.scala 11:37]
    node _T_720 = mux(_T_204, UInt<1>("h01"), _T_719) @[Lookup.scala 11:37]
    node _T_721 = mux(_T_200, UInt<1>("h01"), _T_720) @[Lookup.scala 11:37]
    node _T_722 = mux(_T_196, UInt<1>("h01"), _T_721) @[Lookup.scala 11:37]
    node _T_723 = mux(_T_192, UInt<1>("h00"), _T_722) @[Lookup.scala 11:37]
    node _T_724 = mux(_T_188, UInt<1>("h00"), _T_723) @[Lookup.scala 11:37]
    node _T_725 = mux(_T_184, UInt<1>("h01"), _T_724) @[Lookup.scala 11:37]
    node _T_726 = mux(_T_180, UInt<1>("h01"), _T_725) @[Lookup.scala 11:37]
    node _T_727 = mux(_T_176, UInt<1>("h01"), _T_726) @[Lookup.scala 11:37]
    node _T_728 = mux(_T_172, UInt<1>("h01"), _T_727) @[Lookup.scala 11:37]
    node _T_729 = mux(_T_168, UInt<1>("h01"), _T_728) @[Lookup.scala 11:37]
    node _T_730 = mux(_T_164, UInt<1>("h01"), _T_729) @[Lookup.scala 11:37]
    node _T_731 = mux(_T_160, UInt<1>("h01"), _T_730) @[Lookup.scala 11:37]
    node _T_732 = mux(_T_156, UInt<1>("h01"), _T_731) @[Lookup.scala 11:37]
    node _T_733 = mux(_T_152, UInt<1>("h01"), _T_732) @[Lookup.scala 11:37]
    node _T_734 = mux(_T_148, UInt<1>("h01"), _T_733) @[Lookup.scala 11:37]
    node _T_735 = mux(_T_144, UInt<1>("h01"), _T_734) @[Lookup.scala 11:37]
    node _T_736 = mux(_T_140, UInt<1>("h01"), _T_735) @[Lookup.scala 11:37]
    node _T_737 = mux(_T_136, UInt<1>("h01"), _T_736) @[Lookup.scala 11:37]
    node _T_738 = mux(_T_132, UInt<1>("h01"), _T_737) @[Lookup.scala 11:37]
    node _T_739 = mux(_T_128, UInt<1>("h01"), _T_738) @[Lookup.scala 11:37]
    node _T_740 = mux(_T_124, UInt<1>("h01"), _T_739) @[Lookup.scala 11:37]
    node _T_741 = mux(_T_120, UInt<1>("h01"), _T_740) @[Lookup.scala 11:37]
    node _T_742 = mux(_T_116, UInt<1>("h01"), _T_741) @[Lookup.scala 11:37]
    node _T_743 = mux(_T_112, UInt<1>("h01"), _T_742) @[Lookup.scala 11:37]
    node _T_744 = mux(_T_108, UInt<1>("h00"), _T_743) @[Lookup.scala 11:37]
    node _T_745 = mux(_T_104, UInt<1>("h00"), _T_744) @[Lookup.scala 11:37]
    node _T_746 = mux(_T_100, UInt<1>("h00"), _T_745) @[Lookup.scala 11:37]
    node _T_747 = mux(_T_96, UInt<1>("h01"), _T_746) @[Lookup.scala 11:37]
    node _T_748 = mux(_T_92, UInt<1>("h01"), _T_747) @[Lookup.scala 11:37]
    node _T_749 = mux(_T_88, UInt<1>("h01"), _T_748) @[Lookup.scala 11:37]
    node _T_750 = mux(_T_84, UInt<1>("h01"), _T_749) @[Lookup.scala 11:37]
    node _T_751 = mux(_T_80, UInt<1>("h01"), _T_750) @[Lookup.scala 11:37]
    node _T_752 = mux(_T_76, UInt<1>("h00"), _T_751) @[Lookup.scala 11:37]
    node _T_753 = mux(_T_72, UInt<1>("h00"), _T_752) @[Lookup.scala 11:37]
    node _T_754 = mux(_T_68, UInt<1>("h00"), _T_753) @[Lookup.scala 11:37]
    node _T_755 = mux(_T_64, UInt<1>("h00"), _T_754) @[Lookup.scala 11:37]
    node _T_756 = mux(_T_60, UInt<1>("h00"), _T_755) @[Lookup.scala 11:37]
    node _T_757 = mux(_T_56, UInt<1>("h00"), _T_756) @[Lookup.scala 11:37]
    node _T_758 = mux(_T_52, UInt<1>("h01"), _T_757) @[Lookup.scala 11:37]
    node _T_759 = mux(_T_48, UInt<1>("h01"), _T_758) @[Lookup.scala 11:37]
    node _T_760 = mux(_T_44, UInt<1>("h01"), _T_759) @[Lookup.scala 11:37]
    node ctrlSignals_10 = mux(_T_40, UInt<1>("h01"), _T_760) @[Lookup.scala 11:37]
    node _T_761 = mux(_T_232, UInt<3>("h00"), UInt<3>("h00")) @[Lookup.scala 11:37]
    node _T_762 = mux(_T_228, UInt<3>("h04"), _T_761) @[Lookup.scala 11:37]
    node _T_763 = mux(_T_224, UInt<3>("h04"), _T_762) @[Lookup.scala 11:37]
    node _T_764 = mux(_T_220, UInt<3>("h04"), _T_763) @[Lookup.scala 11:37]
    node _T_765 = mux(_T_216, UInt<3>("h03"), _T_764) @[Lookup.scala 11:37]
    node _T_766 = mux(_T_212, UInt<3>("h02"), _T_765) @[Lookup.scala 11:37]
    node _T_767 = mux(_T_208, UInt<3>("h01"), _T_766) @[Lookup.scala 11:37]
    node _T_768 = mux(_T_204, UInt<3>("h03"), _T_767) @[Lookup.scala 11:37]
    node _T_769 = mux(_T_200, UInt<3>("h02"), _T_768) @[Lookup.scala 11:37]
    node _T_770 = mux(_T_196, UInt<3>("h01"), _T_769) @[Lookup.scala 11:37]
    node _T_771 = mux(_T_192, UInt<3>("h00"), _T_770) @[Lookup.scala 11:37]
    node _T_772 = mux(_T_188, UInt<3>("h00"), _T_771) @[Lookup.scala 11:37]
    node _T_773 = mux(_T_184, UInt<3>("h00"), _T_772) @[Lookup.scala 11:37]
    node _T_774 = mux(_T_180, UInt<3>("h00"), _T_773) @[Lookup.scala 11:37]
    node _T_775 = mux(_T_176, UInt<3>("h00"), _T_774) @[Lookup.scala 11:37]
    node _T_776 = mux(_T_172, UInt<3>("h00"), _T_775) @[Lookup.scala 11:37]
    node _T_777 = mux(_T_168, UInt<3>("h00"), _T_776) @[Lookup.scala 11:37]
    node _T_778 = mux(_T_164, UInt<3>("h00"), _T_777) @[Lookup.scala 11:37]
    node _T_779 = mux(_T_160, UInt<3>("h00"), _T_778) @[Lookup.scala 11:37]
    node _T_780 = mux(_T_156, UInt<3>("h00"), _T_779) @[Lookup.scala 11:37]
    node _T_781 = mux(_T_152, UInt<3>("h00"), _T_780) @[Lookup.scala 11:37]
    node _T_782 = mux(_T_148, UInt<3>("h00"), _T_781) @[Lookup.scala 11:37]
    node _T_783 = mux(_T_144, UInt<3>("h00"), _T_782) @[Lookup.scala 11:37]
    node _T_784 = mux(_T_140, UInt<3>("h00"), _T_783) @[Lookup.scala 11:37]
    node _T_785 = mux(_T_136, UInt<3>("h00"), _T_784) @[Lookup.scala 11:37]
    node _T_786 = mux(_T_132, UInt<3>("h00"), _T_785) @[Lookup.scala 11:37]
    node _T_787 = mux(_T_128, UInt<3>("h00"), _T_786) @[Lookup.scala 11:37]
    node _T_788 = mux(_T_124, UInt<3>("h00"), _T_787) @[Lookup.scala 11:37]
    node _T_789 = mux(_T_120, UInt<3>("h00"), _T_788) @[Lookup.scala 11:37]
    node _T_790 = mux(_T_116, UInt<3>("h00"), _T_789) @[Lookup.scala 11:37]
    node _T_791 = mux(_T_112, UInt<3>("h00"), _T_790) @[Lookup.scala 11:37]
    node _T_792 = mux(_T_108, UInt<3>("h00"), _T_791) @[Lookup.scala 11:37]
    node _T_793 = mux(_T_104, UInt<3>("h00"), _T_792) @[Lookup.scala 11:37]
    node _T_794 = mux(_T_100, UInt<3>("h00"), _T_793) @[Lookup.scala 11:37]
    node _T_795 = mux(_T_96, UInt<3>("h00"), _T_794) @[Lookup.scala 11:37]
    node _T_796 = mux(_T_92, UInt<3>("h00"), _T_795) @[Lookup.scala 11:37]
    node _T_797 = mux(_T_88, UInt<3>("h00"), _T_796) @[Lookup.scala 11:37]
    node _T_798 = mux(_T_84, UInt<3>("h00"), _T_797) @[Lookup.scala 11:37]
    node _T_799 = mux(_T_80, UInt<3>("h00"), _T_798) @[Lookup.scala 11:37]
    node _T_800 = mux(_T_76, UInt<3>("h00"), _T_799) @[Lookup.scala 11:37]
    node _T_801 = mux(_T_72, UInt<3>("h00"), _T_800) @[Lookup.scala 11:37]
    node _T_802 = mux(_T_68, UInt<3>("h00"), _T_801) @[Lookup.scala 11:37]
    node _T_803 = mux(_T_64, UInt<3>("h00"), _T_802) @[Lookup.scala 11:37]
    node _T_804 = mux(_T_60, UInt<3>("h00"), _T_803) @[Lookup.scala 11:37]
    node _T_805 = mux(_T_56, UInt<3>("h00"), _T_804) @[Lookup.scala 11:37]
    node _T_806 = mux(_T_52, UInt<3>("h00"), _T_805) @[Lookup.scala 11:37]
    node _T_807 = mux(_T_48, UInt<3>("h00"), _T_806) @[Lookup.scala 11:37]
    node _T_808 = mux(_T_44, UInt<3>("h00"), _T_807) @[Lookup.scala 11:37]
    node ctrlSignals_11 = mux(_T_40, UInt<3>("h00"), _T_808) @[Lookup.scala 11:37]
    node _T_809 = mux(_T_232, UInt<1>("h00"), UInt<1>("h01")) @[Lookup.scala 11:37]
    node _T_810 = mux(_T_228, UInt<1>("h00"), _T_809) @[Lookup.scala 11:37]
    node _T_811 = mux(_T_224, UInt<1>("h00"), _T_810) @[Lookup.scala 11:37]
    node _T_812 = mux(_T_220, UInt<1>("h00"), _T_811) @[Lookup.scala 11:37]
    node _T_813 = mux(_T_216, UInt<1>("h00"), _T_812) @[Lookup.scala 11:37]
    node _T_814 = mux(_T_212, UInt<1>("h00"), _T_813) @[Lookup.scala 11:37]
    node _T_815 = mux(_T_208, UInt<1>("h00"), _T_814) @[Lookup.scala 11:37]
    node _T_816 = mux(_T_204, UInt<1>("h00"), _T_815) @[Lookup.scala 11:37]
    node _T_817 = mux(_T_200, UInt<1>("h00"), _T_816) @[Lookup.scala 11:37]
    node _T_818 = mux(_T_196, UInt<1>("h00"), _T_817) @[Lookup.scala 11:37]
    node _T_819 = mux(_T_192, UInt<1>("h00"), _T_818) @[Lookup.scala 11:37]
    node _T_820 = mux(_T_188, UInt<1>("h00"), _T_819) @[Lookup.scala 11:37]
    node _T_821 = mux(_T_184, UInt<1>("h00"), _T_820) @[Lookup.scala 11:37]
    node _T_822 = mux(_T_180, UInt<1>("h00"), _T_821) @[Lookup.scala 11:37]
    node _T_823 = mux(_T_176, UInt<1>("h00"), _T_822) @[Lookup.scala 11:37]
    node _T_824 = mux(_T_172, UInt<1>("h00"), _T_823) @[Lookup.scala 11:37]
    node _T_825 = mux(_T_168, UInt<1>("h00"), _T_824) @[Lookup.scala 11:37]
    node _T_826 = mux(_T_164, UInt<1>("h00"), _T_825) @[Lookup.scala 11:37]
    node _T_827 = mux(_T_160, UInt<1>("h00"), _T_826) @[Lookup.scala 11:37]
    node _T_828 = mux(_T_156, UInt<1>("h00"), _T_827) @[Lookup.scala 11:37]
    node _T_829 = mux(_T_152, UInt<1>("h00"), _T_828) @[Lookup.scala 11:37]
    node _T_830 = mux(_T_148, UInt<1>("h00"), _T_829) @[Lookup.scala 11:37]
    node _T_831 = mux(_T_144, UInt<1>("h00"), _T_830) @[Lookup.scala 11:37]
    node _T_832 = mux(_T_140, UInt<1>("h00"), _T_831) @[Lookup.scala 11:37]
    node _T_833 = mux(_T_136, UInt<1>("h00"), _T_832) @[Lookup.scala 11:37]
    node _T_834 = mux(_T_132, UInt<1>("h00"), _T_833) @[Lookup.scala 11:37]
    node _T_835 = mux(_T_128, UInt<1>("h00"), _T_834) @[Lookup.scala 11:37]
    node _T_836 = mux(_T_124, UInt<1>("h00"), _T_835) @[Lookup.scala 11:37]
    node _T_837 = mux(_T_120, UInt<1>("h00"), _T_836) @[Lookup.scala 11:37]
    node _T_838 = mux(_T_116, UInt<1>("h00"), _T_837) @[Lookup.scala 11:37]
    node _T_839 = mux(_T_112, UInt<1>("h00"), _T_838) @[Lookup.scala 11:37]
    node _T_840 = mux(_T_108, UInt<1>("h00"), _T_839) @[Lookup.scala 11:37]
    node _T_841 = mux(_T_104, UInt<1>("h00"), _T_840) @[Lookup.scala 11:37]
    node _T_842 = mux(_T_100, UInt<1>("h00"), _T_841) @[Lookup.scala 11:37]
    node _T_843 = mux(_T_96, UInt<1>("h00"), _T_842) @[Lookup.scala 11:37]
    node _T_844 = mux(_T_92, UInt<1>("h00"), _T_843) @[Lookup.scala 11:37]
    node _T_845 = mux(_T_88, UInt<1>("h00"), _T_844) @[Lookup.scala 11:37]
    node _T_846 = mux(_T_84, UInt<1>("h00"), _T_845) @[Lookup.scala 11:37]
    node _T_847 = mux(_T_80, UInt<1>("h00"), _T_846) @[Lookup.scala 11:37]
    node _T_848 = mux(_T_76, UInt<1>("h00"), _T_847) @[Lookup.scala 11:37]
    node _T_849 = mux(_T_72, UInt<1>("h00"), _T_848) @[Lookup.scala 11:37]
    node _T_850 = mux(_T_68, UInt<1>("h00"), _T_849) @[Lookup.scala 11:37]
    node _T_851 = mux(_T_64, UInt<1>("h00"), _T_850) @[Lookup.scala 11:37]
    node _T_852 = mux(_T_60, UInt<1>("h00"), _T_851) @[Lookup.scala 11:37]
    node _T_853 = mux(_T_56, UInt<1>("h00"), _T_852) @[Lookup.scala 11:37]
    node _T_854 = mux(_T_52, UInt<1>("h00"), _T_853) @[Lookup.scala 11:37]
    node _T_855 = mux(_T_48, UInt<1>("h00"), _T_854) @[Lookup.scala 11:37]
    node _T_856 = mux(_T_44, UInt<1>("h00"), _T_855) @[Lookup.scala 11:37]
    node ctrlSignals_12 = mux(_T_40, UInt<1>("h00"), _T_856) @[Lookup.scala 11:37]
    node _T_857 = mux(_T_232, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_858 = mux(_T_228, UInt<1>("h00"), _T_857) @[Lookup.scala 11:37]
    node _T_859 = mux(_T_224, UInt<1>("h00"), _T_858) @[Lookup.scala 11:37]
    node _T_860 = mux(_T_220, UInt<1>("h00"), _T_859) @[Lookup.scala 11:37]
    node _T_861 = mux(_T_216, UInt<1>("h00"), _T_860) @[Lookup.scala 11:37]
    node _T_862 = mux(_T_212, UInt<1>("h00"), _T_861) @[Lookup.scala 11:37]
    node _T_863 = mux(_T_208, UInt<1>("h00"), _T_862) @[Lookup.scala 11:37]
    node _T_864 = mux(_T_204, UInt<1>("h01"), _T_863) @[Lookup.scala 11:37]
    node _T_865 = mux(_T_200, UInt<1>("h01"), _T_864) @[Lookup.scala 11:37]
    node _T_866 = mux(_T_196, UInt<1>("h01"), _T_865) @[Lookup.scala 11:37]
    node _T_867 = mux(_T_192, UInt<1>("h00"), _T_866) @[Lookup.scala 11:37]
    node _T_868 = mux(_T_188, UInt<1>("h00"), _T_867) @[Lookup.scala 11:37]
    node _T_869 = mux(_T_184, UInt<1>("h01"), _T_868) @[Lookup.scala 11:37]
    node _T_870 = mux(_T_180, UInt<1>("h01"), _T_869) @[Lookup.scala 11:37]
    node _T_871 = mux(_T_176, UInt<1>("h01"), _T_870) @[Lookup.scala 11:37]
    node _T_872 = mux(_T_172, UInt<1>("h01"), _T_871) @[Lookup.scala 11:37]
    node _T_873 = mux(_T_168, UInt<1>("h01"), _T_872) @[Lookup.scala 11:37]
    node _T_874 = mux(_T_164, UInt<1>("h01"), _T_873) @[Lookup.scala 11:37]
    node _T_875 = mux(_T_160, UInt<1>("h01"), _T_874) @[Lookup.scala 11:37]
    node _T_876 = mux(_T_156, UInt<1>("h01"), _T_875) @[Lookup.scala 11:37]
    node _T_877 = mux(_T_152, UInt<1>("h01"), _T_876) @[Lookup.scala 11:37]
    node _T_878 = mux(_T_148, UInt<1>("h01"), _T_877) @[Lookup.scala 11:37]
    node _T_879 = mux(_T_144, UInt<1>("h01"), _T_878) @[Lookup.scala 11:37]
    node _T_880 = mux(_T_140, UInt<1>("h01"), _T_879) @[Lookup.scala 11:37]
    node _T_881 = mux(_T_136, UInt<1>("h01"), _T_880) @[Lookup.scala 11:37]
    node _T_882 = mux(_T_132, UInt<1>("h01"), _T_881) @[Lookup.scala 11:37]
    node _T_883 = mux(_T_128, UInt<1>("h01"), _T_882) @[Lookup.scala 11:37]
    node _T_884 = mux(_T_124, UInt<1>("h01"), _T_883) @[Lookup.scala 11:37]
    node _T_885 = mux(_T_120, UInt<1>("h01"), _T_884) @[Lookup.scala 11:37]
    node _T_886 = mux(_T_116, UInt<1>("h01"), _T_885) @[Lookup.scala 11:37]
    node _T_887 = mux(_T_112, UInt<1>("h01"), _T_886) @[Lookup.scala 11:37]
    node _T_888 = mux(_T_108, UInt<1>("h01"), _T_887) @[Lookup.scala 11:37]
    node _T_889 = mux(_T_104, UInt<1>("h01"), _T_888) @[Lookup.scala 11:37]
    node _T_890 = mux(_T_100, UInt<1>("h01"), _T_889) @[Lookup.scala 11:37]
    node _T_891 = mux(_T_96, UInt<1>("h01"), _T_890) @[Lookup.scala 11:37]
    node _T_892 = mux(_T_92, UInt<1>("h01"), _T_891) @[Lookup.scala 11:37]
    node _T_893 = mux(_T_88, UInt<1>("h01"), _T_892) @[Lookup.scala 11:37]
    node _T_894 = mux(_T_84, UInt<1>("h01"), _T_893) @[Lookup.scala 11:37]
    node _T_895 = mux(_T_80, UInt<1>("h01"), _T_894) @[Lookup.scala 11:37]
    node _T_896 = mux(_T_76, UInt<1>("h01"), _T_895) @[Lookup.scala 11:37]
    node _T_897 = mux(_T_72, UInt<1>("h01"), _T_896) @[Lookup.scala 11:37]
    node _T_898 = mux(_T_68, UInt<1>("h01"), _T_897) @[Lookup.scala 11:37]
    node _T_899 = mux(_T_64, UInt<1>("h01"), _T_898) @[Lookup.scala 11:37]
    node _T_900 = mux(_T_60, UInt<1>("h01"), _T_899) @[Lookup.scala 11:37]
    node _T_901 = mux(_T_56, UInt<1>("h01"), _T_900) @[Lookup.scala 11:37]
    node _T_902 = mux(_T_52, UInt<1>("h01"), _T_901) @[Lookup.scala 11:37]
    node _T_903 = mux(_T_48, UInt<1>("h00"), _T_902) @[Lookup.scala 11:37]
    node _T_904 = mux(_T_44, UInt<1>("h00"), _T_903) @[Lookup.scala 11:37]
    node ctrlSignals_13 = mux(_T_40, UInt<1>("h00"), _T_904) @[Lookup.scala 11:37]
    node _T_905 = mux(_T_232, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_906 = mux(_T_228, UInt<1>("h00"), _T_905) @[Lookup.scala 11:37]
    node _T_907 = mux(_T_224, UInt<1>("h00"), _T_906) @[Lookup.scala 11:37]
    node _T_908 = mux(_T_220, UInt<1>("h00"), _T_907) @[Lookup.scala 11:37]
    node _T_909 = mux(_T_216, UInt<1>("h00"), _T_908) @[Lookup.scala 11:37]
    node _T_910 = mux(_T_212, UInt<1>("h00"), _T_909) @[Lookup.scala 11:37]
    node _T_911 = mux(_T_208, UInt<1>("h00"), _T_910) @[Lookup.scala 11:37]
    node _T_912 = mux(_T_204, UInt<1>("h00"), _T_911) @[Lookup.scala 11:37]
    node _T_913 = mux(_T_200, UInt<1>("h00"), _T_912) @[Lookup.scala 11:37]
    node _T_914 = mux(_T_196, UInt<1>("h00"), _T_913) @[Lookup.scala 11:37]
    node _T_915 = mux(_T_192, UInt<1>("h00"), _T_914) @[Lookup.scala 11:37]
    node _T_916 = mux(_T_188, UInt<1>("h00"), _T_915) @[Lookup.scala 11:37]
    node _T_917 = mux(_T_184, UInt<1>("h01"), _T_916) @[Lookup.scala 11:37]
    node _T_918 = mux(_T_180, UInt<1>("h01"), _T_917) @[Lookup.scala 11:37]
    node _T_919 = mux(_T_176, UInt<1>("h01"), _T_918) @[Lookup.scala 11:37]
    node _T_920 = mux(_T_172, UInt<1>("h01"), _T_919) @[Lookup.scala 11:37]
    node _T_921 = mux(_T_168, UInt<1>("h01"), _T_920) @[Lookup.scala 11:37]
    node _T_922 = mux(_T_164, UInt<1>("h01"), _T_921) @[Lookup.scala 11:37]
    node _T_923 = mux(_T_160, UInt<1>("h01"), _T_922) @[Lookup.scala 11:37]
    node _T_924 = mux(_T_156, UInt<1>("h01"), _T_923) @[Lookup.scala 11:37]
    node _T_925 = mux(_T_152, UInt<1>("h01"), _T_924) @[Lookup.scala 11:37]
    node _T_926 = mux(_T_148, UInt<1>("h01"), _T_925) @[Lookup.scala 11:37]
    node _T_927 = mux(_T_144, UInt<1>("h00"), _T_926) @[Lookup.scala 11:37]
    node _T_928 = mux(_T_140, UInt<1>("h00"), _T_927) @[Lookup.scala 11:37]
    node _T_929 = mux(_T_136, UInt<1>("h00"), _T_928) @[Lookup.scala 11:37]
    node _T_930 = mux(_T_132, UInt<1>("h00"), _T_929) @[Lookup.scala 11:37]
    node _T_931 = mux(_T_128, UInt<1>("h00"), _T_930) @[Lookup.scala 11:37]
    node _T_932 = mux(_T_124, UInt<1>("h00"), _T_931) @[Lookup.scala 11:37]
    node _T_933 = mux(_T_120, UInt<1>("h00"), _T_932) @[Lookup.scala 11:37]
    node _T_934 = mux(_T_116, UInt<1>("h00"), _T_933) @[Lookup.scala 11:37]
    node _T_935 = mux(_T_112, UInt<1>("h00"), _T_934) @[Lookup.scala 11:37]
    node _T_936 = mux(_T_108, UInt<1>("h01"), _T_935) @[Lookup.scala 11:37]
    node _T_937 = mux(_T_104, UInt<1>("h01"), _T_936) @[Lookup.scala 11:37]
    node _T_938 = mux(_T_100, UInt<1>("h01"), _T_937) @[Lookup.scala 11:37]
    node _T_939 = mux(_T_96, UInt<1>("h00"), _T_938) @[Lookup.scala 11:37]
    node _T_940 = mux(_T_92, UInt<1>("h00"), _T_939) @[Lookup.scala 11:37]
    node _T_941 = mux(_T_88, UInt<1>("h00"), _T_940) @[Lookup.scala 11:37]
    node _T_942 = mux(_T_84, UInt<1>("h00"), _T_941) @[Lookup.scala 11:37]
    node _T_943 = mux(_T_80, UInt<1>("h00"), _T_942) @[Lookup.scala 11:37]
    node _T_944 = mux(_T_76, UInt<1>("h01"), _T_943) @[Lookup.scala 11:37]
    node _T_945 = mux(_T_72, UInt<1>("h01"), _T_944) @[Lookup.scala 11:37]
    node _T_946 = mux(_T_68, UInt<1>("h01"), _T_945) @[Lookup.scala 11:37]
    node _T_947 = mux(_T_64, UInt<1>("h01"), _T_946) @[Lookup.scala 11:37]
    node _T_948 = mux(_T_60, UInt<1>("h01"), _T_947) @[Lookup.scala 11:37]
    node _T_949 = mux(_T_56, UInt<1>("h01"), _T_948) @[Lookup.scala 11:37]
    node _T_950 = mux(_T_52, UInt<1>("h00"), _T_949) @[Lookup.scala 11:37]
    node _T_951 = mux(_T_48, UInt<1>("h00"), _T_950) @[Lookup.scala 11:37]
    node _T_952 = mux(_T_44, UInt<1>("h00"), _T_951) @[Lookup.scala 11:37]
    node ctrlSignals_14 = mux(_T_40, UInt<1>("h00"), _T_952) @[Lookup.scala 11:37]
    io.pc_sel <= ctrlSignals_0 @[pipeline_control.scala 112:16]
    node _T_953 = bits(ctrlSignals_6, 0, 0) @[pipeline_control.scala 113:34]
    io.inst_kill <= _T_953 @[pipeline_control.scala 113:16]
    io.a_sel <= ctrlSignals_1 @[pipeline_control.scala 116:17]
    io.b_sel <= ctrlSignals_2 @[pipeline_control.scala 117:17]
    io.imm_sel <= ctrlSignals_3 @[pipeline_control.scala 118:17]
    io.alu_op <= ctrlSignals_4 @[pipeline_control.scala 119:17]
    io.br_type <= ctrlSignals_5 @[pipeline_control.scala 120:17]
    io.st_type <= ctrlSignals_7 @[pipeline_control.scala 121:17]
    io.ld_type <= ctrlSignals_8 @[pipeline_control.scala 124:17]
    io.wb_mux_sel <= ctrlSignals_9 @[pipeline_control.scala 125:17]
    node _T_954 = bits(ctrlSignals_10, 0, 0) @[pipeline_control.scala 126:36]
    io.wb_en <= _T_954 @[pipeline_control.scala 126:17]
    io.csr_cmd <= ctrlSignals_11 @[pipeline_control.scala 127:17]
    io.illegal <= ctrlSignals_12 @[pipeline_control.scala 128:17]
    io.en_rs1 <= ctrlSignals_13 @[pipeline_control.scala 129:17]
    io.en_rs2 <= ctrlSignals_14 @[pipeline_control.scala 130:17]
    
  module Core : 
    input clock : Clock
    input reset : UInt<1>
    output io : {irq : {flip uart_irq : UInt<1>, flip spi_irq : UInt<1>, flip m1_irq : UInt<1>, flip m2_irq : UInt<1>, flip m3_irq : UInt<1>}, flip ibus : {flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, flip dbus : {flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}}
    
    inst dpath of Datapath @[core.scala 58:25]
    dpath.clock <= clock
    dpath.reset <= reset
    inst ctrl of Control @[core.scala 59:25]
    ctrl.clock <= clock
    ctrl.reset <= reset
    dpath.io.irq.m3_irq <= io.irq.m3_irq @[core.scala 63:17]
    dpath.io.irq.m2_irq <= io.irq.m2_irq @[core.scala 63:17]
    dpath.io.irq.m1_irq <= io.irq.m1_irq @[core.scala 63:17]
    dpath.io.irq.spi_irq <= io.irq.spi_irq @[core.scala 63:17]
    dpath.io.irq.uart_irq <= io.irq.uart_irq @[core.scala 63:17]
    dpath.io.ibus.valid <= io.ibus.valid @[core.scala 64:17]
    dpath.io.ibus.inst <= io.ibus.inst @[core.scala 64:17]
    io.ibus.addr <= dpath.io.ibus.addr @[core.scala 64:17]
    dpath.io.dbus.valid <= io.dbus.valid @[core.scala 65:17]
    io.dbus.ld_type <= dpath.io.dbus.ld_type @[core.scala 65:17]
    io.dbus.st_type <= dpath.io.dbus.st_type @[core.scala 65:17]
    io.dbus.wr_en <= dpath.io.dbus.wr_en @[core.scala 65:17]
    io.dbus.rd_en <= dpath.io.dbus.rd_en @[core.scala 65:17]
    dpath.io.dbus.rdata <= io.dbus.rdata @[core.scala 65:17]
    io.dbus.wdata <= dpath.io.dbus.wdata @[core.scala 65:17]
    io.dbus.addr <= dpath.io.dbus.addr @[core.scala 65:17]
    dpath.io.ctrl.en_rs2 <= ctrl.io.en_rs2 @[core.scala 66:17]
    dpath.io.ctrl.en_rs1 <= ctrl.io.en_rs1 @[core.scala 66:17]
    dpath.io.ctrl.illegal <= ctrl.io.illegal @[core.scala 66:17]
    dpath.io.ctrl.csr_cmd <= ctrl.io.csr_cmd @[core.scala 66:17]
    dpath.io.ctrl.wb_en <= ctrl.io.wb_en @[core.scala 66:17]
    dpath.io.ctrl.wb_mux_sel <= ctrl.io.wb_mux_sel @[core.scala 66:17]
    dpath.io.ctrl.ld_type <= ctrl.io.ld_type @[core.scala 66:17]
    dpath.io.ctrl.st_type <= ctrl.io.st_type @[core.scala 66:17]
    dpath.io.ctrl.br_type <= ctrl.io.br_type @[core.scala 66:17]
    dpath.io.ctrl.alu_op <= ctrl.io.alu_op @[core.scala 66:17]
    dpath.io.ctrl.imm_sel <= ctrl.io.imm_sel @[core.scala 66:17]
    dpath.io.ctrl.b_sel <= ctrl.io.b_sel @[core.scala 66:17]
    dpath.io.ctrl.a_sel <= ctrl.io.a_sel @[core.scala 66:17]
    dpath.io.ctrl.inst_kill <= ctrl.io.inst_kill @[core.scala 66:17]
    dpath.io.ctrl.pc_sel <= ctrl.io.pc_sel @[core.scala 66:17]
    ctrl.io.inst <= dpath.io.ctrl.inst @[core.scala 66:17]
    
  module DMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip dmem_addr : UInt<11>, flip dmem_wdata : UInt<32>, dmem_rdata : UInt<32>, flip wr_en : UInt<1>, flip st_type : UInt<4>}
    
    smem dmem : UInt<8>[2048] @[memory.scala 78:26]
    when io.wr_en : @[memory.scala 85:19]
      node _T_17 = bits(io.st_type, 0, 0) @[memory.scala 86:18]
      node _T_18 = bits(_T_17, 0, 0) @[memory.scala 86:22]
      when _T_18 : @[memory.scala 86:30]
        infer mport _T_19 = dmem[io.dmem_addr], clock @[memory.scala 87:11]
        node _T_20 = bits(io.dmem_wdata, 7, 0) @[memory.scala 87:26]
        _T_19 <= _T_20 @[memory.scala 87:18]
        skip @[memory.scala 86:30]
      node _T_21 = bits(io.st_type, 1, 1) @[memory.scala 89:18]
      node _T_22 = bits(_T_21, 0, 0) @[memory.scala 89:22]
      when _T_22 : @[memory.scala 89:30]
        node _T_24 = add(io.dmem_addr, UInt<1>("h01")) @[memory.scala 90:17]
        node _T_25 = tail(_T_24, 1) @[memory.scala 90:17]
        infer mport _T_26 = dmem[_T_25], clock @[memory.scala 90:11]
        node _T_27 = bits(io.dmem_wdata, 15, 8) @[memory.scala 90:32]
        _T_26 <= _T_27 @[memory.scala 90:24]
        skip @[memory.scala 89:30]
      node _T_28 = bits(io.st_type, 2, 2) @[memory.scala 92:18]
      node _T_29 = bits(_T_28, 0, 0) @[memory.scala 92:22]
      when _T_29 : @[memory.scala 92:30]
        node _T_31 = add(io.dmem_addr, UInt<2>("h02")) @[memory.scala 93:17]
        node _T_32 = tail(_T_31, 1) @[memory.scala 93:17]
        infer mport _T_33 = dmem[_T_32], clock @[memory.scala 93:11]
        node _T_34 = bits(io.dmem_wdata, 23, 16) @[memory.scala 93:32]
        _T_33 <= _T_34 @[memory.scala 93:24]
        skip @[memory.scala 92:30]
      node _T_35 = bits(io.st_type, 3, 3) @[memory.scala 95:18]
      node _T_36 = bits(_T_35, 0, 0) @[memory.scala 95:22]
      when _T_36 : @[memory.scala 95:30]
        node _T_38 = add(io.dmem_addr, UInt<2>("h03")) @[memory.scala 96:17]
        node _T_39 = tail(_T_38, 1) @[memory.scala 96:17]
        infer mport _T_40 = dmem[_T_39], clock @[memory.scala 96:11]
        node _T_41 = bits(io.dmem_wdata, 31, 24) @[memory.scala 96:32]
        _T_40 <= _T_41 @[memory.scala 96:24]
        skip @[memory.scala 95:30]
      skip @[memory.scala 85:19]
    wire rdata : UInt<32> @[memory.scala 101:19]
    node _T_44 = add(io.dmem_addr, UInt<2>("h03")) @[memory.scala 102:26]
    node _T_45 = tail(_T_44, 1) @[memory.scala 102:26]
    infer mport _T_46 = dmem[_T_45], clock @[memory.scala 102:20]
    node _T_48 = add(io.dmem_addr, UInt<2>("h02")) @[memory.scala 102:44]
    node _T_49 = tail(_T_48, 1) @[memory.scala 102:44]
    infer mport _T_50 = dmem[_T_49], clock @[memory.scala 102:38]
    node _T_52 = add(io.dmem_addr, UInt<1>("h01")) @[memory.scala 102:62]
    node _T_53 = tail(_T_52, 1) @[memory.scala 102:62]
    infer mport _T_54 = dmem[_T_53], clock @[memory.scala 102:56]
    infer mport _T_55 = dmem[io.dmem_addr], clock @[memory.scala 102:74]
    node _T_56 = cat(_T_54, _T_55) @[Cat.scala 30:58]
    node _T_57 = cat(_T_46, _T_50) @[Cat.scala 30:58]
    node _T_58 = cat(_T_57, _T_56) @[Cat.scala 30:58]
    rdata <= _T_58 @[memory.scala 102:9]
    io.dmem_rdata <= rdata @[memory.scala 103:17]
    
  module DMem_Interface : 
    input clock : Clock
    input reset : UInt<1>
    output io : {wbs : {flip m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}
    
    inst dmem of DMem @[dmem_interface.scala 35:20]
    dmem.clock <= clock
    dmem.reset <= reset
    node _T_35 = bits(io.wbs.m2s.addr, 15, 12) @[dmem_interface.scala 37:41]
    node dmem_addr_match = eq(_T_35, UInt<4>("h01")) @[dmem_interface.scala 37:79]
    node dmem_select = and(io.wbs.m2s.stb, dmem_addr_match) @[dmem_interface.scala 39:41]
    node _T_44 = eq(io.wbs.m2s.we, UInt<1>("h00")) @[dmem_interface.scala 40:26]
    node rd_en = and(_T_44, dmem_select) @[dmem_interface.scala 40:41]
    node _T_45 = bits(io.wbs.m2s.addr, 10, 0) @[dmem_interface.scala 42:41]
    dmem.io.dmem_addr <= _T_45 @[dmem_interface.scala 42:23]
    dmem.io.dmem_wdata <= io.wbs.m2s.data @[dmem_interface.scala 43:23]
    node _T_46 = and(io.wbs.m2s.we, dmem_select) @[dmem_interface.scala 44:40]
    dmem.io.wr_en <= _T_46 @[dmem_interface.scala 44:23]
    dmem.io.st_type <= io.wbs.m2s.sel @[dmem_interface.scala 45:23]
    reg ack2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[dmem_interface.scala 48:28]
    node _T_50 = eq(ack2, UInt<1>("h01")) @[dmem_interface.scala 49:27]
    node dmem_res_en = xor(_T_50, io.wbs.m2s.stb) @[dmem_interface.scala 49:49]
    when dmem_res_en : @[dmem_interface.scala 51:21]
      node _T_51 = mux(io.wbs.m2s.stb, UInt<1>("h01"), UInt<1>("h00")) @[dmem_interface.scala 52:16]
      ack2 <= _T_51 @[dmem_interface.scala 52:10]
      skip @[dmem_interface.scala 51:21]
    reg ack : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[dmem_interface.scala 55:28]
    node _T_53 = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[dmem_interface.scala 56:36]
    ack <= _T_53 @[dmem_interface.scala 56:18]
    node _T_54 = or(ack, ack2) @[dmem_interface.scala 57:25]
    io.wbs.ack_o <= _T_54 @[dmem_interface.scala 57:18]
    reg rd_resp : UInt<1>, clock @[dmem_interface.scala 60:24]
    rd_resp <= rd_en @[dmem_interface.scala 61:18]
    node _T_57 = mux(rd_resp, dmem.io.dmem_rdata, UInt<1>("h00")) @[dmem_interface.scala 62:24]
    io.wbs.data_o <= _T_57 @[dmem_interface.scala 62:18]
    
  module IMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip imem_addr : UInt<32>, imem_rdata : UInt<32>, flip imem_wdata : UInt<32>, flip wr_en : UInt<1>, flip st_type : UInt<4>}
    
    smem imem : UInt<32>[2048] @[memory.scala 32:25]
    when io.wr_en : @[memory.scala 42:19]
      node _T_18 = div(io.imem_addr, UInt<3>("h04")) @[memory.scala 43:23]
      node _T_19 = bits(_T_18, 10, 0) @[memory.scala 43:9]
      infer mport _T_20 = imem[_T_19], clock @[memory.scala 43:9]
      _T_20 <= io.imem_wdata @[memory.scala 43:30]
      skip @[memory.scala 42:19]
    node _T_22 = div(io.imem_addr, UInt<3>("h04")) @[memory.scala 61:38]
    node _T_23 = bits(_T_22, 10, 0) @[memory.scala 61:24]
    infer mport _T_24 = imem[_T_23], clock @[memory.scala 61:24]
    io.imem_rdata <= _T_24 @[memory.scala 61:17]
    
  module BMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip bmem_addr : UInt<32>, bmem_rdata : UInt<32>}
    
    node _T_9 = bits(io.bmem_addr, 9, 0) @[bmem.scala 26:26]
    node addr = div(_T_9, UInt<3>("h04")) @[bmem.scala 26:33]
    reg bmem_data : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[bmem.scala 27:26]
    node _T_14 = eq(UInt<1>("h00"), addr) @[Conditional.scala 37:30]
    when _T_14 : @[Conditional.scala 40:58]
      bmem_data <= UInt<5>("h013") @[bmem.scala 30:24]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_17 = eq(UInt<1>("h01"), addr) @[Conditional.scala 37:30]
      when _T_17 : @[Conditional.scala 39:67]
        bmem_data <= UInt<23>("h040006f") @[bmem.scala 31:24]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_20 = eq(UInt<2>("h02"), addr) @[Conditional.scala 37:30]
        when _T_20 : @[Conditional.scala 39:67]
          bmem_data <= UInt<32>("h0ffffa117") @[bmem.scala 32:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_23 = eq(UInt<2>("h03"), addr) @[Conditional.scala 37:30]
          when _T_23 : @[Conditional.scala 39:67]
            bmem_data <= UInt<28>("h0f810113") @[bmem.scala 33:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_26 = eq(UInt<3>("h04"), addr) @[Conditional.scala 37:30]
            when _T_26 : @[Conditional.scala 39:67]
              bmem_data <= UInt<11>("h0513") @[bmem.scala 34:24]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_29 = eq(UInt<3>("h05"), addr) @[Conditional.scala 37:30]
              when _T_29 : @[Conditional.scala 39:67]
                bmem_data <= UInt<11>("h0593") @[bmem.scala 35:24]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_32 = eq(UInt<3>("h06"), addr) @[Conditional.scala 37:30]
                when _T_32 : @[Conditional.scala 39:67]
                  bmem_data <= UInt<29>("h0114000ef") @[bmem.scala 36:24]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_35 = eq(UInt<3>("h07"), addr) @[Conditional.scala 37:30]
                  when _T_35 : @[Conditional.scala 39:67]
                    bmem_data <= UInt<32>("h0fe010113") @[bmem.scala 37:24]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_38 = eq(UInt<4>("h08"), addr) @[Conditional.scala 37:30]
                    when _T_38 : @[Conditional.scala 39:67]
                      bmem_data <= UInt<24>("h0812e23") @[bmem.scala 38:24]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_41 = eq(UInt<4>("h09"), addr) @[Conditional.scala 37:30]
                      when _T_41 : @[Conditional.scala 39:67]
                        bmem_data <= UInt<26>("h02010413") @[bmem.scala 39:24]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_44 = eq(UInt<4>("h0a"), addr) @[Conditional.scala 37:30]
                        when _T_44 : @[Conditional.scala 39:67]
                          bmem_data <= UInt<19>("h050793") @[bmem.scala 40:25]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_47 = eq(UInt<4>("h0b"), addr) @[Conditional.scala 37:30]
                          when _T_47 : @[Conditional.scala 39:67]
                            bmem_data <= UInt<32>("h0fef407a3") @[bmem.scala 41:25]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_50 = eq(UInt<4>("h0c"), addr) @[Conditional.scala 37:30]
                            when _T_50 : @[Conditional.scala 39:67]
                              bmem_data <= UInt<14>("h037b7") @[bmem.scala 42:25]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_53 = eq(UInt<4>("h0d"), addr) @[Conditional.scala 37:30]
                              when _T_53 : @[Conditional.scala 39:67]
                                bmem_data <= UInt<22>("h027c783") @[bmem.scala 43:25]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_56 = eq(UInt<4>("h0e"), addr) @[Conditional.scala 37:30]
                                when _T_56 : @[Conditional.scala 39:67]
                                  bmem_data <= UInt<28>("h0ff7f693") @[bmem.scala 44:25]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_59 = eq(UInt<4>("h0f"), addr) @[Conditional.scala 37:30]
                                  when _T_59 : @[Conditional.scala 39:67]
                                    bmem_data <= UInt<14>("h037b7") @[bmem.scala 45:25]
                                    skip @[Conditional.scala 39:67]
                                  else : @[Conditional.scala 39:67]
                                    node _T_62 = eq(UInt<5>("h010"), addr) @[Conditional.scala 37:30]
                                    when _T_62 : @[Conditional.scala 39:67]
                                      bmem_data <= UInt<32>("h0fef44703") @[bmem.scala 46:25]
                                      skip @[Conditional.scala 39:67]
                                    else : @[Conditional.scala 39:67]
                                      node _T_65 = eq(UInt<5>("h011"), addr) @[Conditional.scala 37:30]
                                      when _T_65 : @[Conditional.scala 39:67]
                                        bmem_data <= UInt<24>("h0e6e733") @[bmem.scala 47:25]
                                        skip @[Conditional.scala 39:67]
                                      else : @[Conditional.scala 39:67]
                                        node _T_68 = eq(UInt<5>("h012"), addr) @[Conditional.scala 37:30]
                                        when _T_68 : @[Conditional.scala 39:67]
                                          bmem_data <= UInt<28>("h0ff77713") @[bmem.scala 48:25]
                                          skip @[Conditional.scala 39:67]
                                        else : @[Conditional.scala 39:67]
                                          node _T_71 = eq(UInt<5>("h013"), addr) @[Conditional.scala 37:30]
                                          when _T_71 : @[Conditional.scala 39:67]
                                            bmem_data <= UInt<24>("h0e78123") @[bmem.scala 49:25]
                                            skip @[Conditional.scala 39:67]
                                          else : @[Conditional.scala 39:67]
                                            node _T_74 = eq(UInt<5>("h014"), addr) @[Conditional.scala 37:30]
                                            when _T_74 : @[Conditional.scala 39:67]
                                              bmem_data <= UInt<5>("h013") @[bmem.scala 50:25]
                                              skip @[Conditional.scala 39:67]
                                            else : @[Conditional.scala 39:67]
                                              node _T_77 = eq(UInt<5>("h015"), addr) @[Conditional.scala 37:30]
                                              when _T_77 : @[Conditional.scala 39:67]
                                                bmem_data <= UInt<25>("h01c12403") @[bmem.scala 51:25]
                                                skip @[Conditional.scala 39:67]
                                              else : @[Conditional.scala 39:67]
                                                node _T_80 = eq(UInt<5>("h016"), addr) @[Conditional.scala 37:30]
                                                when _T_80 : @[Conditional.scala 39:67]
                                                  bmem_data <= UInt<26>("h02010113") @[bmem.scala 52:25]
                                                  skip @[Conditional.scala 39:67]
                                                else : @[Conditional.scala 39:67]
                                                  node _T_83 = eq(UInt<5>("h017"), addr) @[Conditional.scala 37:30]
                                                  when _T_83 : @[Conditional.scala 39:67]
                                                    bmem_data <= UInt<16>("h08067") @[bmem.scala 53:25]
                                                    skip @[Conditional.scala 39:67]
                                                  else : @[Conditional.scala 39:67]
                                                    node _T_86 = eq(UInt<5>("h018"), addr) @[Conditional.scala 37:30]
                                                    when _T_86 : @[Conditional.scala 39:67]
                                                      bmem_data <= UInt<32>("h0fe010113") @[bmem.scala 54:25]
                                                      skip @[Conditional.scala 39:67]
                                                    else : @[Conditional.scala 39:67]
                                                      node _T_89 = eq(UInt<5>("h019"), addr) @[Conditional.scala 37:30]
                                                      when _T_89 : @[Conditional.scala 39:67]
                                                        bmem_data <= UInt<24>("h0812e23") @[bmem.scala 55:25]
                                                        skip @[Conditional.scala 39:67]
                                                      else : @[Conditional.scala 39:67]
                                                        node _T_92 = eq(UInt<5>("h01a"), addr) @[Conditional.scala 37:30]
                                                        when _T_92 : @[Conditional.scala 39:67]
                                                          bmem_data <= UInt<26>("h02010413") @[bmem.scala 56:25]
                                                          skip @[Conditional.scala 39:67]
                                                        else : @[Conditional.scala 39:67]
                                                          node _T_95 = eq(UInt<5>("h01b"), addr) @[Conditional.scala 37:30]
                                                          when _T_95 : @[Conditional.scala 39:67]
                                                            bmem_data <= UInt<19>("h050793") @[bmem.scala 57:25]
                                                            skip @[Conditional.scala 39:67]
                                                          else : @[Conditional.scala 39:67]
                                                            node _T_98 = eq(UInt<5>("h01c"), addr) @[Conditional.scala 37:30]
                                                            when _T_98 : @[Conditional.scala 39:67]
                                                              bmem_data <= UInt<32>("h0fef407a3") @[bmem.scala 58:25]
                                                              skip @[Conditional.scala 39:67]
                                                            else : @[Conditional.scala 39:67]
                                                              node _T_101 = eq(UInt<5>("h01d"), addr) @[Conditional.scala 37:30]
                                                              when _T_101 : @[Conditional.scala 39:67]
                                                                bmem_data <= UInt<14>("h037b7") @[bmem.scala 59:25]
                                                                skip @[Conditional.scala 39:67]
                                                              else : @[Conditional.scala 39:67]
                                                                node _T_104 = eq(UInt<5>("h01e"), addr) @[Conditional.scala 37:30]
                                                                when _T_104 : @[Conditional.scala 39:67]
                                                                  bmem_data <= UInt<32>("h0fef44703") @[bmem.scala 60:25]
                                                                  skip @[Conditional.scala 39:67]
                                                                else : @[Conditional.scala 39:67]
                                                                  node _T_107 = eq(UInt<5>("h01f"), addr) @[Conditional.scala 37:30]
                                                                  when _T_107 : @[Conditional.scala 39:67]
                                                                    bmem_data <= UInt<24>("h0e780a3") @[bmem.scala 61:25]
                                                                    skip @[Conditional.scala 39:67]
                                                                  else : @[Conditional.scala 39:67]
                                                                    node _T_110 = eq(UInt<6>("h020"), addr) @[Conditional.scala 37:30]
                                                                    when _T_110 : @[Conditional.scala 39:67]
                                                                      bmem_data <= UInt<5>("h013") @[bmem.scala 62:25]
                                                                      skip @[Conditional.scala 39:67]
                                                                    else : @[Conditional.scala 39:67]
                                                                      node _T_113 = eq(UInt<6>("h021"), addr) @[Conditional.scala 37:30]
                                                                      when _T_113 : @[Conditional.scala 39:67]
                                                                        bmem_data <= UInt<14>("h037b7") @[bmem.scala 63:25]
                                                                        skip @[Conditional.scala 39:67]
                                                                      else : @[Conditional.scala 39:67]
                                                                        node _T_116 = eq(UInt<6>("h022"), addr) @[Conditional.scala 37:30]
                                                                        when _T_116 : @[Conditional.scala 39:67]
                                                                          bmem_data <= UInt<23>("h047c783") @[bmem.scala 64:25]
                                                                          skip @[Conditional.scala 39:67]
                                                                        else : @[Conditional.scala 39:67]
                                                                          node _T_119 = eq(UInt<6>("h023"), addr) @[Conditional.scala 37:30]
                                                                          when _T_119 : @[Conditional.scala 39:67]
                                                                            bmem_data <= UInt<28>("h0ff7f793") @[bmem.scala 65:25]
                                                                            skip @[Conditional.scala 39:67]
                                                                          else : @[Conditional.scala 39:67]
                                                                            node _T_122 = eq(UInt<6>("h024"), addr) @[Conditional.scala 37:30]
                                                                            when _T_122 : @[Conditional.scala 39:67]
                                                                              bmem_data <= UInt<25>("h0107f793") @[bmem.scala 66:25]
                                                                              skip @[Conditional.scala 39:67]
                                                                            else : @[Conditional.scala 39:67]
                                                                              node _T_125 = eq(UInt<6>("h025"), addr) @[Conditional.scala 37:30]
                                                                              when _T_125 : @[Conditional.scala 39:67]
                                                                                bmem_data <= UInt<32>("h0fe0788e3") @[bmem.scala 67:25]
                                                                                skip @[Conditional.scala 39:67]
                                                                              else : @[Conditional.scala 39:67]
                                                                                node _T_128 = eq(UInt<6>("h026"), addr) @[Conditional.scala 37:30]
                                                                                when _T_128 : @[Conditional.scala 39:67]
                                                                                  bmem_data <= UInt<14>("h037b7") @[bmem.scala 68:25]
                                                                                  skip @[Conditional.scala 39:67]
                                                                                else : @[Conditional.scala 39:67]
                                                                                  node _T_131 = eq(UInt<6>("h027"), addr) @[Conditional.scala 37:30]
                                                                                  when _T_131 : @[Conditional.scala 39:67]
                                                                                    bmem_data <= UInt<19>("h07c783") @[bmem.scala 69:25]
                                                                                    skip @[Conditional.scala 39:67]
                                                                                  else : @[Conditional.scala 39:67]
                                                                                    node _T_134 = eq(UInt<6>("h028"), addr) @[Conditional.scala 37:30]
                                                                                    when _T_134 : @[Conditional.scala 39:67]
                                                                                      bmem_data <= UInt<28>("h0ff7f793") @[bmem.scala 70:25]
                                                                                      skip @[Conditional.scala 39:67]
                                                                                    else : @[Conditional.scala 39:67]
                                                                                      node _T_137 = eq(UInt<6>("h029"), addr) @[Conditional.scala 37:30]
                                                                                      when _T_137 : @[Conditional.scala 39:67]
                                                                                        bmem_data <= UInt<19>("h078513") @[bmem.scala 71:25]
                                                                                        skip @[Conditional.scala 39:67]
                                                                                      else : @[Conditional.scala 39:67]
                                                                                        node _T_140 = eq(UInt<6>("h02a"), addr) @[Conditional.scala 37:30]
                                                                                        when _T_140 : @[Conditional.scala 39:67]
                                                                                          bmem_data <= UInt<25>("h01c12403") @[bmem.scala 72:25]
                                                                                          skip @[Conditional.scala 39:67]
                                                                                        else : @[Conditional.scala 39:67]
                                                                                          node _T_143 = eq(UInt<6>("h02b"), addr) @[Conditional.scala 37:30]
                                                                                          when _T_143 : @[Conditional.scala 39:67]
                                                                                            bmem_data <= UInt<26>("h02010113") @[bmem.scala 73:25]
                                                                                            skip @[Conditional.scala 39:67]
                                                                                          else : @[Conditional.scala 39:67]
                                                                                            node _T_146 = eq(UInt<6>("h02c"), addr) @[Conditional.scala 37:30]
                                                                                            when _T_146 : @[Conditional.scala 39:67]
                                                                                              bmem_data <= UInt<16>("h08067") @[bmem.scala 74:25]
                                                                                              skip @[Conditional.scala 39:67]
                                                                                            else : @[Conditional.scala 39:67]
                                                                                              node _T_149 = eq(UInt<6>("h02d"), addr) @[Conditional.scala 37:30]
                                                                                              when _T_149 : @[Conditional.scala 39:67]
                                                                                                bmem_data <= UInt<32>("h0fe010113") @[bmem.scala 75:25]
                                                                                                skip @[Conditional.scala 39:67]
                                                                                              else : @[Conditional.scala 39:67]
                                                                                                node _T_152 = eq(UInt<6>("h02e"), addr) @[Conditional.scala 37:30]
                                                                                                when _T_152 : @[Conditional.scala 39:67]
                                                                                                  bmem_data <= UInt<24>("h0812e23") @[bmem.scala 76:25]
                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                else : @[Conditional.scala 39:67]
                                                                                                  node _T_155 = eq(UInt<6>("h02f"), addr) @[Conditional.scala 37:30]
                                                                                                  when _T_155 : @[Conditional.scala 39:67]
                                                                                                    bmem_data <= UInt<26>("h02010413") @[bmem.scala 77:25]
                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                    node _T_158 = eq(UInt<6>("h030"), addr) @[Conditional.scala 37:30]
                                                                                                    when _T_158 : @[Conditional.scala 39:67]
                                                                                                      bmem_data <= UInt<19>("h050793") @[bmem.scala 78:25]
                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                      node _T_161 = eq(UInt<6>("h031"), addr) @[Conditional.scala 37:30]
                                                                                                      when _T_161 : @[Conditional.scala 39:67]
                                                                                                        bmem_data <= UInt<32>("h0fef407a3") @[bmem.scala 79:25]
                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                        node _T_164 = eq(UInt<6>("h032"), addr) @[Conditional.scala 37:30]
                                                                                                        when _T_164 : @[Conditional.scala 39:67]
                                                                                                          bmem_data <= UInt<14>("h027b7") @[bmem.scala 80:25]
                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                          node _T_167 = eq(UInt<6>("h033"), addr) @[Conditional.scala 37:30]
                                                                                                          when _T_167 : @[Conditional.scala 39:67]
                                                                                                            bmem_data <= UInt<32>("h0fef44703") @[bmem.scala 81:25]
                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                            node _T_170 = eq(UInt<6>("h034"), addr) @[Conditional.scala 37:30]
                                                                                                            when _T_170 : @[Conditional.scala 39:67]
                                                                                                              bmem_data <= UInt<24>("h0e78123") @[bmem.scala 82:25]
                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                              node _T_173 = eq(UInt<6>("h035"), addr) @[Conditional.scala 37:30]
                                                                                                              when _T_173 : @[Conditional.scala 39:67]
                                                                                                                bmem_data <= UInt<5>("h013") @[bmem.scala 83:25]
                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                node _T_176 = eq(UInt<6>("h036"), addr) @[Conditional.scala 37:30]
                                                                                                                when _T_176 : @[Conditional.scala 39:67]
                                                                                                                  bmem_data <= UInt<25>("h01c12403") @[bmem.scala 84:25]
                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                  node _T_179 = eq(UInt<6>("h037"), addr) @[Conditional.scala 37:30]
                                                                                                                  when _T_179 : @[Conditional.scala 39:67]
                                                                                                                    bmem_data <= UInt<26>("h02010113") @[bmem.scala 85:25]
                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                    node _T_182 = eq(UInt<6>("h038"), addr) @[Conditional.scala 37:30]
                                                                                                                    when _T_182 : @[Conditional.scala 39:67]
                                                                                                                      bmem_data <= UInt<16>("h08067") @[bmem.scala 86:25]
                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                      node _T_185 = eq(UInt<6>("h039"), addr) @[Conditional.scala 37:30]
                                                                                                                      when _T_185 : @[Conditional.scala 39:67]
                                                                                                                        bmem_data <= UInt<32>("h0fe010113") @[bmem.scala 87:25]
                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                        node _T_188 = eq(UInt<6>("h03a"), addr) @[Conditional.scala 37:30]
                                                                                                                        when _T_188 : @[Conditional.scala 39:67]
                                                                                                                          bmem_data <= UInt<24>("h0812e23") @[bmem.scala 88:25]
                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                          node _T_191 = eq(UInt<6>("h03b"), addr) @[Conditional.scala 37:30]
                                                                                                                          when _T_191 : @[Conditional.scala 39:67]
                                                                                                                            bmem_data <= UInt<26>("h02010413") @[bmem.scala 89:25]
                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                            node _T_194 = eq(UInt<6>("h03c"), addr) @[Conditional.scala 37:30]
                                                                                                                            when _T_194 : @[Conditional.scala 39:67]
                                                                                                                              bmem_data <= UInt<19>("h050793") @[bmem.scala 90:25]
                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                              node _T_197 = eq(UInt<6>("h03d"), addr) @[Conditional.scala 37:30]
                                                                                                                              when _T_197 : @[Conditional.scala 39:67]
                                                                                                                                bmem_data <= UInt<32>("h0fef407a3") @[bmem.scala 91:25]
                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                node _T_200 = eq(UInt<6>("h03e"), addr) @[Conditional.scala 37:30]
                                                                                                                                when _T_200 : @[Conditional.scala 39:67]
                                                                                                                                  bmem_data <= UInt<5>("h013") @[bmem.scala 92:25]
                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                  node _T_203 = eq(UInt<6>("h03f"), addr) @[Conditional.scala 37:30]
                                                                                                                                  when _T_203 : @[Conditional.scala 39:67]
                                                                                                                                    bmem_data <= UInt<14>("h027b7") @[bmem.scala 93:25]
                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                    node _T_206 = eq(UInt<7>("h040"), addr) @[Conditional.scala 37:30]
                                                                                                                                    when _T_206 : @[Conditional.scala 39:67]
                                                                                                                                      bmem_data <= UInt<23>("h047c783") @[bmem.scala 94:25]
                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                      node _T_209 = eq(UInt<7>("h041"), addr) @[Conditional.scala 37:30]
                                                                                                                                      when _T_209 : @[Conditional.scala 39:67]
                                                                                                                                        bmem_data <= UInt<28>("h0ff7f793") @[bmem.scala 95:25]
                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                        node _T_212 = eq(UInt<7>("h042"), addr) @[Conditional.scala 37:30]
                                                                                                                                        when _T_212 : @[Conditional.scala 39:67]
                                                                                                                                          bmem_data <= UInt<22>("h027f793") @[bmem.scala 96:25]
                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                          node _T_215 = eq(UInt<7>("h043"), addr) @[Conditional.scala 37:30]
                                                                                                                                          when _T_215 : @[Conditional.scala 39:67]
                                                                                                                                            bmem_data <= UInt<32>("h0fe0788e3") @[bmem.scala 97:25]
                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                            node _T_218 = eq(UInt<7>("h044"), addr) @[Conditional.scala 37:30]
                                                                                                                                            when _T_218 : @[Conditional.scala 39:67]
                                                                                                                                              bmem_data <= UInt<14>("h027b7") @[bmem.scala 98:25]
                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                              node _T_221 = eq(UInt<7>("h045"), addr) @[Conditional.scala 37:30]
                                                                                                                                              when _T_221 : @[Conditional.scala 39:67]
                                                                                                                                                bmem_data <= UInt<32>("h0fef44703") @[bmem.scala 99:25]
                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                node _T_224 = eq(UInt<7>("h046"), addr) @[Conditional.scala 37:30]
                                                                                                                                                when _T_224 : @[Conditional.scala 39:67]
                                                                                                                                                  bmem_data <= UInt<24>("h0e780a3") @[bmem.scala 100:25]
                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                  node _T_227 = eq(UInt<7>("h047"), addr) @[Conditional.scala 37:30]
                                                                                                                                                  when _T_227 : @[Conditional.scala 39:67]
                                                                                                                                                    bmem_data <= UInt<5>("h013") @[bmem.scala 101:25]
                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                    node _T_230 = eq(UInt<7>("h048"), addr) @[Conditional.scala 37:30]
                                                                                                                                                    when _T_230 : @[Conditional.scala 39:67]
                                                                                                                                                      bmem_data <= UInt<25>("h01c12403") @[bmem.scala 102:25]
                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                      node _T_233 = eq(UInt<7>("h049"), addr) @[Conditional.scala 37:30]
                                                                                                                                                      when _T_233 : @[Conditional.scala 39:67]
                                                                                                                                                        bmem_data <= UInt<26>("h02010113") @[bmem.scala 103:25]
                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                        node _T_236 = eq(UInt<7>("h04a"), addr) @[Conditional.scala 37:30]
                                                                                                                                                        when _T_236 : @[Conditional.scala 39:67]
                                                                                                                                                          bmem_data <= UInt<16>("h08067") @[bmem.scala 104:25]
                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                          node _T_239 = eq(UInt<7>("h04b"), addr) @[Conditional.scala 37:30]
                                                                                                                                                          when _T_239 : @[Conditional.scala 39:67]
                                                                                                                                                            bmem_data <= UInt<32>("h0ff010113") @[bmem.scala 105:25]
                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                            node _T_242 = eq(UInt<7>("h04c"), addr) @[Conditional.scala 37:30]
                                                                                                                                                            when _T_242 : @[Conditional.scala 39:67]
                                                                                                                                                              bmem_data <= UInt<21>("h0112623") @[bmem.scala 106:25]
                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                              node _T_245 = eq(UInt<7>("h04d"), addr) @[Conditional.scala 37:30]
                                                                                                                                                              when _T_245 : @[Conditional.scala 39:67]
                                                                                                                                                                bmem_data <= UInt<24>("h0812423") @[bmem.scala 107:25]
                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                node _T_248 = eq(UInt<7>("h04e"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                when _T_248 : @[Conditional.scala 39:67]
                                                                                                                                                                  bmem_data <= UInt<25>("h01010413") @[bmem.scala 108:25]
                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                  node _T_251 = eq(UInt<7>("h04f"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                  when _T_251 : @[Conditional.scala 39:67]
                                                                                                                                                                    bmem_data <= UInt<25>("h01000513") @[bmem.scala 109:25]
                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                    node _T_254 = eq(UInt<7>("h050"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                    when _T_254 : @[Conditional.scala 39:67]
                                                                                                                                                                      bmem_data <= UInt<32>("h0f75ff0ef") @[bmem.scala 110:25]
                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                      node _T_257 = eq(UInt<7>("h051"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                      when _T_257 : @[Conditional.scala 39:67]
                                                                                                                                                                        bmem_data <= UInt<24>("h0800513") @[bmem.scala 111:25]
                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                        node _T_260 = eq(UInt<7>("h052"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                        when _T_260 : @[Conditional.scala 39:67]
                                                                                                                                                                          bmem_data <= UInt<32>("h0ed5ff0ef") @[bmem.scala 112:25]
                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                          node _T_263 = eq(UInt<7>("h053"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                          when _T_263 : @[Conditional.scala 39:67]
                                                                                                                                                                            bmem_data <= UInt<27>("h054000ef") @[bmem.scala 113:25]
                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                            node _T_266 = eq(UInt<7>("h054"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                            when _T_266 : @[Conditional.scala 39:67]
                                                                                                                                                                              bmem_data <= UInt<27>("h04f00513") @[bmem.scala 114:25]
                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                              node _T_269 = eq(UInt<7>("h055"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                              when _T_269 : @[Conditional.scala 39:67]
                                                                                                                                                                                bmem_data <= UInt<32>("h0f91ff0ef") @[bmem.scala 115:25]
                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                node _T_272 = eq(UInt<7>("h056"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                when _T_272 : @[Conditional.scala 39:67]
                                                                                                                                                                                  bmem_data <= UInt<27>("h06b00513") @[bmem.scala 116:25]
                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                  node _T_275 = eq(UInt<7>("h057"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                  when _T_275 : @[Conditional.scala 39:67]
                                                                                                                                                                                    bmem_data <= UInt<32>("h0f89ff0ef") @[bmem.scala 117:25]
                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                    node _T_278 = eq(UInt<7>("h058"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                    when _T_278 : @[Conditional.scala 39:67]
                                                                                                                                                                                      bmem_data <= UInt<25>("h01c000ef") @[bmem.scala 118:25]
                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                      node _T_281 = eq(UInt<7>("h059"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                      when _T_281 : @[Conditional.scala 39:67]
                                                                                                                                                                                        bmem_data <= UInt<11>("h0793") @[bmem.scala 119:25]
                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                        node _T_284 = eq(UInt<7>("h05a"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                        when _T_284 : @[Conditional.scala 39:67]
                                                                                                                                                                                          bmem_data <= UInt<19>("h078513") @[bmem.scala 120:25]
                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                          node _T_287 = eq(UInt<7>("h05b"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                          when _T_287 : @[Conditional.scala 39:67]
                                                                                                                                                                                            bmem_data <= UInt<24>("h0c12083") @[bmem.scala 121:25]
                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                            node _T_290 = eq(UInt<7>("h05c"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                            when _T_290 : @[Conditional.scala 39:67]
                                                                                                                                                                                              bmem_data <= UInt<24>("h0812403") @[bmem.scala 122:25]
                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                              node _T_293 = eq(UInt<7>("h05d"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                              when _T_293 : @[Conditional.scala 39:67]
                                                                                                                                                                                                bmem_data <= UInt<25>("h01010113") @[bmem.scala 123:25]
                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                node _T_296 = eq(UInt<7>("h05e"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                when _T_296 : @[Conditional.scala 39:67]
                                                                                                                                                                                                  bmem_data <= UInt<16>("h08067") @[bmem.scala 124:25]
                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                  node _T_299 = eq(UInt<7>("h05f"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                  when _T_299 : @[Conditional.scala 39:67]
                                                                                                                                                                                                    bmem_data <= UInt<32>("h0ff010113") @[bmem.scala 125:25]
                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                    node _T_302 = eq(UInt<7>("h060"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                    when _T_302 : @[Conditional.scala 39:67]
                                                                                                                                                                                                      bmem_data <= UInt<24>("h0812623") @[bmem.scala 126:25]
                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                      node _T_305 = eq(UInt<7>("h061"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                      when _T_305 : @[Conditional.scala 39:67]
                                                                                                                                                                                                        bmem_data <= UInt<25>("h01010413") @[bmem.scala 127:25]
                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                        node _T_308 = eq(UInt<7>("h062"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                        when _T_308 : @[Conditional.scala 39:67]
                                                                                                                                                                                                          bmem_data <= UInt<10>("h02b7") @[bmem.scala 128:25]
                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                          node _T_311 = eq(UInt<7>("h063"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                          when _T_311 : @[Conditional.scala 39:67]
                                                                                                                                                                                                            bmem_data <= UInt<18>("h028067") @[bmem.scala 129:25]
                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                            node _T_314 = eq(UInt<7>("h064"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                            when _T_314 : @[Conditional.scala 39:67]
                                                                                                                                                                                                              bmem_data <= UInt<5>("h013") @[bmem.scala 130:26]
                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                              node _T_317 = eq(UInt<7>("h065"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                              when _T_317 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                bmem_data <= UInt<24>("h0c12403") @[bmem.scala 131:26]
                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                node _T_320 = eq(UInt<7>("h066"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                when _T_320 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                  bmem_data <= UInt<25>("h01010113") @[bmem.scala 132:26]
                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                  node _T_323 = eq(UInt<7>("h067"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                  when _T_323 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                    bmem_data <= UInt<16>("h08067") @[bmem.scala 133:26]
                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                    node _T_326 = eq(UInt<7>("h068"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                    when _T_326 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0fd010113") @[bmem.scala 134:26]
                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                      node _T_329 = eq(UInt<7>("h069"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                      when _T_329 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                        bmem_data <= UInt<26>("h02112623") @[bmem.scala 135:26]
                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                        node _T_332 = eq(UInt<7>("h06a"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                        when _T_332 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                          bmem_data <= UInt<26>("h02812423") @[bmem.scala 136:26]
                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                          node _T_335 = eq(UInt<7>("h06b"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                          when _T_335 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                            bmem_data <= UInt<26>("h03010413") @[bmem.scala 137:26]
                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                            node _T_338 = eq(UInt<7>("h06c"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                            when _T_338 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                              bmem_data <= UInt<32>("h0fe042623") @[bmem.scala 138:26]
                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                              node _T_341 = eq(UInt<7>("h06d"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                              when _T_341 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                bmem_data <= UInt<32>("h0fe042223") @[bmem.scala 139:26]
                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                node _T_344 = eq(UInt<7>("h06e"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                when _T_344 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                  bmem_data <= UInt<32>("h0fe042023") @[bmem.scala 140:26]
                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                  node _T_347 = eq(UInt<7>("h06f"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                  when _T_347 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0fe042423") @[bmem.scala 141:26]
                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                    node _T_350 = eq(UInt<7>("h070"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                    when _T_350 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0fec42503") @[bmem.scala 142:26]
                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                      node _T_353 = eq(UInt<7>("h071"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                      when _T_353 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                        bmem_data <= UInt<28>("h088000ef") @[bmem.scala 143:26]
                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                        node _T_356 = eq(UInt<7>("h072"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                        when _T_356 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0fca42e23") @[bmem.scala 144:26]
                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                          node _T_359 = eq(UInt<7>("h073"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                          when _T_359 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                            bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 145:26]
                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                            node _T_362 = eq(UInt<7>("h074"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                            when _T_362 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                              bmem_data <= UInt<23>("h0478793") @[bmem.scala 146:26]
                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                              node _T_365 = eq(UInt<7>("h075"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                              when _T_365 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                bmem_data <= UInt<19>("h078513") @[bmem.scala 147:26]
                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                node _T_368 = eq(UInt<7>("h076"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                when _T_368 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                  bmem_data <= UInt<27>("h074000ef") @[bmem.scala 148:26]
                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                  node _T_371 = eq(UInt<7>("h077"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                  when _T_371 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0fca42c23") @[bmem.scala 149:26]
                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                    node _T_374 = eq(UInt<7>("h078"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                    when _T_374 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 150:26]
                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                      node _T_377 = eq(UInt<7>("h079"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                      when _T_377 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                        bmem_data <= UInt<24>("h0878793") @[bmem.scala 151:26]
                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                        node _T_380 = eq(UInt<7>("h07a"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                        when _T_380 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0fef42623") @[bmem.scala 152:26]
                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                          node _T_383 = eq(UInt<7>("h07b"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                          when _T_383 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                            bmem_data <= UInt<26>("h03c0006f") @[bmem.scala 153:26]
                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                            node _T_386 = eq(UInt<7>("h07c"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                            when _T_386 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("h0fec42503") @[bmem.scala 154:26]
                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                              node _T_389 = eq(UInt<7>("h07d"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                              when _T_389 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                bmem_data <= UInt<27>("h058000ef") @[bmem.scala 155:26]
                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                node _T_392 = eq(UInt<7>("h07e"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                when _T_392 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                  bmem_data <= UInt<32>("h0fea42023") @[bmem.scala 156:26]
                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                  node _T_395 = eq(UInt<7>("h07f"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                  when _T_395 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0fe842783") @[bmem.scala 157:26]
                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                    node _T_398 = eq(UInt<8>("h080"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                    when _T_398 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                      bmem_data <= UInt<21>("h0178713") @[bmem.scala 158:26]
                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                      node _T_401 = eq(UInt<8>("h081"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                      when _T_401 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("h0fee42423") @[bmem.scala 159:26]
                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                        node _T_404 = eq(UInt<8>("h082"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                        when _T_404 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                          bmem_data <= UInt<22>("h0279793") @[bmem.scala 160:26]
                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                          node _T_407 = eq(UInt<8>("h083"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                          when _T_407 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("h0fe442703") @[bmem.scala 161:26]
                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                            node _T_410 = eq(UInt<8>("h084"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                            when _T_410 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                              bmem_data <= UInt<24>("h0f707b3") @[bmem.scala 162:26]
                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                              node _T_413 = eq(UInt<8>("h085"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                              when _T_413 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("h0fe042703") @[bmem.scala 163:26]
                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                node _T_416 = eq(UInt<8>("h086"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                when _T_416 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                  bmem_data <= UInt<24>("h0e7a023") @[bmem.scala 164:26]
                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                  node _T_419 = eq(UInt<8>("h087"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                  when _T_419 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 165:26]
                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                    node _T_422 = eq(UInt<8>("h088"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                    when _T_422 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                      bmem_data <= UInt<23>("h0478793") @[bmem.scala 166:26]
                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                      node _T_425 = eq(UInt<8>("h089"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                      when _T_425 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("h0fef42623") @[bmem.scala 167:26]
                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                        node _T_428 = eq(UInt<8>("h08a"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                        when _T_428 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0fd842783") @[bmem.scala 168:26]
                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                          node _T_431 = eq(UInt<8>("h08b"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                          when _T_431 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                            bmem_data <= UInt<22>("h027d793") @[bmem.scala 169:26]
                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                            node _T_434 = eq(UInt<8>("h08c"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                            when _T_434 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("h0fe842703") @[bmem.scala 170:26]
                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                              node _T_437 = eq(UInt<8>("h08d"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                              when _T_437 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("h0faf76ee3") @[bmem.scala 171:26]
                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                node _T_440 = eq(UInt<8>("h08e"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                when _T_440 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<5>("h013") @[bmem.scala 172:26]
                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                  node _T_443 = eq(UInt<8>("h08f"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                  when _T_443 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<26>("h02c12083") @[bmem.scala 173:26]
                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                    node _T_446 = eq(UInt<8>("h090"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                    when _T_446 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<26>("h02812403") @[bmem.scala 174:26]
                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                      node _T_449 = eq(UInt<8>("h091"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                      when _T_449 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<26>("h03010113") @[bmem.scala 175:26]
                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                        node _T_452 = eq(UInt<8>("h092"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                        when _T_452 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<16>("h08067") @[bmem.scala 176:26]
                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                          node _T_455 = eq(UInt<8>("h093"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                          when _T_455 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("h0fd010113") @[bmem.scala 177:26]
                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                            node _T_458 = eq(UInt<8>("h094"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                            when _T_458 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<26>("h02112623") @[bmem.scala 178:26]
                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                              node _T_461 = eq(UInt<8>("h095"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                              when _T_461 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<26>("h02812423") @[bmem.scala 179:26]
                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                node _T_464 = eq(UInt<8>("h096"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                when _T_464 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<26>("h03010413") @[bmem.scala 180:26]
                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                  node _T_467 = eq(UInt<8>("h097"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                  when _T_467 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0fca42e23") @[bmem.scala 181:26]
                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                    node _T_470 = eq(UInt<8>("h098"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                    when _T_470 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<14>("h037b7") @[bmem.scala 182:26]
                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                      node _T_473 = eq(UInt<8>("h099"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                      when _T_473 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<23>("h057c783") @[bmem.scala 183:26]
                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                        node _T_476 = eq(UInt<8>("h09a"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                        when _T_476 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<28>("h0ff7f713") @[bmem.scala 184:26]
                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                          node _T_479 = eq(UInt<8>("h09b"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                          when _T_479 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<14>("h037b7") @[bmem.scala 185:26]
                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                            node _T_482 = eq(UInt<8>("h09c"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                            when _T_482 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<21>("h0176713") @[bmem.scala 186:26]
                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                              node _T_485 = eq(UInt<8>("h09d"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                              when _T_485 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<28>("h0ff77713") @[bmem.scala 187:26]
                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                node _T_488 = eq(UInt<8>("h09e"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                when _T_488 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<24>("h0e782a3") @[bmem.scala 188:26]
                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                  node _T_491 = eq(UInt<8>("h09f"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                  when _T_491 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<22>("h0300513") @[bmem.scala 189:26]
                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                    node _T_494 = eq(UInt<8>("h0a0"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                    when _T_494 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0de1ff0ef") @[bmem.scala 190:26]
                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                      node _T_497 = eq(UInt<8>("h0a1"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                      when _T_497 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("h0fdc42503") @[bmem.scala 191:26]
                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                        node _T_500 = eq(UInt<8>("h0a2"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                        when _T_500 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<27>("h078000ef") @[bmem.scala 192:26]
                                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                          node _T_503 = eq(UInt<8>("h0a3"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                          when _T_503 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("h0fe042623") @[bmem.scala 193:26]
                                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                            node _T_506 = eq(UInt<8>("h0a4"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                            when _T_506 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<26>("h0300006f") @[bmem.scala 194:26]
                                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                              node _T_509 = eq(UInt<8>("h0a5"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                              when _T_509 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<11>("h0513") @[bmem.scala 195:26]
                                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                node _T_512 = eq(UInt<8>("h0a6"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                when _T_512 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<32>("h0dc9ff0ef") @[bmem.scala 196:26]
                                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                  node _T_515 = eq(UInt<8>("h0a7"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                  when _T_515 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<19>("h050793") @[bmem.scala 197:26]
                                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                    node _T_518 = eq(UInt<8>("h0a8"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                    when _T_518 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<19>("h078713") @[bmem.scala 198:26]
                                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                      node _T_521 = eq(UInt<8>("h0a9"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                      when _T_521 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 199:26]
                                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                        node _T_524 = eq(UInt<8>("h0aa"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                        when _T_524 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0ff040693") @[bmem.scala 200:26]
                                                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                          node _T_527 = eq(UInt<8>("h0ab"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                          when _T_527 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<24>("h0f687b3") @[bmem.scala 201:26]
                                                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                            node _T_530 = eq(UInt<8>("h0ac"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                            when _T_530 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("h0fee78c23") @[bmem.scala 202:26]
                                                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                              node _T_533 = eq(UInt<8>("h0ad"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                              when _T_533 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 203:26]
                                                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                node _T_536 = eq(UInt<8>("h0ae"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                when _T_536 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<21>("h0178793") @[bmem.scala 204:26]
                                                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                  node _T_539 = eq(UInt<8>("h0af"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                  when _T_539 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0fef42623") @[bmem.scala 205:26]
                                                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                    node _T_542 = eq(UInt<8>("h0b0"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                    when _T_542 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0fec42703") @[bmem.scala 206:26]
                                                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                      node _T_545 = eq(UInt<8>("h0b1"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                      when _T_545 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<22>("h0300793") @[bmem.scala 207:26]
                                                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                        node _T_548 = eq(UInt<8>("h0b2"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                        when _T_548 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0fce7f6e3") @[bmem.scala 208:26]
                                                                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                          node _T_551 = eq(UInt<8>("h0b3"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                          when _T_551 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<14>("h037b7") @[bmem.scala 209:26]
                                                                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                            node _T_554 = eq(UInt<8>("h0b4"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                            when _T_554 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<23>("h057c783") @[bmem.scala 210:26]
                                                                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                              node _T_557 = eq(UInt<8>("h0b5"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                              when _T_557 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<28>("h0ff7f713") @[bmem.scala 211:26]
                                                                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                node _T_560 = eq(UInt<8>("h0b6"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                when _T_560 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<14>("h037b7") @[bmem.scala 212:26]
                                                                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                  node _T_563 = eq(UInt<8>("h0b7"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                  when _T_563 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0ffe77713") @[bmem.scala 213:26]
                                                                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                    node _T_566 = eq(UInt<8>("h0b8"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                    when _T_566 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<28>("h0ff77713") @[bmem.scala 214:26]
                                                                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                      node _T_569 = eq(UInt<8>("h0b9"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                      when _T_569 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<24>("h0e782a3") @[bmem.scala 215:26]
                                                                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                        node _T_572 = eq(UInt<8>("h0ba"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                        when _T_572 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0fe842783") @[bmem.scala 216:26]
                                                                                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                          node _T_575 = eq(UInt<8>("h0bb"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                          when _T_575 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<19>("h078513") @[bmem.scala 217:26]
                                                                                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                            node _T_578 = eq(UInt<8>("h0bc"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                            when _T_578 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<26>("h02c12083") @[bmem.scala 218:26]
                                                                                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                              node _T_581 = eq(UInt<8>("h0bd"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                              when _T_581 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<26>("h02812403") @[bmem.scala 219:26]
                                                                                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                node _T_584 = eq(UInt<8>("h0be"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                when _T_584 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<26>("h03010113") @[bmem.scala 220:26]
                                                                                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                  node _T_587 = eq(UInt<8>("h0bf"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                  when _T_587 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<16>("h08067") @[bmem.scala 221:26]
                                                                                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                    node _T_590 = eq(UInt<8>("h0c0"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                    when _T_590 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0fd010113") @[bmem.scala 222:26]
                                                                                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                      node _T_593 = eq(UInt<8>("h0c1"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                      when _T_593 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<26>("h02112623") @[bmem.scala 223:26]
                                                                                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                        node _T_596 = eq(UInt<8>("h0c2"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                        when _T_596 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<26>("h02812423") @[bmem.scala 224:26]
                                                                                                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                          node _T_599 = eq(UInt<8>("h0c3"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                          when _T_599 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<26>("h03010413") @[bmem.scala 225:26]
                                                                                                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                            node _T_602 = eq(UInt<8>("h0c4"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                            when _T_602 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("h0fca42e23") @[bmem.scala 226:26]
                                                                                                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                              node _T_605 = eq(UInt<8>("h0c5"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                              when _T_605 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("h0fdc42783") @[bmem.scala 227:26]
                                                                                                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                node _T_608 = eq(UInt<8>("h0c6"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                when _T_608 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<32>("h0fef42423") @[bmem.scala 228:26]
                                                                                                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                  node _T_611 = eq(UInt<8>("h0c7"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                  when _T_611 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<22>("h0200793") @[bmem.scala 229:26]
                                                                                                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                    node _T_614 = eq(UInt<8>("h0c8"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                    when _T_614 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0fef42623") @[bmem.scala 230:26]
                                                                                                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                      node _T_617 = eq(UInt<8>("h0c9"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                      when _T_617 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<26>("h0280006f") @[bmem.scala 231:26]
                                                                                                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                        node _T_620 = eq(UInt<8>("h0ca"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                        when _T_620 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 232:26]
                                                                                                                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                          node _T_623 = eq(UInt<8>("h0cb"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                          when _T_623 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("h0ff040713") @[bmem.scala 233:26]
                                                                                                                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                            node _T_626 = eq(UInt<8>("h0cc"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                            when _T_626 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<24>("h0f707b3") @[bmem.scala 234:26]
                                                                                                                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                              node _T_629 = eq(UInt<8>("h0cd"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                              when _T_629 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<32>("h0ff87c783") @[bmem.scala 235:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                node _T_632 = eq(UInt<8>("h0ce"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                when _T_632 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<19>("h078513") @[bmem.scala 236:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                  node _T_635 = eq(UInt<8>("h0cf"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                  when _T_635 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<32>("h0d25ff0ef") @[bmem.scala 237:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                    node _T_638 = eq(UInt<8>("h0d0"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                    when _T_638 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 238:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                      node _T_641 = eq(UInt<8>("h0d1"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                      when _T_641 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<32>("h0fff78793") @[bmem.scala 239:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                      else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                        node _T_644 = eq(UInt<8>("h0d2"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                        when _T_644 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                          bmem_data <= UInt<32>("h0fef42623") @[bmem.scala 240:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                          skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                        else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                          node _T_647 = eq(UInt<8>("h0d3"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                          when _T_647 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                            bmem_data <= UInt<32>("h0fec42783") @[bmem.scala 241:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                            skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                          else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                            node _T_650 = eq(UInt<8>("h0d4"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                            when _T_650 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                              bmem_data <= UInt<32>("h0fc07dce3") @[bmem.scala 242:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                              skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                            else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                              node _T_653 = eq(UInt<8>("h0d5"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                              when _T_653 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                bmem_data <= UInt<5>("h013") @[bmem.scala 243:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                              else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                node _T_656 = eq(UInt<8>("h0d6"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                                when _T_656 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  bmem_data <= UInt<26>("h02c12083") @[bmem.scala 244:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  node _T_659 = eq(UInt<8>("h0d7"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  when _T_659 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    bmem_data <= UInt<26>("h02812403") @[bmem.scala 245:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                  else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    node _T_662 = eq(UInt<8>("h0d8"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    when _T_662 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                      bmem_data <= UInt<26>("h03010113") @[bmem.scala 246:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                      skip @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    else : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                      node _T_665 = eq(UInt<8>("h0d9"), addr) @[Conditional.scala 37:30]
                                                                                                                                                                                                                                                                                                                                                                                                                                                      when _T_665 : @[Conditional.scala 39:67]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        bmem_data <= UInt<16>("h08067") @[bmem.scala 247:26]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        skip @[Conditional.scala 39:67]
    io.bmem_rdata <= bmem_data @[bmem.scala 250:17]
    
  module IMem_Interface : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ibus : {flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, wbs : {flip m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}
    
    inst imem of IMem @[imem_interface.scala 40:20]
    imem.clock <= clock
    imem.reset <= reset
    inst bmem of BMem @[imem_interface.scala 41:20]
    bmem.clock <= clock
    bmem.reset <= reset
    node ibus_imem_addr = bits(io.ibus.addr, 10, 0) @[imem_interface.scala 47:41]
    node ibus_bmem_addr = bits(io.ibus.addr, 9, 0) @[imem_interface.scala 48:41]
    node wbs_imem_addr = bits(io.wbs.m2s.addr, 10, 0) @[imem_interface.scala 49:44]
    reg ack : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[imem_interface.scala 54:31]
    reg wb_select : UInt<4>, clock @[imem_interface.scala 55:27]
    node _T_45 = eq(io.wbs.m2s.we, UInt<1>("h00")) @[imem_interface.scala 57:24]
    node wb_rd_en = and(_T_45, io.wbs.m2s.stb) @[imem_interface.scala 57:39]
    node wb_wr_en = and(io.wbs.m2s.we, io.wbs.m2s.stb) @[imem_interface.scala 58:38]
    node _T_46 = bits(io.wbs.m2s.addr, 15, 12) @[imem_interface.scala 63:46]
    node _T_48 = neq(_T_46, UInt<1>("h00")) @[imem_interface.scala 63:84]
    node imem_wbs_addr_match = eq(_T_48, UInt<1>("h00")) @[imem_interface.scala 63:29]
    node imem_wbs_write = and(imem_wbs_addr_match, wb_wr_en) @[imem_interface.scala 64:46]
    wire imem_wbs_sel : UInt<1>
    imem_wbs_sel <= UInt<1>("h00")
    node _T_52 = or(wb_rd_en, wb_wr_en) @[imem_interface.scala 70:33]
    node _T_53 = and(_T_52, imem_wbs_addr_match) @[imem_interface.scala 70:46]
    imem_wbs_sel <= _T_53 @[imem_interface.scala 70:19]
    reg imem_ibus_valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[imem_interface.scala 71:32]
    node _T_57 = eq(imem_wbs_sel, UInt<1>("h00")) @[imem_interface.scala 72:22]
    imem_ibus_valid <= _T_57 @[imem_interface.scala 72:19]
    wire rd_imem_const : UInt<32>
    rd_imem_const <= UInt<32>("h00")
    wire rd_imem_inst : UInt<32>
    rd_imem_inst <= UInt<32>("h00")
    node imem_addr = mux(imem_wbs_sel, wbs_imem_addr, ibus_imem_addr) @[imem_interface.scala 80:27]
    imem.io.imem_addr <= imem_addr @[imem_interface.scala 81:21]
    imem.io.imem_wdata <= io.wbs.m2s.data @[imem_interface.scala 87:22]
    imem.io.wr_en <= imem_wbs_write @[imem_interface.scala 88:17]
    imem.io.st_type <= io.wbs.m2s.sel @[imem_interface.scala 89:19]
    when imem_ibus_valid : @[imem_interface.scala 92:23]
      rd_imem_inst <= imem.io.imem_rdata @[imem_interface.scala 93:16]
      skip @[imem_interface.scala 92:23]
    else : @[imem_interface.scala 94:3]
      rd_imem_const <= imem.io.imem_rdata @[imem_interface.scala 95:17]
      skip @[imem_interface.scala 94:3]
    when imem_wbs_sel : @[imem_interface.scala 98:20]
      ack <= io.wbs.m2s.stb @[imem_interface.scala 99:12]
      skip @[imem_interface.scala 98:20]
    wire rconst_data : UInt<32>
    rconst_data <= UInt<32>("h00")
    wb_select <= io.wbs.m2s.sel @[imem_interface.scala 104:16]
    node _T_64 = eq(wb_select, UInt<4>("h01")) @[imem_interface.scala 106:18]
    when _T_64 : @[imem_interface.scala 106:45]
      node _T_65 = bits(rd_imem_const, 7, 0) @[imem_interface.scala 107:33]
      rconst_data <= _T_65 @[imem_interface.scala 107:17]
      skip @[imem_interface.scala 106:45]
    else : @[imem_interface.scala 108:52]
      node _T_66 = eq(wb_select, UInt<4>("h02")) @[imem_interface.scala 108:24]
      when _T_66 : @[imem_interface.scala 108:52]
        node _T_67 = bits(rd_imem_const, 15, 8) @[imem_interface.scala 109:33]
        rconst_data <= _T_67 @[imem_interface.scala 109:17]
        skip @[imem_interface.scala 108:52]
      else : @[imem_interface.scala 110:52]
        node _T_68 = eq(wb_select, UInt<4>("h04")) @[imem_interface.scala 110:24]
        when _T_68 : @[imem_interface.scala 110:52]
          node _T_69 = bits(rd_imem_const, 23, 16) @[imem_interface.scala 111:33]
          rconst_data <= _T_69 @[imem_interface.scala 111:17]
          skip @[imem_interface.scala 110:52]
        else : @[imem_interface.scala 112:52]
          node _T_70 = eq(wb_select, UInt<4>("h08")) @[imem_interface.scala 112:24]
          when _T_70 : @[imem_interface.scala 112:52]
            node _T_71 = bits(rd_imem_const, 31, 24) @[imem_interface.scala 113:33]
            rconst_data <= _T_71 @[imem_interface.scala 113:17]
            skip @[imem_interface.scala 112:52]
          else : @[imem_interface.scala 114:52]
            node _T_72 = eq(wb_select, UInt<4>("h03")) @[imem_interface.scala 114:24]
            when _T_72 : @[imem_interface.scala 114:52]
              node _T_73 = bits(rd_imem_const, 15, 0) @[imem_interface.scala 115:33]
              rconst_data <= _T_73 @[imem_interface.scala 115:17]
              skip @[imem_interface.scala 114:52]
            else : @[imem_interface.scala 116:54]
              node _T_74 = eq(wb_select, UInt<4>("h0c")) @[imem_interface.scala 116:24]
              when _T_74 : @[imem_interface.scala 116:54]
                node _T_75 = bits(rd_imem_const, 31, 16) @[imem_interface.scala 117:33]
                rconst_data <= _T_75 @[imem_interface.scala 117:17]
                skip @[imem_interface.scala 116:54]
              else : @[imem_interface.scala 118:4]
                node _T_76 = bits(rd_imem_const, 31, 0) @[imem_interface.scala 119:33]
                rconst_data <= _T_76 @[imem_interface.scala 119:17]
                skip @[imem_interface.scala 118:4]
    io.wbs.ack_o <= ack @[imem_interface.scala 123:18]
    io.wbs.data_o <= rconst_data @[imem_interface.scala 124:18]
    reg bmem_ibus_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[imem_interface.scala 127:31]
    node _T_79 = bits(io.ibus.addr, 15, 12) @[imem_interface.scala 128:34]
    node _T_81 = eq(_T_79, UInt<4>("h07")) @[imem_interface.scala 128:66]
    bmem_ibus_sel <= _T_81 @[imem_interface.scala 128:18]
    bmem.io.bmem_addr <= ibus_bmem_addr @[imem_interface.scala 130:21]
    node _T_82 = mux(bmem_ibus_sel, bmem.io.bmem_rdata, rd_imem_inst) @[imem_interface.scala 137:25]
    io.ibus.inst <= _T_82 @[imem_interface.scala 137:19]
    node _T_84 = mux(bmem_ibus_sel, UInt<1>("h01"), imem_ibus_valid) @[imem_interface.scala 138:25]
    io.ibus.valid <= _T_84 @[imem_interface.scala 138:19]
    
  module WBM_DBus : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dbus : {flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}, wbm : {m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, flip ack_i : UInt<1>, flip data_i : UInt<32>}}
    
    wire st_sel_vec : UInt<4>
    st_sel_vec <= UInt<4>("h00")
    node _T_39 = eq(io.dbus.st_type, UInt<2>("h01")) @[wbm_dbus.scala 35:19]
    when _T_39 : @[wbm_dbus.scala 35:40]
      st_sel_vec <= UInt<4>("h0f") @[wbm_dbus.scala 36:18]
      skip @[wbm_dbus.scala 35:40]
    else : @[wbm_dbus.scala 38:47]
      node _T_40 = eq(io.dbus.st_type, UInt<2>("h02")) @[wbm_dbus.scala 38:26]
      when _T_40 : @[wbm_dbus.scala 38:47]
        st_sel_vec <= UInt<4>("h03") @[wbm_dbus.scala 39:18]
        skip @[wbm_dbus.scala 38:47]
      else : @[wbm_dbus.scala 41:46]
        node _T_41 = eq(io.dbus.st_type, UInt<2>("h03")) @[wbm_dbus.scala 41:26]
        when _T_41 : @[wbm_dbus.scala 41:46]
          st_sel_vec <= UInt<4>("h01") @[wbm_dbus.scala 42:18]
          skip @[wbm_dbus.scala 41:46]
    node ld_align = bits(io.dbus.addr, 1, 0) @[wbm_dbus.scala 46:30]
    wire ld_sel_vec : UInt<4>
    ld_sel_vec <= UInt<4>("h00")
    node _T_44 = eq(io.dbus.ld_type, UInt<3>("h01")) @[wbm_dbus.scala 51:16]
    when _T_44 : @[wbm_dbus.scala 51:37]
      ld_sel_vec <= UInt<4>("h0f") @[wbm_dbus.scala 52:16]
      skip @[wbm_dbus.scala 51:37]
    else : @[wbm_dbus.scala 54:76]
      node _T_45 = eq(io.dbus.ld_type, UInt<3>("h02")) @[wbm_dbus.scala 54:23]
      node _T_46 = eq(io.dbus.ld_type, UInt<3>("h04")) @[wbm_dbus.scala 54:54]
      node _T_47 = or(_T_45, _T_46) @[wbm_dbus.scala 54:43]
      when _T_47 : @[wbm_dbus.scala 54:76]
        node _T_48 = bits(ld_align, 1, 1) @[wbm_dbus.scala 55:34]
        node _T_49 = mux(_T_48, UInt<4>("h0c"), UInt<4>("h03")) @[wbm_dbus.scala 55:25]
        ld_sel_vec <= _T_49 @[wbm_dbus.scala 55:18]
        skip @[wbm_dbus.scala 54:76]
      else : @[wbm_dbus.scala 57:75]
        node _T_50 = eq(io.dbus.ld_type, UInt<3>("h03")) @[wbm_dbus.scala 57:23]
        node _T_51 = eq(io.dbus.ld_type, UInt<3>("h05")) @[wbm_dbus.scala 57:54]
        node _T_52 = or(_T_50, _T_51) @[wbm_dbus.scala 57:43]
        when _T_52 : @[wbm_dbus.scala 57:75]
          node _T_54 = eq(ld_align, UInt<2>("h03")) @[wbm_dbus.scala 58:21]
          when _T_54 : @[wbm_dbus.scala 58:32]
            ld_sel_vec <= UInt<4>("h08") @[wbm_dbus.scala 59:20]
            skip @[wbm_dbus.scala 58:32]
          else : @[wbm_dbus.scala 60:37]
            node _T_56 = eq(ld_align, UInt<2>("h02")) @[wbm_dbus.scala 60:27]
            when _T_56 : @[wbm_dbus.scala 60:37]
              ld_sel_vec <= UInt<4>("h04") @[wbm_dbus.scala 61:20]
              skip @[wbm_dbus.scala 60:37]
            else : @[wbm_dbus.scala 62:37]
              node _T_58 = eq(ld_align, UInt<1>("h01")) @[wbm_dbus.scala 62:27]
              when _T_58 : @[wbm_dbus.scala 62:37]
                ld_sel_vec <= UInt<4>("h02") @[wbm_dbus.scala 63:20]
                skip @[wbm_dbus.scala 62:37]
              else : @[wbm_dbus.scala 64:8]
                ld_sel_vec <= UInt<4>("h01") @[wbm_dbus.scala 65:20]
                skip @[wbm_dbus.scala 64:8]
          skip @[wbm_dbus.scala 57:75]
    node _T_59 = bits(io.dbus.addr, 15, 0) @[wbm_dbus.scala 71:34]
    io.wbm.m2s.addr <= _T_59 @[wbm_dbus.scala 71:19]
    io.wbm.m2s.data <= io.dbus.wdata @[wbm_dbus.scala 72:19]
    io.wbm.m2s.we <= io.dbus.wr_en @[wbm_dbus.scala 73:19]
    node _T_61 = neq(io.dbus.st_type, UInt<1>("h00")) @[wbm_dbus.scala 74:37]
    node _T_62 = mux(_T_61, st_sel_vec, ld_sel_vec) @[wbm_dbus.scala 74:25]
    io.wbm.m2s.sel <= _T_62 @[wbm_dbus.scala 74:19]
    node _T_63 = bits(io.dbus.rd_en, 0, 0) @[wbm_dbus.scala 75:36]
    node _T_64 = bits(io.dbus.wr_en, 0, 0) @[wbm_dbus.scala 75:60]
    node _T_65 = or(_T_63, _T_64) @[wbm_dbus.scala 75:43]
    io.wbm.m2s.stb <= _T_65 @[wbm_dbus.scala 75:19]
    io.wbm.m2s.cyc <= UInt<1>("h01") @[wbm_dbus.scala 76:19]
    io.dbus.rdata <= io.wbm.data_i @[wbm_dbus.scala 78:19]
    io.dbus.valid <= io.wbm.ack_i @[wbm_dbus.scala 79:19]
    
  module UARTTx : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, out : UInt<1>, flip div : UInt<10>, flip nstop : UInt<2>}
    
    reg prescaler : UInt<10>, clock with : (reset => (reset, UInt<1>("h00"))) @[uart_tx.scala 23:26]
    node pulse = eq(prescaler, UInt<1>("h00")) @[uart_tx.scala 24:30]
    reg counter : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[uart_tx.scala 27:26]
    reg shifter : UInt<9>, clock @[uart_tx.scala 28:22]
    reg out : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[uart_tx.scala 29:26]
    io.out <= out @[uart_tx.scala 30:17]
    node busy = neq(counter, UInt<1>("h00")) @[uart_tx.scala 32:28]
    node _T_33 = eq(busy, UInt<1>("h00")) @[uart_tx.scala 33:34]
    node state1 = and(io.in.valid, _T_33) @[uart_tx.scala 33:31]
    node _T_35 = eq(busy, UInt<1>("h00")) @[uart_tx.scala 35:20]
    io.in.ready <= _T_35 @[uart_tx.scala 35:17]
    when state1 : @[uart_tx.scala 37:16]
      node _T_37 = cat(io.in.bits, UInt<1>("h00")) @[Cat.scala 30:58]
      shifter <= _T_37 @[uart_tx.scala 38:14]
      node _T_39 = eq(io.nstop, UInt<1>("h00")) @[uart_tx.scala 40:45]
      node _T_42 = eq(io.nstop, UInt<1>("h01")) @[uart_tx.scala 40:45]
      node _T_46 = mux(_T_39, UInt<4>("h0b"), UInt<1>("h00")) @[Mux.scala 19:72]
      node _T_48 = mux(_T_42, UInt<4>("h0c"), UInt<1>("h00")) @[Mux.scala 19:72]
      node _T_49 = or(_T_46, _T_48) @[Mux.scala 19:72]
      wire _T_51 : UInt<4> @[Mux.scala 19:72]
      _T_51 <= _T_49 @[Mux.scala 19:72]
      counter <= _T_51 @[uart_tx.scala 39:14]
      skip @[uart_tx.scala 37:16]
    when busy : @[uart_tx.scala 44:16]
      node _T_53 = sub(io.div, UInt<1>("h01")) @[uart_tx.scala 45:37]
      node _T_54 = asUInt(_T_53) @[uart_tx.scala 45:37]
      node _T_55 = tail(_T_54, 1) @[uart_tx.scala 45:37]
      node _T_57 = sub(prescaler, UInt<1>("h01")) @[uart_tx.scala 45:55]
      node _T_58 = asUInt(_T_57) @[uart_tx.scala 45:55]
      node _T_59 = tail(_T_58, 1) @[uart_tx.scala 45:55]
      node _T_60 = mux(pulse, _T_55, _T_59) @[uart_tx.scala 45:21]
      prescaler <= _T_60 @[uart_tx.scala 45:15]
      when pulse : @[uart_tx.scala 47:17]
        node _T_62 = sub(counter, UInt<1>("h01")) @[uart_tx.scala 48:26]
        node _T_63 = asUInt(_T_62) @[uart_tx.scala 48:26]
        node _T_64 = tail(_T_63, 1) @[uart_tx.scala 48:26]
        counter <= _T_64 @[uart_tx.scala 48:15]
        node _T_66 = shr(shifter, 1) @[uart_tx.scala 49:38]
        node _T_67 = cat(UInt<1>("h01"), _T_66) @[Cat.scala 30:58]
        shifter <= _T_67 @[uart_tx.scala 49:15]
        node _T_68 = bits(shifter, 0, 0) @[uart_tx.scala 50:25]
        out <= _T_68 @[uart_tx.scala 50:15]
        skip @[uart_tx.scala 47:17]
      skip @[uart_tx.scala 44:16]
    
  module UARTRx : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : {valid : UInt<1>, bits : UInt<8>}, flip div : UInt<10>}
    
    reg data_count : UInt<4>, clock @[uart_rx.scala 23:34]
    node data_last = eq(data_count, UInt<1>("h00")) @[uart_rx.scala 24:43]
    reg prescaler : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[uart_rx.scala 27:38]
    node pulse = eq(prescaler, UInt<1>("h00")) @[uart_rx.scala 28:42]
    node _T_19 = sub(io.div, UInt<1>("h01")) @[uart_rx.scala 29:50]
    node _T_20 = asUInt(_T_19) @[uart_rx.scala 29:50]
    node _T_21 = tail(_T_20, 1) @[uart_rx.scala 29:50]
    node _T_23 = sub(prescaler, UInt<1>("h01")) @[uart_rx.scala 29:68]
    node _T_24 = asUInt(_T_23) @[uart_rx.scala 29:68]
    node _T_25 = tail(_T_24, 1) @[uart_rx.scala 29:68]
    node prescaler_next = mux(pulse, _T_21, _T_25) @[uart_rx.scala 29:34]
    reg debounce : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[uart_rx.scala 32:38]
    node _T_29 = div(io.div, UInt<2>("h02")) @[uart_rx.scala 33:52]
    node debounce_max = eq(debounce, _T_29) @[uart_rx.scala 33:41]
    reg shifter : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uart_rx.scala 36:27]
    reg valid : UInt<1>, clock @[uart_rx.scala 37:23]
    valid <= UInt<1>("h00") @[uart_rx.scala 38:18]
    io.out.valid <= valid @[uart_rx.scala 39:18]
    io.out.bits <= shifter @[uart_rx.scala 40:18]
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uart_rx.scala 44:27]
    node _T_35 = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T_35 : @[Conditional.scala 40:58]
      node _T_37 = eq(io.in, UInt<1>("h00")) @[uart_rx.scala 48:13]
      when _T_37 : @[uart_rx.scala 48:21]
        node _T_39 = add(debounce, UInt<1>("h01")) @[uart_rx.scala 50:30]
        node _T_40 = tail(_T_39, 1) @[uart_rx.scala 50:30]
        debounce <= _T_40 @[uart_rx.scala 50:18]
        when debounce_max : @[uart_rx.scala 51:29]
          state <= UInt<1>("h01") @[uart_rx.scala 52:22]
          data_count <= UInt<4>("h08") @[uart_rx.scala 53:22]
          prescaler <= prescaler_next @[uart_rx.scala 54:22]
          skip @[uart_rx.scala 51:29]
        skip @[uart_rx.scala 48:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_42 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_42 : @[Conditional.scala 39:67]
        prescaler <= prescaler_next @[uart_rx.scala 60:17]
        when pulse : @[uart_rx.scala 61:20]
          node _T_44 = sub(data_count, UInt<1>("h01")) @[uart_rx.scala 62:34]
          node _T_45 = asUInt(_T_44) @[uart_rx.scala 62:34]
          node _T_46 = tail(_T_45, 1) @[uart_rx.scala 62:34]
          data_count <= _T_46 @[uart_rx.scala 62:20]
          when data_last : @[uart_rx.scala 64:26]
            state <= UInt<1>("h00") @[uart_rx.scala 65:22]
            valid <= UInt<1>("h01") @[uart_rx.scala 66:22]
            debounce <= UInt<1>("h00") @[uart_rx.scala 67:22]
            skip @[uart_rx.scala 64:26]
          else : @[uart_rx.scala 68:22]
            node _T_49 = shr(shifter, 1) @[uart_rx.scala 70:44]
            node _T_50 = cat(io.in, _T_49) @[Cat.scala 30:58]
            shifter <= _T_50 @[uart_rx.scala 70:22]
            skip @[uart_rx.scala 68:22]
          skip @[uart_rx.scala 61:20]
        skip @[Conditional.scala 39:67]
    
  module UART : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip uart_select : UInt<1>, txd : UInt<1>, flip rxd : UInt<1>, uartInt : UInt<1>, wbs : {flip m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}
    
    inst txm of UARTTx @[uart.scala 53:19]
    txm.clock <= clock
    txm.reset <= reset
    inst rxm of UARTRx @[uart.scala 54:19]
    rxm.clock <= clock
    rxm.reset <= reset
    reg txen : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uart.scala 57:27]
    reg rxen : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uart.scala 58:27]
    reg tx_data_r : UInt<8>, clock with : (reset => (reset, UInt<8>("h04a"))) @[uart.scala 60:27]
    reg rx_data_r : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uart.scala 61:27]
    reg control_r : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uart.scala 62:27]
    reg baud_r : UInt<10>, clock with : (reset => (reset, UInt<10>("h08"))) @[uart.scala 63:27]
    reg status_r : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uart.scala 64:27]
    reg int_mask_r : UInt<8>, clock with : (reset => (reset, UInt<8>("h01"))) @[uart.scala 65:27]
    reg nstop : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uart.scala 70:27]
    txen <= UInt<1>("h00") @[uart.scala 73:19]
    txm.io.in.valid <= txen @[uart.scala 74:19]
    txm.io.in.bits <= tx_data_r @[uart.scala 75:19]
    txm.io.div <= baud_r @[uart.scala 76:19]
    txm.io.nstop <= nstop @[uart.scala 77:19]
    rxm.io.div <= baud_r @[uart.scala 78:19]
    rxm.io.in <= io.rxd @[uart.scala 81:19]
    io.txd <= txm.io.out @[uart.scala 82:19]
    node addr = bits(io.wbs.m2s.addr, 7, 0) @[uart.scala 85:36]
    node _T_63 = eq(io.wbs.m2s.we, UInt<1>("h00")) @[uart.scala 86:21]
    node rd_en = and(_T_63, io.wbs.m2s.stb) @[uart.scala 86:36]
    node wr_en = and(io.wbs.m2s.we, io.wbs.m2s.stb) @[uart.scala 87:35]
    node _T_70 = eq(addr, UInt<1>("h00")) @[uart.scala 91:32]
    node sel_reg_rx = and(_T_70, io.uart_select) @[uart.scala 91:56]
    node _T_71 = eq(addr, UInt<1>("h01")) @[uart.scala 92:32]
    node sel_reg_tx = and(_T_71, io.uart_select) @[uart.scala 92:56]
    node _T_72 = eq(addr, UInt<2>("h02")) @[uart.scala 93:32]
    node sel_reg_baud = and(_T_72, io.uart_select) @[uart.scala 93:54]
    node _T_73 = eq(addr, UInt<2>("h03")) @[uart.scala 94:32]
    node sel_reg_control = and(_T_73, io.uart_select) @[uart.scala 94:57]
    node _T_74 = eq(addr, UInt<3>("h04")) @[uart.scala 95:32]
    node sel_reg_status = and(_T_74, io.uart_select) @[uart.scala 95:56]
    node _T_75 = eq(addr, UInt<3>("h05")) @[uart.scala 96:32]
    node sel_reg_int_mask = and(_T_75, io.uart_select) @[uart.scala 96:58]
    reg ack : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uart.scala 99:28]
    io.wbs.ack_o <= ack @[uart.scala 100:19]
    node _T_78 = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[uart.scala 101:37]
    ack <= _T_78 @[uart.scala 101:19]
    reg rd_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uart.scala 104:28]
    node _T_81 = and(rd_en, sel_reg_control) @[uart.scala 106:14]
    when _T_81 : @[uart.scala 106:33]
      rd_data <= control_r @[uart.scala 107:15]
      skip @[uart.scala 106:33]
    else : @[uart.scala 108:36]
      node _T_82 = and(rd_en, sel_reg_baud) @[uart.scala 108:20]
      when _T_82 : @[uart.scala 108:36]
        rd_data <= baud_r @[uart.scala 109:15]
        skip @[uart.scala 108:36]
      else : @[uart.scala 110:38]
        node _T_83 = and(rd_en, sel_reg_status) @[uart.scala 110:20]
        when _T_83 : @[uart.scala 110:38]
          rd_data <= status_r @[uart.scala 111:15]
          skip @[uart.scala 110:38]
        else : @[uart.scala 112:34]
          node _T_84 = and(rd_en, sel_reg_rx) @[uart.scala 112:20]
          when _T_84 : @[uart.scala 112:34]
            rd_data <= rx_data_r @[uart.scala 113:15]
            skip @[uart.scala 112:34]
          else : @[uart.scala 114:4]
            rd_data <= UInt<1>("h00") @[uart.scala 115:15]
            skip @[uart.scala 114:4]
    io.wbs.data_o <= rd_data @[uart.scala 117:18]
    node _T_86 = and(status_r, int_mask_r) @[uart.scala 120:31]
    node _T_88 = neq(_T_86, UInt<1>("h00")) @[uart.scala 120:45]
    io.uartInt <= _T_88 @[uart.scala 120:18]
    when wr_en : @[uart.scala 123:15]
      when sel_reg_tx : @[uart.scala 124:22]
        node _T_89 = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 125:36]
        tx_data_r <= _T_89 @[uart.scala 125:18]
        txen <= UInt<1>("h01") @[uart.scala 126:18]
        skip @[uart.scala 124:22]
      else : @[uart.scala 128:29]
        when sel_reg_baud : @[uart.scala 128:29]
          node _T_91 = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 129:36]
          baud_r <= _T_91 @[uart.scala 129:18]
          skip @[uart.scala 128:29]
        else : @[uart.scala 131:31]
          when sel_reg_control : @[uart.scala 131:31]
            node _T_92 = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 132:36]
            control_r <= _T_92 @[uart.scala 132:18]
            skip @[uart.scala 131:31]
          else : @[uart.scala 134:32]
            when sel_reg_int_mask : @[uart.scala 134:32]
              node _T_93 = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 135:36]
              int_mask_r <= _T_93 @[uart.scala 135:18]
              skip @[uart.scala 134:32]
      skip @[uart.scala 123:15]
    when rxm.io.out.valid : @[uart.scala 140:25]
      rx_data_r <= rxm.io.out.bits @[uart.scala 141:18]
      node _T_94 = bits(status_r, 7, 1) @[uart.scala 142:33]
      node _T_96 = cat(_T_94, UInt<1>("h01")) @[Cat.scala 30:58]
      status_r <= _T_96 @[uart.scala 142:18]
      skip @[uart.scala 140:25]
    else : @[uart.scala 143:38]
      node _T_97 = and(wr_en, sel_reg_status) @[uart.scala 143:20]
      when _T_97 : @[uart.scala 143:38]
        node _T_98 = bits(io.wbs.m2s.data, 7, 0) @[uart.scala 144:36]
        status_r <= _T_98 @[uart.scala 144:18]
        skip @[uart.scala 143:38]
      else : @[uart.scala 145:14]
        node _T_99 = bits(status_r, 7, 2) @[uart.scala 146:33]
        node _T_100 = bits(status_r, 0, 0) @[uart.scala 146:65]
        node _T_101 = cat(_T_99, txm.io.in.ready) @[Cat.scala 30:58]
        node _T_102 = cat(_T_101, _T_100) @[Cat.scala 30:58]
        status_r <= _T_102 @[uart.scala 146:18]
        skip @[uart.scala 145:14]
    
  module SPI : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip spi_select : UInt<1>, spi_cs : UInt<1>, spi_clk : UInt<1>, spi_mosi : UInt<1>, flip spi_miso : UInt<1>, spi_intr : UInt<1>, wbs : {flip m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}}
    
    reg ack_o : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 65:25]
    reg rd_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[spi.scala 66:25]
    reg cs_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[spi.scala 68:23]
    reg sclk_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 69:23]
    reg mosi_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 70:23]
    wire miso_r : UInt<1>
    miso_r <= UInt<1>("h00")
    wire wr_en : UInt<1>
    wr_en <= UInt<1>("h00")
    wire rd_en : UInt<1>
    rd_en <= UInt<1>("h00")
    reg read_wait_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 75:31]
    wire latch_s_data : UInt<8>
    latch_s_data <= UInt<8>("h00")
    reg reg_rxdata : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[spi.scala 78:28]
    reg reg_txdata : UInt<8>, clock with : (reset => (reset, UInt<8>("h035"))) @[spi.scala 79:28]
    reg reg_ssmask : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 80:28]
    reg rx_shift_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[spi.scala 82:30]
    reg tx_shift_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[spi.scala 83:30]
    reg rx_latch_flag : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 84:30]
    reg bit_iroe : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 87:27]
    reg bit_itoe : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 88:27]
    reg bit_itrdy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 89:27]
    reg bit_irrdy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 90:27]
    reg bit_ie : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 91:27]
    reg bit_sso : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[spi.scala 92:27]
    reg bit_toe : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 95:27]
    reg bit_roe : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 96:27]
    reg bit_trdy : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[spi.scala 97:27]
    reg bit_rrdy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 98:27]
    reg bit_tmt : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[spi.scala 99:27]
    reg bit_e : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 100:27]
    node addr = bits(io.wbs.m2s.addr, 7, 0) @[spi.scala 106:33]
    node _T_104 = eq(io.wbs.m2s.we, UInt<1>("h00")) @[spi.scala 108:19]
    node _T_105 = and(_T_104, io.wbs.m2s.stb) @[spi.scala 108:34]
    node _T_106 = and(_T_105, io.wbs.m2s.cyc) @[spi.scala 108:52]
    rd_en <= _T_106 @[spi.scala 108:16]
    node _T_107 = and(io.wbs.m2s.we, io.wbs.m2s.stb) @[spi.scala 109:33]
    node _T_108 = and(_T_107, io.wbs.m2s.cyc) @[spi.scala 109:51]
    wr_en <= _T_108 @[spi.scala 109:16]
    latch_s_data <= io.wbs.m2s.data @[spi.scala 110:16]
    node _T_115 = eq(addr, UInt<1>("h00")) @[spi.scala 113:32]
    node sel_reg_rx = and(_T_115, io.spi_select) @[spi.scala 113:54]
    node _T_116 = eq(addr, UInt<1>("h01")) @[spi.scala 114:32]
    node sel_reg_tx = and(_T_116, io.spi_select) @[spi.scala 114:54]
    node _T_117 = eq(addr, UInt<2>("h02")) @[spi.scala 115:32]
    node sel_reg_baud = and(_T_117, io.spi_select) @[spi.scala 115:52]
    node _T_118 = eq(addr, UInt<2>("h03")) @[spi.scala 116:32]
    node sel_reg_control = and(_T_118, io.spi_select) @[spi.scala 116:55]
    node _T_119 = eq(addr, UInt<3>("h04")) @[spi.scala 117:32]
    node sel_reg_status = and(_T_119, io.spi_select) @[spi.scala 117:54]
    node _T_120 = eq(addr, UInt<3>("h05")) @[spi.scala 118:32]
    node sel_reg_ssmask = and(_T_120, io.spi_select) @[spi.scala 118:55]
    when rx_latch_flag : @[spi.scala 121:23]
      reg_rxdata <= rx_shift_data @[spi.scala 122:16]
      skip @[spi.scala 121:23]
    node _T_121 = and(wr_en, sel_reg_tx) @[spi.scala 126:14]
    node _T_122 = and(_T_121, bit_trdy) @[spi.scala 126:28]
    when _T_122 : @[spi.scala 126:41]
      reg_txdata <= latch_s_data @[spi.scala 127:16]
      skip @[spi.scala 126:41]
    node _T_123 = or(bit_toe, bit_roe) @[spi.scala 131:19]
    bit_e <= _T_123 @[spi.scala 131:8]
    node _T_125 = cat(bit_toe, bit_roe) @[Cat.scala 30:58]
    node _T_126 = cat(_T_125, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_127 = cat(bit_trdy, bit_tmt) @[Cat.scala 30:58]
    node _T_128 = cat(bit_e, bit_rrdy) @[Cat.scala 30:58]
    node _T_129 = cat(_T_128, _T_127) @[Cat.scala 30:58]
    node reg_status = cat(_T_129, _T_126) @[Cat.scala 30:58]
    node _T_132 = cat(bit_itoe, bit_iroe) @[Cat.scala 30:58]
    node _T_133 = cat(bit_itrdy, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_134 = cat(_T_133, _T_132) @[Cat.scala 30:58]
    node _T_135 = cat(bit_ie, bit_irrdy) @[Cat.scala 30:58]
    node _T_136 = cat(bit_sso, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_137 = cat(_T_136, _T_135) @[Cat.scala 30:58]
    node reg_control = cat(_T_137, _T_134) @[Cat.scala 30:58]
    node _T_138 = and(wr_en, sel_reg_control) @[spi.scala 138:14]
    when _T_138 : @[spi.scala 138:34]
      node _T_139 = bits(latch_s_data, 0, 0) @[spi.scala 139:30]
      bit_iroe <= _T_139 @[spi.scala 139:15]
      node _T_140 = bits(latch_s_data, 1, 1) @[spi.scala 140:30]
      bit_itoe <= _T_140 @[spi.scala 140:15]
      node _T_141 = bits(latch_s_data, 3, 3) @[spi.scala 141:30]
      bit_itrdy <= _T_141 @[spi.scala 141:15]
      node _T_142 = bits(latch_s_data, 4, 4) @[spi.scala 142:30]
      bit_irrdy <= _T_142 @[spi.scala 142:15]
      node _T_143 = bits(latch_s_data, 5, 5) @[spi.scala 143:30]
      bit_ie <= _T_143 @[spi.scala 143:15]
      node _T_144 = bits(latch_s_data, 7, 7) @[spi.scala 144:30]
      bit_sso <= _T_144 @[spi.scala 144:15]
      skip @[spi.scala 138:34]
    node _T_145 = and(bit_iroe, bit_roe) @[spi.scala 147:37]
    node _T_146 = and(bit_itoe, bit_toe) @[spi.scala 147:58]
    node _T_147 = or(_T_145, _T_146) @[spi.scala 147:47]
    node _T_148 = and(bit_ie, _T_147) @[spi.scala 147:25]
    node _T_149 = and(bit_itrdy, bit_trdy) @[spi.scala 147:83]
    node _T_150 = or(_T_148, _T_149) @[spi.scala 147:70]
    node _T_151 = and(bit_irrdy, bit_rrdy) @[spi.scala 147:108]
    node _T_152 = or(_T_150, _T_151) @[spi.scala 147:95]
    io.spi_intr <= _T_152 @[spi.scala 147:14]
    when ack_o : @[spi.scala 152:15]
      ack_o <= UInt<1>("h00") @[spi.scala 153:10]
      skip @[spi.scala 152:15]
    else : @[spi.scala 154:59]
      node _T_154 = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[spi.scala 154:21]
      node _T_155 = or(io.wbs.m2s.we, read_wait_done) @[spi.scala 154:39]
      node _T_156 = and(_T_154, _T_155) @[spi.scala 154:30]
      when _T_156 : @[spi.scala 154:59]
        ack_o <= UInt<1>("h01") @[spi.scala 155:10]
        skip @[spi.scala 154:59]
    io.wbs.ack_o <= ack_o @[spi.scala 157:15]
    when ack_o : @[spi.scala 159:15]
      read_wait_done <= UInt<1>("h00") @[spi.scala 160:19]
      skip @[spi.scala 159:15]
    else : @[spi.scala 161:43]
      node _T_159 = and(io.wbs.m2s.stb, io.wbs.m2s.cyc) @[spi.scala 161:21]
      node _T_160 = not(io.wbs.m2s.we) @[spi.scala 161:35]
      node _T_161 = and(_T_159, _T_160) @[spi.scala 161:30]
      when _T_161 : @[spi.scala 161:43]
        read_wait_done <= UInt<1>("h01") @[spi.scala 162:20]
        skip @[spi.scala 161:43]
    reg clock_cnt : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[spi.scala 166:31]
    reg data_cnt : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[spi.scala 167:31]
    reg pending_data : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 168:31]
    wire c_status : UInt<3>
    c_status <= UInt<3>("h00")
    reg n_status : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[spi.scala 170:31]
    reg p_status : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[spi.scala 171:31]
    node _T_172 = and(wr_en, sel_reg_tx) @[spi.scala 173:17]
    when _T_172 : @[spi.scala 173:32]
      pending_data <= UInt<1>("h01") @[spi.scala 174:20]
      skip @[spi.scala 173:32]
    else : @[spi.scala 175:40]
      node _T_174 = eq(c_status, UInt<3>("h01")) @[spi.scala 175:27]
      when _T_174 : @[spi.scala 175:40]
        pending_data <= UInt<1>("h00") @[spi.scala 176:20]
        skip @[spi.scala 175:40]
    when rd_en : @[spi.scala 179:18]
      wire _T_178 : UInt<8> @[spi.scala 180:81]
      _T_178 <= reg_txdata @[spi.scala 180:81]
      node _T_180 = mux(sel_reg_ssmask, reg_ssmask, UInt<8>("h00")) @[spi.scala 181:78]
      node _T_181 = mux(sel_reg_control, reg_control, _T_180) @[spi.scala 181:44]
      node _T_182 = mux(sel_reg_status, reg_status, _T_181) @[spi.scala 181:12]
      node _T_183 = mux(sel_reg_tx, _T_178, _T_182) @[spi.scala 180:49]
      node _T_184 = mux(sel_reg_rx, reg_rxdata, _T_183) @[spi.scala 180:21]
      rd_data <= _T_184 @[spi.scala 180:15]
      skip @[spi.scala 179:18]
    io.wbs.data_o <= rd_data @[spi.scala 183:18]
    node _T_185 = and(wr_en, sel_reg_ssmask) @[spi.scala 185:16]
    when _T_185 : @[spi.scala 185:35]
      node _T_186 = bits(latch_s_data, 0, 0) @[spi.scala 186:33]
      reg_ssmask <= _T_186 @[spi.scala 186:18]
      skip @[spi.scala 185:35]
    node _T_187 = not(reg_ssmask) @[spi.scala 198:16]
    io.spi_cs <= _T_187 @[spi.scala 198:13]
    node _T_188 = eq(c_status, UInt<3>("h03")) @[spi.scala 201:21]
    node _T_190 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 201:49]
    node _T_191 = and(_T_188, _T_190) @[spi.scala 201:35]
    when _T_191 : @[spi.scala 201:67]
      node _T_192 = not(sclk_r) @[spi.scala 202:18]
      sclk_r <= _T_192 @[spi.scala 202:14]
      skip @[spi.scala 201:67]
    io.spi_clk <= sclk_r @[spi.scala 204:16]
    miso_r <= io.spi_miso @[spi.scala 206:12]
    node _T_194 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 208:22]
    node _T_196 = eq(UInt<1>("h00"), sclk_r) @[spi.scala 208:59]
    node _T_197 = and(_T_194, _T_196) @[spi.scala 208:39]
    node _T_198 = eq(c_status, UInt<3>("h03")) @[spi.scala 208:84]
    node _T_199 = and(_T_197, _T_198) @[spi.scala 208:71]
    when _T_199 : @[spi.scala 208:99]
      when UInt<1>("h00") : @[spi.scala 209:38]
        node _T_201 = bits(rx_shift_data, 7, 1) @[spi.scala 210:51]
        node _T_202 = cat(miso_r, _T_201) @[Cat.scala 30:58]
        rx_shift_data <= _T_202 @[spi.scala 210:23]
        skip @[spi.scala 209:38]
      else : @[spi.scala 211:20]
        node _T_203 = cat(rx_shift_data, miso_r) @[Cat.scala 30:58]
        rx_shift_data <= _T_203 @[spi.scala 212:23]
        skip @[spi.scala 211:20]
      skip @[spi.scala 208:99]
    node _T_204 = eq(p_status, UInt<3>("h03")) @[spi.scala 217:20]
    node _T_205 = neq(n_status, UInt<3>("h03")) @[spi.scala 217:47]
    node _T_206 = and(_T_204, _T_205) @[spi.scala 217:34]
    when _T_206 : @[spi.scala 217:62]
      rx_latch_flag <= UInt<1>("h01") @[spi.scala 218:21]
      skip @[spi.scala 217:62]
    else : @[spi.scala 219:33]
      when rx_latch_flag : @[spi.scala 219:33]
        rx_latch_flag <= UInt<1>("h00") @[spi.scala 220:21]
        skip @[spi.scala 219:33]
    node _T_210 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 223:20]
    node _T_211 = eq(n_status, UInt<3>("h00")) @[spi.scala 223:49]
    node _T_212 = or(_T_210, _T_211) @[spi.scala 223:36]
    when _T_212 : @[spi.scala 223:63]
      clock_cnt <= UInt<1>("h00") @[spi.scala 224:17]
      skip @[spi.scala 223:63]
    else : @[spi.scala 225:18]
      node _T_215 = add(clock_cnt, UInt<1>("h01")) @[spi.scala 226:30]
      node _T_216 = tail(_T_215, 1) @[spi.scala 226:30]
      clock_cnt <= _T_216 @[spi.scala 226:17]
      skip @[spi.scala 225:18]
    c_status <= n_status @[spi.scala 229:13]
    p_status <= n_status @[spi.scala 230:13]
    node _T_219 = eq(UInt<1>("h00"), UInt<1>("h00")) @[spi.scala 232:52]
    node _T_222 = mux(_T_219, UInt<6>("h07"), UInt<6>("h08")) @[spi.scala 232:33]
    wire ACTUAL_MAX : UInt
    ACTUAL_MAX <= _T_222
    node _T_224 = eq(c_status, UInt<3>("h00")) @[spi.scala 234:19]
    when _T_224 : @[spi.scala 234:32]
      when pending_data : @[spi.scala 235:26]
        n_status <= UInt<3>("h01") @[spi.scala 236:18]
        skip @[spi.scala 235:26]
      else : @[spi.scala 237:20]
        n_status <= UInt<3>("h00") @[spi.scala 238:18]
        skip @[spi.scala 237:20]
      skip @[spi.scala 234:32]
    else : @[spi.scala 240:40]
      node _T_225 = eq(c_status, UInt<3>("h01")) @[spi.scala 240:27]
      when _T_225 : @[spi.scala 240:40]
        node _T_228 = eq(UInt<2>("h02"), UInt<1>("h00")) @[spi.scala 241:25]
        when _T_228 : @[spi.scala 241:34]
          n_status <= UInt<3>("h03") @[spi.scala 242:18]
          skip @[spi.scala 241:34]
        else : @[spi.scala 243:20]
          n_status <= UInt<3>("h02") @[spi.scala 244:18]
          skip @[spi.scala 243:20]
        skip @[spi.scala 240:40]
      else : @[spi.scala 246:40]
        node _T_229 = eq(c_status, UInt<3>("h02")) @[spi.scala 246:27]
        when _T_229 : @[spi.scala 246:40]
          node _T_231 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 247:23]
          node _T_233 = eq(data_cnt, UInt<1>("h01")) @[spi.scala 247:53]
          node _T_234 = and(_T_231, _T_233) @[spi.scala 247:40]
          when _T_234 : @[spi.scala 247:76]
            n_status <= UInt<3>("h03") @[spi.scala 248:18]
            skip @[spi.scala 247:76]
          else : @[spi.scala 249:20]
            n_status <= UInt<3>("h02") @[spi.scala 250:18]
            skip @[spi.scala 249:20]
          skip @[spi.scala 246:40]
        else : @[spi.scala 252:41]
          node _T_235 = eq(c_status, UInt<3>("h03")) @[spi.scala 252:27]
          when _T_235 : @[spi.scala 252:41]
            node _T_237 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 253:23]
            node _T_238 = eq(data_cnt, ACTUAL_MAX) @[spi.scala 253:53]
            node _T_239 = and(_T_237, _T_238) @[spi.scala 253:40]
            node _T_241 = neq(sclk_r, UInt<1>("h00")) @[spi.scala 253:80]
            node _T_242 = and(_T_239, _T_241) @[spi.scala 253:69]
            when _T_242 : @[spi.scala 253:105]
              n_status <= UInt<3>("h04") @[spi.scala 254:18]
              skip @[spi.scala 253:105]
            else : @[spi.scala 255:20]
              n_status <= UInt<3>("h03") @[spi.scala 256:18]
              skip @[spi.scala 255:20]
            skip @[spi.scala 252:41]
          else : @[spi.scala 258:46]
            node _T_243 = eq(c_status, UInt<3>("h04")) @[spi.scala 258:27]
            when _T_243 : @[spi.scala 258:46]
              node _T_245 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 259:22]
              when _T_245 : @[spi.scala 259:39]
                when UInt<1>("h01") : @[spi.scala 260:40]
                  n_status <= UInt<3>("h05") @[spi.scala 261:20]
                  skip @[spi.scala 260:40]
                else : @[spi.scala 262:22]
                  n_status <= UInt<3>("h00") @[spi.scala 263:20]
                  skip @[spi.scala 262:22]
                skip @[spi.scala 259:39]
              skip @[spi.scala 258:46]
            else : @[spi.scala 266:44]
              node _T_247 = eq(c_status, UInt<3>("h05")) @[spi.scala 266:27]
              when _T_247 : @[spi.scala 266:44]
                node _T_249 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 267:23]
                node _T_251 = eq(data_cnt, UInt<2>("h02")) @[spi.scala 267:53]
                node _T_252 = and(_T_249, _T_251) @[spi.scala 267:40]
                when _T_252 : @[spi.scala 267:77]
                  n_status <= UInt<3>("h00") @[spi.scala 268:18]
                  skip @[spi.scala 267:77]
                else : @[spi.scala 269:20]
                  n_status <= UInt<3>("h05") @[spi.scala 270:18]
                  skip @[spi.scala 269:20]
                skip @[spi.scala 266:44]
              else : @[spi.scala 272:18]
                n_status <= UInt<3>("h00") @[spi.scala 273:16]
                skip @[spi.scala 272:18]
    node _T_253 = eq(c_status, UInt<3>("h02")) @[spi.scala 276:19]
    node _T_255 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 276:46]
    node _T_256 = and(_T_253, _T_255) @[spi.scala 276:32]
    node _T_258 = eq(data_cnt, UInt<1>("h01")) @[spi.scala 276:76]
    node _T_259 = and(_T_256, _T_258) @[spi.scala 276:63]
    when _T_259 : @[spi.scala 276:99]
      data_cnt <= UInt<1>("h00") @[spi.scala 277:16]
      skip @[spi.scala 276:99]
    else : @[spi.scala 278:138]
      node _T_261 = eq(c_status, UInt<3>("h03")) @[spi.scala 278:28]
      node _T_263 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 278:56]
      node _T_264 = and(_T_261, _T_263) @[spi.scala 278:42]
      node _T_265 = eq(data_cnt, ACTUAL_MAX) @[spi.scala 278:86]
      node _T_266 = and(_T_264, _T_265) @[spi.scala 278:73]
      node _T_268 = neq(UInt<1>("h00"), sclk_r) @[spi.scala 278:125]
      node _T_269 = and(_T_266, _T_268) @[spi.scala 278:102]
      when _T_269 : @[spi.scala 278:138]
        data_cnt <= UInt<1>("h00") @[spi.scala 279:16]
        skip @[spi.scala 278:138]
      else : @[spi.scala 280:113]
        node _T_271 = eq(c_status, UInt<3>("h05")) @[spi.scala 280:28]
        node _T_273 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 280:59]
        node _T_274 = and(_T_271, _T_273) @[spi.scala 280:45]
        node _T_276 = eq(data_cnt, UInt<2>("h02")) @[spi.scala 280:89]
        node _T_277 = and(_T_274, _T_276) @[spi.scala 280:76]
        when _T_277 : @[spi.scala 280:113]
          data_cnt <= UInt<1>("h00") @[spi.scala 281:16]
          skip @[spi.scala 280:113]
        else : @[spi.scala 282:238]
          node _T_279 = eq(c_status, UInt<3>("h02")) @[spi.scala 282:29]
          node _T_281 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 282:56]
          node _T_282 = and(_T_279, _T_281) @[spi.scala 282:42]
          node _T_283 = eq(c_status, UInt<3>("h03")) @[spi.scala 282:88]
          node _T_285 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 282:116]
          node _T_286 = and(_T_283, _T_285) @[spi.scala 282:102]
          node _T_289 = neq(UInt<1>("h00"), UInt<1>("h00")) @[spi.scala 282:152]
          node _T_290 = neq(_T_289, sclk_r) @[spi.scala 282:161]
          node _T_291 = and(_T_286, _T_290) @[spi.scala 282:133]
          node _T_292 = or(_T_282, _T_291) @[spi.scala 282:74]
          node _T_293 = eq(c_status, UInt<3>("h05")) @[spi.scala 282:188]
          node _T_295 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 282:219]
          node _T_296 = and(_T_293, _T_295) @[spi.scala 282:205]
          node _T_297 = or(_T_292, _T_296) @[spi.scala 282:174]
          when _T_297 : @[spi.scala 282:238]
            node _T_299 = add(data_cnt, UInt<1>("h01")) @[spi.scala 283:28]
            node _T_300 = tail(_T_299, 1) @[spi.scala 283:28]
            data_cnt <= _T_300 @[spi.scala 283:16]
            skip @[spi.scala 282:238]
    reg wait_one_tick_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[spi.scala 286:37]
    node _T_305 = eq(UInt<1>("h00"), UInt<1>("h00")) @[spi.scala 288:25]
    when _T_305 : @[spi.scala 288:47]
      wait_one_tick_done <= UInt<1>("h01") @[spi.scala 289:26]
      skip @[spi.scala 288:47]
    else : @[spi.scala 290:96]
      node _T_307 = eq(c_status, UInt<3>("h03")) @[spi.scala 290:28]
      node _T_309 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 290:56]
      node _T_310 = and(_T_307, _T_309) @[spi.scala 290:42]
      node _T_312 = eq(data_cnt, UInt<1>("h01")) @[spi.scala 290:86]
      node _T_313 = and(_T_310, _T_312) @[spi.scala 290:73]
      when _T_313 : @[spi.scala 290:96]
        wait_one_tick_done <= UInt<1>("h01") @[spi.scala 291:26]
        skip @[spi.scala 290:96]
      else : @[spi.scala 292:36]
        node _T_316 = eq(data_cnt, UInt<1>("h00")) @[spi.scala 292:27]
        when _T_316 : @[spi.scala 292:36]
          wait_one_tick_done <= UInt<1>("h00") @[spi.scala 293:26]
          skip @[spi.scala 292:36]
    node _T_318 = eq(c_status, UInt<3>("h02")) @[spi.scala 297:22]
    when _T_318 : @[spi.scala 297:37]
      node _T_320 = bits(reg_txdata, 0, 0) @[spi.scala 298:57]
      node _T_321 = bits(reg_txdata, 7, 7) @[spi.scala 298:72]
      node _T_322 = mux(UInt<1>("h00"), _T_320, _T_321) @[spi.scala 298:20]
      mosi_r <= _T_322 @[spi.scala 298:14]
      node _T_325 = bits(reg_txdata, 7, 1) @[spi.scala 299:81]
      node _T_326 = cat(UInt<1>("h00"), _T_325) @[Cat.scala 30:58]
      node _T_328 = cat(reg_txdata, UInt<1>("h00")) @[Cat.scala 30:58]
      node _T_329 = mux(UInt<1>("h00"), _T_326, _T_328) @[spi.scala 299:27]
      tx_shift_data <= _T_329 @[spi.scala 299:21]
      skip @[spi.scala 297:37]
    else : @[spi.scala 300:114]
      node _T_330 = eq(c_status, UInt<3>("h03")) @[spi.scala 300:28]
      node _T_332 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 300:56]
      node _T_333 = and(_T_330, _T_332) @[spi.scala 300:42]
      node _T_335 = xor(UInt<1>("h00"), sclk_r) @[spi.scala 300:93]
      node _T_337 = neq(_T_335, UInt<1>("h00")) @[spi.scala 300:104]
      node _T_338 = and(_T_333, _T_337) @[spi.scala 300:73]
      when _T_338 : @[spi.scala 300:114]
        when wait_one_tick_done : @[spi.scala 301:32]
          node _T_340 = bits(tx_shift_data, 0, 0) @[spi.scala 302:62]
          node _T_341 = bits(tx_shift_data, 7, 7) @[spi.scala 302:80]
          node _T_342 = mux(UInt<1>("h00"), _T_340, _T_341) @[spi.scala 302:22]
          mosi_r <= _T_342 @[spi.scala 302:16]
          node _T_345 = bits(tx_shift_data, 7, 1) @[spi.scala 303:86]
          node _T_346 = cat(UInt<1>("h00"), _T_345) @[Cat.scala 30:58]
          node _T_348 = cat(tx_shift_data, UInt<1>("h00")) @[Cat.scala 30:58]
          node _T_349 = mux(UInt<1>("h00"), _T_346, _T_348) @[spi.scala 303:29]
          tx_shift_data <= _T_349 @[spi.scala 303:23]
          skip @[spi.scala 301:32]
        skip @[spi.scala 300:114]
    io.spi_mosi <= mosi_r @[spi.scala 306:15]
    node _T_350 = eq(n_status, UInt<3>("h03")) @[spi.scala 308:21]
    when _T_350 : @[spi.scala 308:36]
      bit_trdy <= UInt<1>("h01") @[spi.scala 309:16]
      skip @[spi.scala 308:36]
    else : @[spi.scala 310:39]
      node _T_352 = and(wr_en, sel_reg_tx) @[spi.scala 310:24]
      when _T_352 : @[spi.scala 310:39]
        bit_trdy <= UInt<1>("h00") @[spi.scala 311:16]
        skip @[spi.scala 310:39]
    node _T_355 = eq(bit_trdy, UInt<1>("h00")) @[spi.scala 314:12]
    node _T_356 = and(_T_355, wr_en) @[spi.scala 314:22]
    node _T_357 = and(_T_356, sel_reg_tx) @[spi.scala 314:31]
    when _T_357 : @[spi.scala 314:46]
      bit_toe <= UInt<1>("h01") @[spi.scala 315:15]
      skip @[spi.scala 314:46]
    else : @[spi.scala 316:43]
      node _T_359 = and(wr_en, sel_reg_status) @[spi.scala 316:24]
      when _T_359 : @[spi.scala 316:43]
        bit_toe <= UInt<1>("h00") @[spi.scala 317:15]
        skip @[spi.scala 316:43]
    node _T_361 = eq(c_status, UInt<3>("h04")) @[spi.scala 320:21]
    node _T_363 = eq(clock_cnt, UInt<2>("h03")) @[spi.scala 320:54]
    node _T_364 = and(_T_361, _T_363) @[spi.scala 320:40]
    when _T_364 : @[spi.scala 320:72]
      when bit_rrdy : @[spi.scala 321:22]
        bit_roe <= UInt<1>("h01") @[spi.scala 322:17]
        skip @[spi.scala 321:22]
      else : @[spi.scala 323:20]
        bit_rrdy <= UInt<1>("h01") @[spi.scala 324:18]
        skip @[spi.scala 323:20]
      skip @[spi.scala 320:72]
    else : @[spi.scala 326:39]
      node _T_367 = and(rd_en, sel_reg_rx) @[spi.scala 326:24]
      when _T_367 : @[spi.scala 326:39]
        bit_rrdy <= UInt<1>("h00") @[spi.scala 327:16]
        bit_roe <= UInt<1>("h00") @[spi.scala 328:15]
        skip @[spi.scala 326:39]
    node _T_370 = neq(c_status, UInt<3>("h00")) @[spi.scala 331:21]
    node _T_371 = or(_T_370, pending_data) @[spi.scala 331:34]
    when _T_371 : @[spi.scala 331:51]
      bit_tmt <= UInt<1>("h00") @[spi.scala 332:15]
      skip @[spi.scala 331:51]
    else : @[spi.scala 333:18]
      bit_tmt <= UInt<1>("h01") @[spi.scala 334:15]
      skip @[spi.scala 333:18]
    
  module Interlink_Module : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip bus_adr_i : UInt<32>, flip bus_sel_i : UInt<4>, flip bus_we_i : UInt<1>, flip bus_cyc_i : UInt<1>, flip bus_stb_i : UInt<1>, bus_ack_o : UInt<1>, bus_dat_o : UInt<32>, tmr_val_we : UInt<1>, flip tmr_val_do : UInt<32>, tmr_dat_we : UInt<1>, flip tmr_dat_do : UInt<32>, tmr_duty_we : UInt<1>, flip tmr_duty_do : UInt<32>, tmr_cfg_we : UInt<1>, flip tmr_cfg_do : UInt<32>, qei_count_we : UInt<1>, flip qei_count_do : UInt<32>, qei_cfg_we : UInt<1>, flip qei_cfg_do : UInt<32>, flip qei_speed_do : SInt<16>, pid_kp_we : UInt<1>, flip pid_kp_do : SInt<16>, pid_ki_we : UInt<1>, flip pid_ki_do : SInt<16>, pid_kd_we : UInt<1>, flip pid_kd_do : SInt<16>, pid_ref_we : UInt<1>, flip pid_ref_do : SInt<16>, pid_fb_we : UInt<1>, flip pid_fb_do : SInt<16>, pid_cfg_we : UInt<1>, flip pid_cfg_do : SInt<16>, flip motor_select : UInt<1>}
    
    node _T_72 = and(io.bus_stb_i, io.bus_cyc_i) @[interlink.scala 89:53]
    wire bus_valid : UInt<1>
    bus_valid <= _T_72
    wire tmr_cfg_do : UInt<32> @[interlink.scala 92:27]
    wire tmr_val_do : UInt<32> @[interlink.scala 93:27]
    wire tmr_dat_do : UInt<32> @[interlink.scala 94:27]
    wire tmr_duty_do : UInt<32> @[interlink.scala 95:27]
    node reg_offset = bits(io.bus_adr_i, 11, 0) @[interlink.scala 98:35]
    node _T_78 = and(bus_valid, io.motor_select) @[interlink.scala 100:50]
    node _T_79 = eq(reg_offset, UInt<12>("h00")) @[interlink.scala 100:81]
    node _T_80 = and(_T_78, _T_79) @[interlink.scala 100:66]
    wire tmr_cfg_sel : UInt<1>
    tmr_cfg_sel <= _T_80
    node _T_82 = and(bus_valid, io.motor_select) @[interlink.scala 101:50]
    node _T_83 = eq(reg_offset, UInt<12>("h04")) @[interlink.scala 101:81]
    node _T_84 = and(_T_82, _T_83) @[interlink.scala 101:66]
    wire tmr_val_sel : UInt<1>
    tmr_val_sel <= _T_84
    node _T_86 = and(bus_valid, io.motor_select) @[interlink.scala 102:50]
    node _T_87 = eq(reg_offset, UInt<12>("h08")) @[interlink.scala 102:81]
    node _T_88 = and(_T_86, _T_87) @[interlink.scala 102:66]
    wire tmr_dat_sel : UInt<1>
    tmr_dat_sel <= _T_88
    node _T_90 = and(bus_valid, io.motor_select) @[interlink.scala 103:50]
    node _T_91 = eq(reg_offset, UInt<12>("h0c")) @[interlink.scala 103:81]
    node _T_92 = and(_T_90, _T_91) @[interlink.scala 103:66]
    wire tmr_duty_sel : UInt<1>
    tmr_duty_sel <= _T_92
    node _T_94 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 105:72]
    node _T_95 = and(_T_94, io.bus_we_i) @[interlink.scala 105:76]
    node _T_97 = mux(tmr_cfg_sel, _T_95, UInt<1>("h00")) @[interlink.scala 105:43]
    wire tmr_cfg_we : UInt<1>
    tmr_cfg_we <= _T_97
    node _T_99 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 106:72]
    node _T_100 = and(_T_99, io.bus_we_i) @[interlink.scala 106:76]
    node _T_102 = mux(tmr_val_sel, _T_100, UInt<1>("h00")) @[interlink.scala 106:43]
    wire tmr_val_we : UInt<1>
    tmr_val_we <= _T_102
    node _T_104 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 107:72]
    node _T_105 = and(_T_104, io.bus_we_i) @[interlink.scala 107:76]
    node _T_107 = mux(tmr_dat_sel, _T_105, UInt<1>("h00")) @[interlink.scala 107:43]
    wire tmr_dat_we : UInt<1>
    tmr_dat_we <= _T_107
    node _T_109 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 108:73]
    node _T_110 = and(_T_109, io.bus_we_i) @[interlink.scala 108:77]
    node _T_112 = mux(tmr_duty_sel, _T_110, UInt<1>("h00")) @[interlink.scala 108:43]
    wire tmr_duty_we : UInt<1>
    tmr_duty_we <= _T_112
    node _T_115 = neq(io.bus_sel_i, UInt<1>("h00")) @[interlink.scala 110:71]
    node _T_117 = eq(_T_115, UInt<1>("h00")) @[interlink.scala 110:56]
    node _T_118 = and(tmr_dat_sel, _T_117) @[interlink.scala 110:52]
    node _T_119 = not(io.bus_we_i) @[interlink.scala 110:84]
    node _T_120 = and(_T_118, _T_119) @[interlink.scala 110:80]
    wire reg_dat_re : UInt<1>
    reg_dat_re <= _T_120
    node _T_121 = or(tmr_cfg_sel, tmr_val_sel) @[interlink.scala 112:35]
    node _T_122 = or(_T_121, tmr_dat_sel) @[interlink.scala 112:50]
    node tmr_sel = or(_T_122, tmr_duty_sel) @[interlink.scala 112:65]
    node _T_123 = mux(tmr_duty_sel, tmr_duty_do, tmr_dat_do) @[interlink.scala 114:26]
    node _T_124 = mux(tmr_val_sel, tmr_val_do, _T_123) @[interlink.scala 113:57]
    node tmr_do = mux(tmr_cfg_sel, tmr_cfg_do, _T_124) @[interlink.scala 113:26]
    wire qei_count_do : UInt<32> @[interlink.scala 117:27]
    node _T_127 = and(bus_valid, io.motor_select) @[interlink.scala 118:50]
    node _T_128 = eq(reg_offset, UInt<12>("h0100")) @[interlink.scala 118:81]
    node _T_129 = and(_T_127, _T_128) @[interlink.scala 118:66]
    wire qei_count_sel : UInt<1>
    qei_count_sel <= _T_129
    node _T_131 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 119:74]
    node _T_132 = and(_T_131, io.bus_we_i) @[interlink.scala 119:78]
    node _T_134 = mux(qei_count_sel, _T_132, UInt<1>("h00")) @[interlink.scala 119:43]
    wire qei_count_we : UInt<1>
    qei_count_we <= _T_134
    wire qei_cfg_do : UInt<32> @[interlink.scala 121:27]
    node _T_137 = and(bus_valid, io.motor_select) @[interlink.scala 122:50]
    node _T_138 = eq(reg_offset, UInt<12>("h0108")) @[interlink.scala 122:81]
    node _T_139 = and(_T_137, _T_138) @[interlink.scala 122:66]
    wire qei_cfg_sel : UInt<1>
    qei_cfg_sel <= _T_139
    node _T_141 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 123:72]
    node _T_142 = and(_T_141, io.bus_we_i) @[interlink.scala 123:76]
    node _T_144 = mux(qei_cfg_sel, _T_142, UInt<1>("h00")) @[interlink.scala 123:43]
    wire qei_cfg_we : UInt<1>
    qei_cfg_we <= _T_144
    wire qei_speed_do : UInt<32> @[interlink.scala 125:27]
    node _T_147 = and(bus_valid, io.motor_select) @[interlink.scala 126:50]
    node _T_148 = eq(reg_offset, UInt<12>("h0104")) @[interlink.scala 126:81]
    node _T_149 = and(_T_147, _T_148) @[interlink.scala 126:66]
    wire qei_speed_sel : UInt<1>
    qei_speed_sel <= _T_149
    node _T_151 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 127:74]
    node _T_152 = and(_T_151, io.bus_we_i) @[interlink.scala 127:78]
    node _T_154 = mux(qei_speed_sel, _T_152, UInt<1>("h00")) @[interlink.scala 127:43]
    wire qei_speed_we : UInt<1>
    qei_speed_we <= _T_154
    node _T_155 = or(qei_count_sel, qei_cfg_sel) @[interlink.scala 130:37]
    node qei_sel = or(_T_155, qei_speed_sel) @[interlink.scala 130:52]
    node _T_156 = mux(qei_cfg_sel, qei_cfg_do, qei_count_do) @[interlink.scala 131:59]
    node qei_do = mux(qei_speed_sel, qei_speed_do, _T_156) @[interlink.scala 131:26]
    wire pid_kp_do : SInt<16> @[interlink.scala 134:27]
    node _T_159 = and(bus_valid, io.motor_select) @[interlink.scala 135:50]
    node _T_160 = eq(reg_offset, UInt<12>("h0200")) @[interlink.scala 135:81]
    node _T_161 = and(_T_159, _T_160) @[interlink.scala 135:66]
    wire pid_kp_sel : UInt<1>
    pid_kp_sel <= _T_161
    node _T_163 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 136:71]
    node _T_164 = and(_T_163, io.bus_we_i) @[interlink.scala 136:75]
    node _T_166 = mux(pid_kp_sel, _T_164, UInt<1>("h00")) @[interlink.scala 136:43]
    wire pid_kp_we : UInt<1>
    pid_kp_we <= _T_166
    wire pid_ki_do : SInt<16> @[interlink.scala 138:27]
    node _T_169 = and(bus_valid, io.motor_select) @[interlink.scala 139:50]
    node _T_170 = eq(reg_offset, UInt<12>("h0204")) @[interlink.scala 139:81]
    node _T_171 = and(_T_169, _T_170) @[interlink.scala 139:66]
    wire pid_ki_sel : UInt<1>
    pid_ki_sel <= _T_171
    node _T_173 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 140:71]
    node _T_174 = and(_T_173, io.bus_we_i) @[interlink.scala 140:75]
    node _T_176 = mux(pid_ki_sel, _T_174, UInt<1>("h00")) @[interlink.scala 140:43]
    wire pid_ki_we : UInt<1>
    pid_ki_we <= _T_176
    wire pid_kd_do : SInt<16> @[interlink.scala 142:27]
    node _T_179 = and(bus_valid, io.motor_select) @[interlink.scala 143:50]
    node _T_180 = eq(reg_offset, UInt<12>("h0208")) @[interlink.scala 143:81]
    node _T_181 = and(_T_179, _T_180) @[interlink.scala 143:66]
    wire pid_kd_sel : UInt<1>
    pid_kd_sel <= _T_181
    node _T_183 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 144:71]
    node _T_184 = and(_T_183, io.bus_we_i) @[interlink.scala 144:75]
    node _T_186 = mux(pid_kd_sel, _T_184, UInt<1>("h00")) @[interlink.scala 144:43]
    wire pid_kd_we : UInt<1>
    pid_kd_we <= _T_186
    wire pid_ref_do : SInt<16> @[interlink.scala 146:27]
    node _T_189 = and(bus_valid, io.motor_select) @[interlink.scala 147:50]
    node _T_190 = eq(reg_offset, UInt<12>("h020c")) @[interlink.scala 147:81]
    node _T_191 = and(_T_189, _T_190) @[interlink.scala 147:66]
    wire pid_ref_sel : UInt<1>
    pid_ref_sel <= _T_191
    node _T_193 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 148:72]
    node _T_194 = and(_T_193, io.bus_we_i) @[interlink.scala 148:76]
    node _T_196 = mux(pid_ref_sel, _T_194, UInt<1>("h00")) @[interlink.scala 148:43]
    wire pid_ref_we : UInt<1>
    pid_ref_we <= _T_196
    wire pid_fb_do : SInt<16> @[interlink.scala 150:27]
    node _T_199 = and(bus_valid, io.motor_select) @[interlink.scala 151:50]
    node _T_200 = eq(reg_offset, UInt<12>("h0210")) @[interlink.scala 151:81]
    node _T_201 = and(_T_199, _T_200) @[interlink.scala 151:66]
    wire pid_fb_sel : UInt<1>
    pid_fb_sel <= _T_201
    node _T_203 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 152:71]
    node _T_204 = and(_T_203, io.bus_we_i) @[interlink.scala 152:75]
    node _T_206 = mux(pid_fb_sel, _T_204, UInt<1>("h00")) @[interlink.scala 152:43]
    wire pid_fb_we : UInt<1>
    pid_fb_we <= _T_206
    wire pid_cfg_do : SInt<16> @[interlink.scala 154:27]
    node _T_209 = and(bus_valid, io.motor_select) @[interlink.scala 155:50]
    node _T_210 = eq(reg_offset, UInt<12>("h0214")) @[interlink.scala 155:81]
    node _T_211 = and(_T_209, _T_210) @[interlink.scala 155:66]
    wire pid_cfg_sel : UInt<1>
    pid_cfg_sel <= _T_211
    node _T_213 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 156:72]
    node _T_214 = and(_T_213, io.bus_we_i) @[interlink.scala 156:76]
    node _T_216 = mux(pid_cfg_sel, _T_214, UInt<1>("h00")) @[interlink.scala 156:43]
    wire pid_cfg_we : UInt<1>
    pid_cfg_we <= _T_216
    node _T_217 = or(pid_kp_sel, pid_ki_sel) @[interlink.scala 158:34]
    node _T_218 = or(_T_217, pid_kd_sel) @[interlink.scala 158:48]
    node _T_219 = or(_T_218, pid_ref_sel) @[interlink.scala 158:62]
    node _T_220 = or(_T_219, pid_fb_sel) @[interlink.scala 158:77]
    node pid_sel = or(_T_220, pid_cfg_sel) @[interlink.scala 158:91]
    node _T_221 = mux(pid_fb_sel, pid_fb_do, pid_cfg_do) @[interlink.scala 162:46]
    node _T_222 = mux(pid_ref_sel, pid_ref_do, _T_221) @[interlink.scala 161:46]
    node _T_223 = mux(pid_kd_sel, pid_kd_do, _T_222) @[interlink.scala 160:46]
    node _T_224 = mux(pid_ki_sel, pid_ki_do, _T_223) @[interlink.scala 159:53]
    node pid_do = mux(pid_kp_sel, pid_kp_do, _T_224) @[interlink.scala 159:26]
    reg wb_ack_o : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[interlink.scala 165:30]
    reg wb_data_o : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[interlink.scala 166:30]
    node _T_229 = asUInt(pid_do) @[interlink.scala 167:92]
    node _T_231 = mux(pid_sel, _T_229, UInt<1>("h00")) @[interlink.scala 167:69]
    node _T_232 = mux(qei_sel, qei_do, _T_231) @[interlink.scala 167:48]
    node _T_233 = mux(tmr_sel, tmr_do, _T_232) @[interlink.scala 167:27]
    wb_data_o <= _T_233 @[interlink.scala 167:21]
    node _T_234 = or(tmr_sel, qei_sel) @[interlink.scala 168:32]
    node _T_235 = or(_T_234, pid_sel) @[interlink.scala 168:43]
    wb_ack_o <= _T_235 @[interlink.scala 168:21]
    io.bus_dat_o <= wb_data_o @[interlink.scala 170:21]
    io.bus_ack_o <= wb_ack_o @[interlink.scala 171:21]
    io.tmr_val_we <= tmr_val_we @[interlink.scala 174:21]
    tmr_val_do <= io.tmr_val_do @[interlink.scala 175:21]
    io.tmr_dat_we <= tmr_dat_we @[interlink.scala 176:21]
    tmr_dat_do <= io.tmr_dat_do @[interlink.scala 177:21]
    io.tmr_duty_we <= tmr_duty_we @[interlink.scala 178:21]
    tmr_duty_do <= io.tmr_duty_do @[interlink.scala 179:21]
    io.tmr_cfg_we <= tmr_cfg_we @[interlink.scala 180:21]
    tmr_cfg_do <= io.tmr_cfg_do @[interlink.scala 181:21]
    io.qei_count_we <= qei_count_we @[interlink.scala 183:21]
    qei_count_do <= io.qei_count_do @[interlink.scala 184:21]
    io.qei_cfg_we <= qei_cfg_we @[interlink.scala 185:21]
    qei_cfg_do <= io.qei_cfg_do @[interlink.scala 186:21]
    node _T_236 = asUInt(io.qei_speed_do) @[interlink.scala 187:46]
    qei_speed_do <= _T_236 @[interlink.scala 187:21]
    io.pid_kp_we <= pid_kp_we @[interlink.scala 189:21]
    pid_kp_do <= io.pid_kp_do @[interlink.scala 190:21]
    io.pid_ki_we <= pid_ki_we @[interlink.scala 191:21]
    pid_ki_do <= io.pid_ki_do @[interlink.scala 192:21]
    io.pid_kd_we <= pid_kd_we @[interlink.scala 193:21]
    pid_kd_do <= io.pid_kd_do @[interlink.scala 194:21]
    io.pid_ref_we <= pid_ref_we @[interlink.scala 195:21]
    pid_ref_do <= io.pid_ref_do @[interlink.scala 196:21]
    io.pid_fb_we <= pid_fb_we @[interlink.scala 197:21]
    pid_fb_do <= io.pid_fb_do @[interlink.scala 198:21]
    io.pid_cfg_we <= pid_cfg_we @[interlink.scala 199:21]
    pid_cfg_do <= io.pid_cfg_do @[interlink.scala 200:21]
    
  module PWM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reg_val_we : UInt<1>, flip reg_val_di : UInt<32>, reg_val_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, flip reg_dat_we : UInt<1>, flip reg_dat_di : UInt<32>, reg_dat_do : UInt<32>, flip reg_duty_we : UInt<1>, flip reg_duty_di : UInt<32>, reg_duty_do : UInt<32>, flip reg_pid_out : SInt<16>, pwm_h : UInt<1>, pwm_l : UInt<1>, irq_out : UInt<1>, rawirq_out : UInt<1>}
    
    reg value_cur : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 44:32]
    reg value_reload : UInt<32>, clock with : (reset => (reset, UInt<8>("h0ff"))) @[pwm.scala 45:32]
    reg pwm_duty : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 46:32]
    reg reg_duty : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 47:32]
    wire value_cur_plus : UInt<32> @[pwm.scala 50:29]
    wire value_cur_minus : UInt<32> @[pwm.scala 51:29]
    wire loc_enable : UInt<1> @[pwm.scala 53:29]
    reg enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 54:32]
    reg stop_out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 56:32]
    reg irq_out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 57:32]
    reg lastenable : UInt<1>, clock @[pwm.scala 60:28]
    reg updown : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 63:32]
    reg irq_ena : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 66:32]
    reg pid_out_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 69:32]
    reg pwm_db : UInt<4>, clock with : (reset => (reset, UInt<2>("h02"))) @[pwm.scala 72:32]
    io.reg_duty_do <= pwm_duty @[pwm.scala 75:23]
    when io.reg_duty_we : @[pwm.scala 76:24]
      reg_duty <= io.reg_duty_di @[pwm.scala 77:14]
      skip @[pwm.scala 76:24]
    when stop_out : @[pwm.scala 80:18]
      when pid_out_sel : @[pwm.scala 81:22]
        node _T_65 = asUInt(io.reg_pid_out) @[pwm.scala 82:40]
        pwm_duty <= _T_65 @[pwm.scala 82:16]
        skip @[pwm.scala 81:22]
      else : @[pwm.scala 83:16]
        pwm_duty <= reg_duty @[pwm.scala 84:16]
        skip @[pwm.scala 83:16]
      skip @[pwm.scala 80:18]
    reg proc_offset : UInt<32>, clock @[pwm.scala 88:24]
    reg pwm_ld : UInt<1>, clock @[pwm.scala 89:24]
    reg pwm_hd : UInt<1>, clock @[pwm.scala 90:24]
    node pwm_db_twice = dshl(pwm_db, UInt<1>("h01")) @[pwm.scala 93:30]
    node _T_70 = geq(pwm_duty, pwm_db_twice) @[pwm.scala 95:37]
    node _T_71 = sub(value_reload, pwm_db_twice) @[pwm.scala 95:84]
    node _T_72 = asUInt(_T_71) @[pwm.scala 95:84]
    node _T_73 = tail(_T_72, 1) @[pwm.scala 95:84]
    node _T_74 = leq(pwm_duty, _T_73) @[pwm.scala 95:67]
    node _T_75 = and(_T_70, _T_74) @[pwm.scala 95:54]
    node _T_76 = lt(pwm_duty, pwm_db_twice) @[pwm.scala 96:36]
    node _T_77 = sub(value_reload, pwm_db_twice) @[pwm.scala 96:80]
    node _T_78 = asUInt(_T_77) @[pwm.scala 96:80]
    node _T_79 = tail(_T_78, 1) @[pwm.scala 96:80]
    node _T_80 = mux(_T_76, pwm_db_twice, _T_79) @[pwm.scala 96:26]
    node _T_81 = mux(_T_75, pwm_duty, _T_80) @[pwm.scala 95:26]
    proc_offset <= _T_81 @[pwm.scala 95:20]
    node _T_82 = sub(proc_offset, pwm_db) @[pwm.scala 97:48]
    node _T_83 = asUInt(_T_82) @[pwm.scala 97:48]
    node _T_84 = tail(_T_83, 1) @[pwm.scala 97:48]
    node _T_85 = lt(value_cur, _T_84) @[pwm.scala 97:33]
    pwm_hd <= _T_85 @[pwm.scala 97:20]
    node _T_86 = gt(value_cur, proc_offset) @[pwm.scala 98:34]
    node _T_87 = sub(value_reload, pwm_db) @[pwm.scala 98:79]
    node _T_88 = asUInt(_T_87) @[pwm.scala 98:79]
    node _T_89 = tail(_T_88, 1) @[pwm.scala 98:79]
    node _T_90 = lt(value_cur, _T_89) @[pwm.scala 98:63]
    node _T_91 = and(_T_86, _T_90) @[pwm.scala 98:49]
    pwm_ld <= _T_91 @[pwm.scala 98:20]
    node _T_92 = and(pwm_hd, enable) @[pwm.scala 99:30]
    io.pwm_h <= _T_92 @[pwm.scala 99:20]
    node _T_93 = and(pwm_ld, enable) @[pwm.scala 100:30]
    io.pwm_l <= _T_93 @[pwm.scala 100:20]
    io.irq_out <= irq_out @[pwm.scala 103:20]
    node _T_94 = not(irq_out) @[pwm.scala 104:34]
    node _T_95 = and(stop_out, _T_94) @[pwm.scala 104:32]
    io.rawirq_out <= _T_95 @[pwm.scala 104:20]
    node _T_97 = bits(pwm_db, 3, 0) @[pwm.scala 107:44]
    node _T_98 = cat(irq_ena, updown) @[Cat.scala 30:58]
    node _T_99 = cat(_T_98, enable) @[Cat.scala 30:58]
    node _T_100 = cat(UInt<24>("h00"), _T_97) @[Cat.scala 30:58]
    node _T_101 = cat(_T_100, pid_out_sel) @[Cat.scala 30:58]
    node _T_102 = cat(_T_101, _T_99) @[Cat.scala 30:58]
    io.reg_cfg_do <= _T_102 @[pwm.scala 107:20]
    when io.reg_cfg_we : @[pwm.scala 108:23]
      node _T_103 = bits(io.reg_cfg_di, 0, 0) @[pwm.scala 109:35]
      enable <= _T_103 @[pwm.scala 109:19]
      node _T_104 = bits(io.reg_cfg_di, 1, 1) @[pwm.scala 110:35]
      updown <= _T_104 @[pwm.scala 110:19]
      node _T_105 = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 111:35]
      irq_ena <= _T_105 @[pwm.scala 111:19]
      node _T_106 = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 112:35]
      pid_out_sel <= _T_106 @[pwm.scala 112:19]
      node _T_107 = bits(io.reg_cfg_di, 7, 4) @[pwm.scala 113:36]
      node _T_109 = add(_T_107, UInt<2>("h02")) @[pwm.scala 113:42]
      node _T_110 = tail(_T_109, 1) @[pwm.scala 113:42]
      pwm_db <= _T_110 @[pwm.scala 113:19]
      skip @[pwm.scala 108:23]
    io.reg_val_do <= value_reload @[pwm.scala 117:19]
    node _T_112 = neq(io.reg_val_we, UInt<1>("h00")) @[pwm.scala 118:25]
    when _T_112 : @[pwm.scala 118:29]
      value_reload <= io.reg_val_di @[pwm.scala 119:19]
      skip @[pwm.scala 118:29]
    io.reg_dat_do <= value_cur @[pwm.scala 123:19]
    node _T_114 = add(value_cur, UInt<1>("h01")) @[pwm.scala 124:39]
    node _T_115 = tail(_T_114, 1) @[pwm.scala 124:39]
    value_cur_plus <= _T_115 @[pwm.scala 124:19]
    node _T_117 = sub(value_cur, UInt<1>("h01")) @[pwm.scala 125:39]
    node _T_118 = asUInt(_T_117) @[pwm.scala 125:39]
    node _T_119 = tail(_T_118, 1) @[pwm.scala 125:39]
    value_cur_minus <= _T_119 @[pwm.scala 125:19]
    loc_enable <= enable @[pwm.scala 126:19]
    lastenable <= loc_enable @[pwm.scala 129:19]
    node _T_121 = neq(io.reg_dat_we, UInt<1>("h00")) @[pwm.scala 130:25]
    when _T_121 : @[pwm.scala 130:29]
      value_cur <= io.reg_dat_di @[pwm.scala 131:19]
      skip @[pwm.scala 130:29]
    else : @[pwm.scala 132:39]
      node _T_123 = eq(loc_enable, UInt<1>("h01")) @[pwm.scala 132:27]
      when _T_123 : @[pwm.scala 132:39]
        node _T_124 = not(irq_out) @[pwm.scala 135:47]
        node _T_125 = and(stop_out, _T_124) @[pwm.scala 135:45]
        node _T_127 = mux(irq_ena, _T_125, UInt<1>("h00")) @[pwm.scala 135:23]
        irq_out <= _T_127 @[pwm.scala 135:17]
        node _T_129 = eq(updown, UInt<1>("h01")) @[pwm.scala 137:19]
        when _T_129 : @[pwm.scala 137:31]
          node _T_131 = eq(lastenable, UInt<1>("h00")) @[pwm.scala 138:25]
          when _T_131 : @[pwm.scala 138:38]
            value_cur <= UInt<32>("h00") @[pwm.scala 139:21]
            stop_out <= UInt<1>("h00") @[pwm.scala 140:21]
            skip @[pwm.scala 138:38]
          else : @[pwm.scala 141:22]
            node _T_134 = eq(value_cur, value_reload) @[pwm.scala 143:33]
            when _T_134 : @[pwm.scala 143:58]
              value_cur <= UInt<32>("h00") @[pwm.scala 144:23]
              stop_out <= UInt<1>("h01") @[pwm.scala 145:23]
              skip @[pwm.scala 143:58]
            else : @[pwm.scala 146:24]
              value_cur <= value_cur_plus @[pwm.scala 147:23]
              stop_out <= UInt<1>("h00") @[pwm.scala 148:23]
              skip @[pwm.scala 146:24]
            skip @[pwm.scala 141:22]
          skip @[pwm.scala 137:31]
        else : @[pwm.scala 151:20]
          node _T_139 = eq(lastenable, UInt<1>("h00")) @[pwm.scala 153:25]
          when _T_139 : @[pwm.scala 153:38]
            value_cur <= value_reload @[pwm.scala 154:23]
            stop_out <= UInt<1>("h00") @[pwm.scala 155:23]
            skip @[pwm.scala 153:38]
          else : @[pwm.scala 156:22]
            node _T_142 = eq(value_cur, UInt<32>("h00")) @[pwm.scala 158:35]
            when _T_142 : @[pwm.scala 158:50]
              value_cur <= value_reload @[pwm.scala 159:25]
              stop_out <= UInt<1>("h01") @[pwm.scala 160:25]
              skip @[pwm.scala 158:50]
            else : @[pwm.scala 161:25]
              value_cur <= value_cur_minus @[pwm.scala 162:25]
              stop_out <= UInt<1>("h00") @[pwm.scala 163:25]
              skip @[pwm.scala 161:25]
            skip @[pwm.scala 156:22]
          skip @[pwm.scala 151:20]
        skip @[pwm.scala 132:39]
    
  module Quad_Encoder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip quad_a : UInt<1>, flip quad_b : UInt<1>, flip raw_irq : UInt<1>, flip reg_count_we : UInt<1>, flip reg_count_di : UInt<32>, reg_count_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, reg_speed_do : SInt<16>, fb_period : UInt<1>}
    
    reg quad_a_delayed : UInt<3>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 35:33]
    reg quad_b_delayed : UInt<3>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 36:33]
    reg count_reg : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 37:33]
    reg count_reg_2 : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 38:33]
    reg period_count : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 39:33]
    reg speed_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[qei.scala 41:33]
    reg count_sel_2x : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[qei.scala 42:33]
    reg count_old : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 43:33]
    reg qei_output : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 44:33]
    reg qei_speed_count : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 45:33]
    reg qei_period_count : UInt<16>, clock with : (reset => (reset, UInt<13>("h01fff"))) @[qei.scala 46:33]
    reg period_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 47:33]
    io.reg_count_do <= count_reg @[qei.scala 49:23]
    node _T_51 = bits(quad_a_delayed, 1, 1) @[qei.scala 51:44]
    node _T_52 = bits(quad_a_delayed, 0, 0) @[qei.scala 51:63]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 30:58]
    node _T_54 = cat(_T_53, io.quad_a) @[Cat.scala 30:58]
    quad_a_delayed <= _T_54 @[qei.scala 51:23]
    node _T_55 = bits(quad_b_delayed, 1, 1) @[qei.scala 52:44]
    node _T_56 = bits(quad_b_delayed, 0, 0) @[qei.scala 52:63]
    node _T_57 = cat(_T_55, _T_56) @[Cat.scala 30:58]
    node _T_58 = cat(_T_57, io.quad_b) @[Cat.scala 30:58]
    quad_b_delayed <= _T_58 @[qei.scala 52:23]
    node _T_60 = bits(quad_a_delayed, 1, 1) @[qei.scala 54:57]
    node _T_61 = bits(quad_a_delayed, 2, 2) @[qei.scala 54:75]
    node _T_62 = xor(_T_60, _T_61) @[qei.scala 54:60]
    wire count_2x : UInt<1>
    count_2x <= _T_62
    node _T_64 = bits(quad_a_delayed, 1, 1) @[qei.scala 55:57]
    node _T_65 = bits(quad_a_delayed, 2, 2) @[qei.scala 55:75]
    node _T_66 = xor(_T_64, _T_65) @[qei.scala 55:60]
    node _T_67 = bits(quad_b_delayed, 1, 1) @[qei.scala 55:93]
    node _T_68 = xor(_T_66, _T_67) @[qei.scala 55:78]
    node _T_69 = bits(quad_b_delayed, 2, 2) @[qei.scala 55:111]
    node _T_70 = xor(_T_68, _T_69) @[qei.scala 55:96]
    wire count_4x : UInt<1>
    count_4x <= _T_70
    node _T_72 = bits(quad_a_delayed, 1, 1) @[qei.scala 56:57]
    node _T_73 = bits(quad_b_delayed, 2, 2) @[qei.scala 56:75]
    node _T_74 = xor(_T_72, _T_73) @[qei.scala 56:60]
    wire count_direction : UInt<1>
    count_direction <= _T_74
    node count_pulses = mux(count_sel_2x, count_2x, count_4x) @[qei.scala 57:29]
    when count_pulses : @[qei.scala 62:22]
      when count_direction : @[qei.scala 63:27]
        node _T_76 = add(count_reg, UInt<1>("h01")) @[qei.scala 64:36]
        node _T_77 = tail(_T_76, 1) @[qei.scala 64:36]
        count_reg <= _T_77 @[qei.scala 64:23]
        skip @[qei.scala 63:27]
      else : @[qei.scala 65:18]
        node _T_79 = sub(count_reg, UInt<1>("h01")) @[qei.scala 66:36]
        node _T_80 = asUInt(_T_79) @[qei.scala 66:36]
        node _T_81 = tail(_T_80, 1) @[qei.scala 66:36]
        count_reg <= _T_81 @[qei.scala 66:23]
        skip @[qei.scala 65:18]
      skip @[qei.scala 62:22]
    node _T_82 = or(io.raw_irq, count_pulses) @[qei.scala 71:20]
    when _T_82 : @[qei.scala 71:37]
      when io.raw_irq : @[qei.scala 72:23]
        qei_speed_count <= count_reg_2 @[qei.scala 73:23]
        count_reg_2 <= UInt<1>("h00") @[qei.scala 74:23]
        skip @[qei.scala 72:23]
      else : @[qei.scala 75:17]
        node _T_85 = add(count_reg_2, UInt<1>("h01")) @[qei.scala 76:38]
        node _T_86 = tail(_T_85, 1) @[qei.scala 76:38]
        count_reg_2 <= _T_86 @[qei.scala 76:23]
        skip @[qei.scala 75:17]
      skip @[qei.scala 71:37]
    when period_sel : @[qei.scala 81:20]
      when count_pulses : @[qei.scala 82:24]
        qei_period_count <= period_count @[qei.scala 83:24]
        period_count <= UInt<1>("h00") @[qei.scala 84:24]
        skip @[qei.scala 82:24]
      else : @[qei.scala 85:40]
        node _T_89 = eq(period_count, UInt<8>("h0ff")) @[qei.scala 85:29]
        when _T_89 : @[qei.scala 85:40]
          qei_period_count <= period_count @[qei.scala 86:24]
          period_count <= UInt<1>("h00") @[qei.scala 87:24]
          skip @[qei.scala 85:40]
        else : @[qei.scala 88:17]
          node _T_92 = add(period_count, UInt<1>("h01")) @[qei.scala 89:40]
          node _T_93 = tail(_T_92, 1) @[qei.scala 89:40]
          period_count <= _T_93 @[qei.scala 89:24]
          skip @[qei.scala 88:17]
      skip @[qei.scala 81:20]
    node _T_94 = mux(period_sel, qei_period_count, qei_speed_count) @[qei.scala 94:30]
    qei_output <= _T_94 @[qei.scala 94:24]
    node _T_96 = cat(speed_enable, count_sel_2x) @[Cat.scala 30:58]
    node _T_97 = cat(UInt<29>("h00"), period_sel) @[Cat.scala 30:58]
    node _T_98 = cat(_T_97, _T_96) @[Cat.scala 30:58]
    io.reg_cfg_do <= _T_98 @[qei.scala 97:24]
    node _T_99 = bits(qei_output, 15, 0) @[qei.scala 100:37]
    node _T_100 = asSInt(_T_99) @[qei.scala 100:50]
    io.reg_speed_do <= _T_100 @[qei.scala 100:24]
    io.fb_period <= period_sel @[qei.scala 101:24]
    when io.reg_count_we : @[qei.scala 103:25]
      count_reg <= io.reg_count_di @[qei.scala 104:24]
      skip @[qei.scala 103:25]
    else : @[qei.scala 105:28]
      when io.reg_cfg_we : @[qei.scala 105:28]
        node _T_101 = bits(io.reg_cfg_di, 0, 0) @[qei.scala 106:40]
        count_sel_2x <= _T_101 @[qei.scala 106:24]
        node _T_102 = bits(io.reg_cfg_di, 1, 1) @[qei.scala 107:40]
        speed_enable <= _T_102 @[qei.scala 107:24]
        node _T_103 = bits(io.reg_cfg_di, 2, 2) @[qei.scala 108:40]
        period_sel <= _T_103 @[qei.scala 108:24]
        skip @[qei.scala 105:28]
    
  module vedic_2x2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_1 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_2 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_3 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_4 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_5 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_6 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_7 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_9 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_10 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_11 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_8 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_9 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_10 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_11 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_12 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_13 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_14 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_15 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_12 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_13 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_14 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_15 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_1 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_2 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_3 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_16 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_17 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_18 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_19 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_16 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_17 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_18 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_19 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_20 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_21 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_22 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_23 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_20 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_21 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_22 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_23 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_24 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_25 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_26 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_27 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_24 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_25 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_26 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_27 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_28 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_29 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_30 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_31 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_28 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_29 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_30 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_31 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_4 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_5 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_6 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_7 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_32 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_33 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_34 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_35 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_32 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_33 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_34 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_35 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_36 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_37 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_38 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_39 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_9 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_36 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_37 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_38 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_39 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_40 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_41 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_42 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_43 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_10 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_40 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_41 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_42 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_43 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_44 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_45 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_46 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_47 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_11 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_44 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_45 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_46 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_47 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_8 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_9 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_10 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_11 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_48 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_49 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_50 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_51 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_12 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_48 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_49 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_50 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_51 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_1 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_2 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_12 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module vedic_2x2_52 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_53 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_54 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_55 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_13 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_52 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_53 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_54 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_55 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_56 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_57 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_58 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_59 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_14 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_56 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_57 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_58 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_59 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_60 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_61 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_62 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_63 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_15 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_60 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_61 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_62 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_63 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_64 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_65 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_66 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_67 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_16 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_64 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_65 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_66 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_67 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_13 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_14 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_15 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_16 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_68 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_69 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_70 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_71 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_17 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_68 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_69 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_70 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_71 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_72 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_73 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_74 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_75 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_18 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_72 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_73 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_74 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_75 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_76 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_77 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_78 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_79 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_19 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_76 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_77 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_78 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_79 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_80 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_81 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_82 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_83 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_20 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_80 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_81 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_82 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_83 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_17 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_18 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_19 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_20 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_84 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_85 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_86 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_87 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_21 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_84 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_85 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_86 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_87 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_88 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_89 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_90 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_91 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_22 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_88 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_89 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_90 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_91 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_92 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_93 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_94 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_95 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_23 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_92 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_93 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_94 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_95 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_96 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_97 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_98 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_99 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_24 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_96 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_97 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_98 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_99 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_21 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_22 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_23 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_24 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_100 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_101 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_102 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_103 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_25 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_100 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_101 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_102 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_103 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_3 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_4 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_5 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_25 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module vedic_2x2_104 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_105 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_106 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_107 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_26 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_104 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_105 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_106 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_107 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_108 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_109 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_110 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_111 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_27 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_108 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_109 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_110 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_111 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_112 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_113 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_114 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_115 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_28 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_112 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_113 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_114 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_115 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_116 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_117 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_118 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_119 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_29 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_116 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_117 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_118 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_119 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_26 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_27 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_28 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_29 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_120 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_121 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_122 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_123 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_30 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_120 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_121 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_122 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_123 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_124 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_125 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_126 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_127 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_31 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_124 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_125 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_126 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_127 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_128 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_129 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_130 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_131 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_32 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_128 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_129 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_130 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_131 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_132 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_133 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_134 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_135 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_33 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_132 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_133 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_134 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_135 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_30 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_31 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_32 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_33 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_136 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_137 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_138 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_139 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_34 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_136 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_137 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_138 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_139 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_140 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_141 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_142 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_143 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_35 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_140 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_141 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_142 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_143 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_144 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_145 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_146 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_147 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_36 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_144 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_145 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_146 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_147 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_148 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_149 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_150 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_151 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_37 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_148 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_149 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_150 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_151 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_34 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_35 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_36 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_37 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_152 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_153 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_154 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_155 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_38 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_152 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_153 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_154 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_155 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_6 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_7 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_8 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_38 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module PID_Controller : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip fb_period : UInt<1>, flip raw_irq : UInt<1>, flip reg_kp_we : UInt<1>, flip reg_kp_di : SInt<16>, reg_kp_do : SInt<16>, flip reg_ki_we : UInt<1>, flip reg_ki_di : SInt<16>, reg_ki_do : SInt<16>, flip reg_kd_we : UInt<1>, flip reg_kd_di : SInt<16>, reg_kd_do : SInt<16>, flip reg_ref_we : UInt<1>, flip reg_ref_di : SInt<16>, reg_ref_do : SInt<16>, flip reg_fb_we : UInt<1>, flip reg_fb_di : SInt<16>, reg_fb_do : SInt<16>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : SInt<16>, reg_cfg_do : SInt<16>, flip speed_fb_in : SInt<16>, pid_out : SInt<16>}
    
    reg kp : SInt<16>, clock with : (reset => (reset, asSInt(UInt<2>("h01")))) @[pid.scala 56:26]
    reg ki : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 57:26]
    reg kd : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 58:26]
    reg ref : SInt<16>, clock with : (reset => (reset, asSInt(UInt<6>("h014")))) @[pid.scala 59:26]
    reg feedback : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 60:26]
    reg sigma_old : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 61:26]
    reg fb_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pid.scala 62:26]
    reg e_prev1 : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 64:26]
    reg e_prev2 : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 65:26]
    reg reg_pid_out : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 66:28]
    io.reg_kp_do <= kp @[pid.scala 69:17]
    when io.reg_kp_we : @[pid.scala 70:22]
      kp <= io.reg_kp_di @[pid.scala 71:8]
      skip @[pid.scala 70:22]
    io.reg_ki_do <= ki @[pid.scala 74:17]
    when io.reg_ki_we : @[pid.scala 75:22]
      ki <= io.reg_ki_di @[pid.scala 76:8]
      skip @[pid.scala 75:22]
    io.reg_kd_do <= kd @[pid.scala 79:17]
    when io.reg_kd_we : @[pid.scala 80:22]
      kd <= io.reg_kd_di @[pid.scala 81:8]
      skip @[pid.scala 80:22]
    io.reg_ref_do <= ref @[pid.scala 85:17]
    when io.reg_ref_we : @[pid.scala 86:23]
      ref <= io.reg_ref_di @[pid.scala 87:9]
      skip @[pid.scala 86:23]
    io.reg_fb_do <= feedback @[pid.scala 90:17]
    when fb_sel : @[pid.scala 92:16]
      when io.reg_fb_we : @[pid.scala 93:24]
        feedback <= io.reg_fb_di @[pid.scala 94:15]
        skip @[pid.scala 93:24]
      skip @[pid.scala 92:16]
    else : @[pid.scala 96:14]
      feedback <= io.speed_fb_in @[pid.scala 97:15]
      skip @[pid.scala 96:14]
    node _T_70 = cat(UInt<31>("h00"), fb_sel) @[Cat.scala 30:58]
    node _T_71 = asSInt(_T_70) @[pid.scala 100:49]
    io.reg_cfg_do <= _T_71 @[pid.scala 100:17]
    when io.reg_cfg_we : @[pid.scala 101:23]
      node _T_72 = bits(io.reg_cfg_di, 0, 0) @[pid.scala 102:28]
      fb_sel <= _T_72 @[pid.scala 102:12]
      skip @[pid.scala 101:23]
    node _T_73 = sub(e_prev1, e_prev2) @[pid.scala 106:27]
    node _T_74 = tail(_T_73, 1) @[pid.scala 106:27]
    node delta_err = asSInt(_T_74) @[pid.scala 106:27]
    node _T_75 = add(e_prev1, sigma_old) @[pid.scala 107:27]
    node _T_76 = tail(_T_75, 1) @[pid.scala 107:27]
    node sigma_new = asSInt(_T_76) @[pid.scala 107:27]
    inst mul_kp of vedic_16x16 @[pid.scala 110:25]
    mul_kp.clock <= clock
    mul_kp.reset <= reset
    mul_kp.io.a <= e_prev1 @[pid.scala 111:17]
    node _T_77 = asUInt(kp) @[pid.scala 112:29]
    mul_kp.io.b <= _T_77 @[pid.scala 112:17]
    node _T_78 = bits(mul_kp.io.c, 15, 0) @[pid.scala 113:30]
    node prop_out = asSInt(_T_78) @[pid.scala 113:43]
    inst mul_ki of vedic_16x16_1 @[pid.scala 116:25]
    mul_ki.clock <= clock
    mul_ki.reset <= reset
    mul_ki.io.a <= sigma_new @[pid.scala 117:17]
    node _T_79 = asUInt(ki) @[pid.scala 118:29]
    mul_ki.io.b <= _T_79 @[pid.scala 118:17]
    node _T_80 = bits(mul_ki.io.c, 15, 0) @[pid.scala 119:33]
    node integral_out = asSInt(_T_80) @[pid.scala 119:46]
    inst mul_kd of vedic_16x16_2 @[pid.scala 122:25]
    mul_kd.clock <= clock
    mul_kd.reset <= reset
    mul_kd.io.a <= delta_err @[pid.scala 123:17]
    node _T_81 = asUInt(kd) @[pid.scala 124:29]
    mul_kd.io.b <= _T_81 @[pid.scala 124:17]
    node _T_82 = bits(mul_kd.io.c, 15, 0) @[pid.scala 125:35]
    node derivative_out = asSInt(_T_82) @[pid.scala 125:48]
    node _T_83 = add(prop_out, integral_out) @[pid.scala 128:28]
    node _T_84 = tail(_T_83, 1) @[pid.scala 128:28]
    node pi_sum = asSInt(_T_84) @[pid.scala 128:28]
    node _T_85 = bits(prop_out, 15, 15) @[pid.scala 129:34]
    node _T_86 = bits(integral_out, 15, 15) @[pid.scala 129:54]
    node _T_87 = and(_T_85, _T_86) @[pid.scala 129:39]
    node _T_88 = bits(pi_sum, 15, 15) @[pid.scala 129:69]
    node _T_90 = eq(_T_88, UInt<1>("h00")) @[pid.scala 129:62]
    node _T_91 = and(_T_87, _T_90) @[pid.scala 129:59]
    node _T_92 = bits(prop_out, 15, 15) @[pid.scala 130:35]
    node _T_94 = eq(_T_92, UInt<1>("h00")) @[pid.scala 130:26]
    node _T_95 = bits(integral_out, 15, 15) @[pid.scala 130:56]
    node _T_97 = eq(_T_95, UInt<1>("h00")) @[pid.scala 130:43]
    node _T_98 = and(_T_94, _T_97) @[pid.scala 130:40]
    node _T_99 = bits(pi_sum, 15, 15) @[pid.scala 130:70]
    node _T_100 = and(_T_98, _T_99) @[pid.scala 130:61]
    node pi_sum_overflow = or(_T_91, _T_100) @[pid.scala 129:75]
    when io.raw_irq : @[pid.scala 132:20]
      when io.fb_period : @[pid.scala 134:23]
        node _T_101 = sub(feedback, ref) @[pid.scala 135:29]
        node _T_102 = tail(_T_101, 1) @[pid.scala 135:29]
        node _T_103 = asSInt(_T_102) @[pid.scala 135:29]
        e_prev1 <= _T_103 @[pid.scala 135:17]
        skip @[pid.scala 134:23]
      else : @[pid.scala 136:16]
        node _T_104 = sub(ref, feedback) @[pid.scala 137:24]
        node _T_105 = tail(_T_104, 1) @[pid.scala 137:24]
        node _T_106 = asSInt(_T_105) @[pid.scala 137:24]
        e_prev1 <= _T_106 @[pid.scala 137:17]
        skip @[pid.scala 136:16]
      e_prev2 <= e_prev1 @[pid.scala 139:17]
      sigma_old <= sigma_new @[pid.scala 140:17]
      node _T_107 = add(pi_sum, derivative_out) @[pid.scala 141:27]
      node _T_108 = tail(_T_107, 1) @[pid.scala 141:27]
      node _T_109 = asSInt(_T_108) @[pid.scala 141:27]
      reg_pid_out <= _T_109 @[pid.scala 141:17]
      skip @[pid.scala 132:20]
    node _T_110 = bits(reg_pid_out, 15, 15) @[pid.scala 144:54]
    node _T_111 = or(pi_sum_overflow, _T_110) @[pid.scala 144:40]
    node _T_113 = mux(_T_111, asSInt(UInt<1>("h00")), reg_pid_out) @[pid.scala 144:23]
    io.pid_out <= _T_113 @[pid.scala 144:17]
    
  module Motor_Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {wbs : {flip m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}, motor_gpio : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, flip motor_select : UInt<1>, motor_irq : UInt<1>}
    
    inst interlink of Interlink_Module @[motor_top.scala 41:26]
    interlink.clock <= clock
    interlink.reset <= reset
    interlink.io.motor_select <= io.motor_select @[motor_top.scala 45:29]
    interlink.io.bus_stb_i <= io.wbs.m2s.stb @[motor_top.scala 48:29]
    interlink.io.bus_cyc_i <= io.wbs.m2s.cyc @[motor_top.scala 49:29]
    interlink.io.bus_adr_i <= io.wbs.m2s.addr @[motor_top.scala 50:29]
    interlink.io.bus_sel_i <= io.wbs.m2s.sel @[motor_top.scala 51:29]
    interlink.io.bus_we_i <= io.wbs.m2s.we @[motor_top.scala 52:29]
    io.wbs.data_o <= interlink.io.bus_dat_o @[motor_top.scala 53:29]
    io.wbs.ack_o <= interlink.io.bus_ack_o @[motor_top.scala 54:29]
    inst pwm of PWM @[motor_top.scala 57:37]
    pwm.clock <= clock
    pwm.reset <= reset
    pwm.io.reg_val_we <= interlink.io.tmr_val_we @[motor_top.scala 59:29]
    pwm.io.reg_val_di <= io.wbs.m2s.data @[motor_top.scala 60:29]
    interlink.io.tmr_val_do <= pwm.io.reg_val_do @[motor_top.scala 61:29]
    pwm.io.reg_cfg_we <= interlink.io.tmr_cfg_we @[motor_top.scala 63:29]
    pwm.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 64:29]
    interlink.io.tmr_cfg_do <= pwm.io.reg_cfg_do @[motor_top.scala 65:29]
    pwm.io.reg_dat_we <= interlink.io.tmr_dat_we @[motor_top.scala 67:29]
    pwm.io.reg_dat_di <= io.wbs.m2s.data @[motor_top.scala 68:29]
    interlink.io.tmr_dat_do <= pwm.io.reg_dat_do @[motor_top.scala 69:29]
    pwm.io.reg_duty_we <= interlink.io.tmr_duty_we @[motor_top.scala 70:29]
    pwm.io.reg_duty_di <= io.wbs.m2s.data @[motor_top.scala 71:29]
    interlink.io.tmr_duty_do <= pwm.io.reg_duty_do @[motor_top.scala 72:29]
    wire pid_out : SInt<16> @[motor_top.scala 75:35]
    pwm.io.reg_pid_out <= pid_out @[motor_top.scala 77:29]
    io.motor_irq <= pwm.io.irq_out @[motor_top.scala 78:29]
    io.motor_gpio.pwm_high <= pwm.io.pwm_h @[motor_top.scala 81:29]
    io.motor_gpio.pwm_low <= pwm.io.pwm_l @[motor_top.scala 82:29]
    inst qei of Quad_Encoder @[motor_top.scala 86:37]
    qei.clock <= clock
    qei.reset <= reset
    qei.io.quad_a <= io.motor_gpio.qei_ch_a @[motor_top.scala 87:29]
    qei.io.quad_b <= io.motor_gpio.qei_ch_b @[motor_top.scala 88:29]
    qei.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 89:29]
    qei.io.reg_count_we <= interlink.io.qei_count_we @[motor_top.scala 91:29]
    qei.io.reg_count_di <= io.wbs.m2s.data @[motor_top.scala 92:29]
    interlink.io.qei_count_do <= qei.io.reg_count_do @[motor_top.scala 93:29]
    qei.io.reg_cfg_we <= interlink.io.qei_cfg_we @[motor_top.scala 95:29]
    qei.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 96:29]
    interlink.io.qei_cfg_do <= qei.io.reg_cfg_do @[motor_top.scala 97:29]
    interlink.io.qei_speed_do <= qei.io.reg_speed_do @[motor_top.scala 99:29]
    inst pid of PID_Controller @[motor_top.scala 102:37]
    pid.clock <= clock
    pid.reset <= reset
    pid.io.fb_period <= qei.io.fb_period @[motor_top.scala 103:29]
    pid.io.speed_fb_in <= qei.io.reg_speed_do @[motor_top.scala 104:29]
    pid.io.reg_kp_we <= interlink.io.pid_kp_we @[motor_top.scala 106:29]
    node _T_48 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 107:41]
    node _T_49 = asSInt(_T_48) @[motor_top.scala 107:53]
    pid.io.reg_kp_di <= _T_49 @[motor_top.scala 107:29]
    interlink.io.pid_kp_do <= pid.io.reg_kp_do @[motor_top.scala 108:29]
    pid.io.reg_ki_we <= interlink.io.pid_ki_we @[motor_top.scala 110:29]
    node _T_50 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 111:41]
    node _T_51 = asSInt(_T_50) @[motor_top.scala 111:53]
    pid.io.reg_ki_di <= _T_51 @[motor_top.scala 111:29]
    interlink.io.pid_ki_do <= pid.io.reg_ki_do @[motor_top.scala 112:29]
    pid.io.reg_kd_we <= interlink.io.pid_kd_we @[motor_top.scala 114:29]
    node _T_52 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 115:41]
    node _T_53 = asSInt(_T_52) @[motor_top.scala 115:53]
    pid.io.reg_kd_di <= _T_53 @[motor_top.scala 115:29]
    interlink.io.pid_kd_do <= pid.io.reg_kd_do @[motor_top.scala 116:29]
    pid.io.reg_ref_we <= interlink.io.pid_ref_we @[motor_top.scala 118:29]
    node _T_54 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 119:41]
    node _T_55 = asSInt(_T_54) @[motor_top.scala 119:54]
    pid.io.reg_ref_di <= _T_55 @[motor_top.scala 119:29]
    interlink.io.pid_ref_do <= pid.io.reg_ref_do @[motor_top.scala 120:29]
    pid.io.reg_fb_we <= interlink.io.pid_fb_we @[motor_top.scala 122:29]
    node _T_56 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 123:41]
    node _T_57 = asSInt(_T_56) @[motor_top.scala 123:54]
    pid.io.reg_fb_di <= _T_57 @[motor_top.scala 123:29]
    interlink.io.pid_fb_do <= pid.io.reg_fb_do @[motor_top.scala 124:29]
    pid.io.reg_cfg_we <= interlink.io.pid_cfg_we @[motor_top.scala 126:29]
    node _T_58 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 127:41]
    node _T_59 = asSInt(_T_58) @[motor_top.scala 127:54]
    pid.io.reg_cfg_di <= _T_59 @[motor_top.scala 127:29]
    interlink.io.pid_cfg_do <= pid.io.reg_cfg_do @[motor_top.scala 128:29]
    pid_out <= pid.io.pid_out @[motor_top.scala 130:29]
    pid.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 131:29]
    
  module Interlink_Module_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip bus_adr_i : UInt<32>, flip bus_sel_i : UInt<4>, flip bus_we_i : UInt<1>, flip bus_cyc_i : UInt<1>, flip bus_stb_i : UInt<1>, bus_ack_o : UInt<1>, bus_dat_o : UInt<32>, tmr_val_we : UInt<1>, flip tmr_val_do : UInt<32>, tmr_dat_we : UInt<1>, flip tmr_dat_do : UInt<32>, tmr_duty_we : UInt<1>, flip tmr_duty_do : UInt<32>, tmr_cfg_we : UInt<1>, flip tmr_cfg_do : UInt<32>, qei_count_we : UInt<1>, flip qei_count_do : UInt<32>, qei_cfg_we : UInt<1>, flip qei_cfg_do : UInt<32>, flip qei_speed_do : SInt<16>, pid_kp_we : UInt<1>, flip pid_kp_do : SInt<16>, pid_ki_we : UInt<1>, flip pid_ki_do : SInt<16>, pid_kd_we : UInt<1>, flip pid_kd_do : SInt<16>, pid_ref_we : UInt<1>, flip pid_ref_do : SInt<16>, pid_fb_we : UInt<1>, flip pid_fb_do : SInt<16>, pid_cfg_we : UInt<1>, flip pid_cfg_do : SInt<16>, flip motor_select : UInt<1>}
    
    node _T_72 = and(io.bus_stb_i, io.bus_cyc_i) @[interlink.scala 89:53]
    wire bus_valid : UInt<1>
    bus_valid <= _T_72
    wire tmr_cfg_do : UInt<32> @[interlink.scala 92:27]
    wire tmr_val_do : UInt<32> @[interlink.scala 93:27]
    wire tmr_dat_do : UInt<32> @[interlink.scala 94:27]
    wire tmr_duty_do : UInt<32> @[interlink.scala 95:27]
    node reg_offset = bits(io.bus_adr_i, 11, 0) @[interlink.scala 98:35]
    node _T_78 = and(bus_valid, io.motor_select) @[interlink.scala 100:50]
    node _T_79 = eq(reg_offset, UInt<12>("h00")) @[interlink.scala 100:81]
    node _T_80 = and(_T_78, _T_79) @[interlink.scala 100:66]
    wire tmr_cfg_sel : UInt<1>
    tmr_cfg_sel <= _T_80
    node _T_82 = and(bus_valid, io.motor_select) @[interlink.scala 101:50]
    node _T_83 = eq(reg_offset, UInt<12>("h04")) @[interlink.scala 101:81]
    node _T_84 = and(_T_82, _T_83) @[interlink.scala 101:66]
    wire tmr_val_sel : UInt<1>
    tmr_val_sel <= _T_84
    node _T_86 = and(bus_valid, io.motor_select) @[interlink.scala 102:50]
    node _T_87 = eq(reg_offset, UInt<12>("h08")) @[interlink.scala 102:81]
    node _T_88 = and(_T_86, _T_87) @[interlink.scala 102:66]
    wire tmr_dat_sel : UInt<1>
    tmr_dat_sel <= _T_88
    node _T_90 = and(bus_valid, io.motor_select) @[interlink.scala 103:50]
    node _T_91 = eq(reg_offset, UInt<12>("h0c")) @[interlink.scala 103:81]
    node _T_92 = and(_T_90, _T_91) @[interlink.scala 103:66]
    wire tmr_duty_sel : UInt<1>
    tmr_duty_sel <= _T_92
    node _T_94 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 105:72]
    node _T_95 = and(_T_94, io.bus_we_i) @[interlink.scala 105:76]
    node _T_97 = mux(tmr_cfg_sel, _T_95, UInt<1>("h00")) @[interlink.scala 105:43]
    wire tmr_cfg_we : UInt<1>
    tmr_cfg_we <= _T_97
    node _T_99 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 106:72]
    node _T_100 = and(_T_99, io.bus_we_i) @[interlink.scala 106:76]
    node _T_102 = mux(tmr_val_sel, _T_100, UInt<1>("h00")) @[interlink.scala 106:43]
    wire tmr_val_we : UInt<1>
    tmr_val_we <= _T_102
    node _T_104 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 107:72]
    node _T_105 = and(_T_104, io.bus_we_i) @[interlink.scala 107:76]
    node _T_107 = mux(tmr_dat_sel, _T_105, UInt<1>("h00")) @[interlink.scala 107:43]
    wire tmr_dat_we : UInt<1>
    tmr_dat_we <= _T_107
    node _T_109 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 108:73]
    node _T_110 = and(_T_109, io.bus_we_i) @[interlink.scala 108:77]
    node _T_112 = mux(tmr_duty_sel, _T_110, UInt<1>("h00")) @[interlink.scala 108:43]
    wire tmr_duty_we : UInt<1>
    tmr_duty_we <= _T_112
    node _T_115 = neq(io.bus_sel_i, UInt<1>("h00")) @[interlink.scala 110:71]
    node _T_117 = eq(_T_115, UInt<1>("h00")) @[interlink.scala 110:56]
    node _T_118 = and(tmr_dat_sel, _T_117) @[interlink.scala 110:52]
    node _T_119 = not(io.bus_we_i) @[interlink.scala 110:84]
    node _T_120 = and(_T_118, _T_119) @[interlink.scala 110:80]
    wire reg_dat_re : UInt<1>
    reg_dat_re <= _T_120
    node _T_121 = or(tmr_cfg_sel, tmr_val_sel) @[interlink.scala 112:35]
    node _T_122 = or(_T_121, tmr_dat_sel) @[interlink.scala 112:50]
    node tmr_sel = or(_T_122, tmr_duty_sel) @[interlink.scala 112:65]
    node _T_123 = mux(tmr_duty_sel, tmr_duty_do, tmr_dat_do) @[interlink.scala 114:26]
    node _T_124 = mux(tmr_val_sel, tmr_val_do, _T_123) @[interlink.scala 113:57]
    node tmr_do = mux(tmr_cfg_sel, tmr_cfg_do, _T_124) @[interlink.scala 113:26]
    wire qei_count_do : UInt<32> @[interlink.scala 117:27]
    node _T_127 = and(bus_valid, io.motor_select) @[interlink.scala 118:50]
    node _T_128 = eq(reg_offset, UInt<12>("h0100")) @[interlink.scala 118:81]
    node _T_129 = and(_T_127, _T_128) @[interlink.scala 118:66]
    wire qei_count_sel : UInt<1>
    qei_count_sel <= _T_129
    node _T_131 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 119:74]
    node _T_132 = and(_T_131, io.bus_we_i) @[interlink.scala 119:78]
    node _T_134 = mux(qei_count_sel, _T_132, UInt<1>("h00")) @[interlink.scala 119:43]
    wire qei_count_we : UInt<1>
    qei_count_we <= _T_134
    wire qei_cfg_do : UInt<32> @[interlink.scala 121:27]
    node _T_137 = and(bus_valid, io.motor_select) @[interlink.scala 122:50]
    node _T_138 = eq(reg_offset, UInt<12>("h0108")) @[interlink.scala 122:81]
    node _T_139 = and(_T_137, _T_138) @[interlink.scala 122:66]
    wire qei_cfg_sel : UInt<1>
    qei_cfg_sel <= _T_139
    node _T_141 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 123:72]
    node _T_142 = and(_T_141, io.bus_we_i) @[interlink.scala 123:76]
    node _T_144 = mux(qei_cfg_sel, _T_142, UInt<1>("h00")) @[interlink.scala 123:43]
    wire qei_cfg_we : UInt<1>
    qei_cfg_we <= _T_144
    wire qei_speed_do : UInt<32> @[interlink.scala 125:27]
    node _T_147 = and(bus_valid, io.motor_select) @[interlink.scala 126:50]
    node _T_148 = eq(reg_offset, UInt<12>("h0104")) @[interlink.scala 126:81]
    node _T_149 = and(_T_147, _T_148) @[interlink.scala 126:66]
    wire qei_speed_sel : UInt<1>
    qei_speed_sel <= _T_149
    node _T_151 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 127:74]
    node _T_152 = and(_T_151, io.bus_we_i) @[interlink.scala 127:78]
    node _T_154 = mux(qei_speed_sel, _T_152, UInt<1>("h00")) @[interlink.scala 127:43]
    wire qei_speed_we : UInt<1>
    qei_speed_we <= _T_154
    node _T_155 = or(qei_count_sel, qei_cfg_sel) @[interlink.scala 130:37]
    node qei_sel = or(_T_155, qei_speed_sel) @[interlink.scala 130:52]
    node _T_156 = mux(qei_cfg_sel, qei_cfg_do, qei_count_do) @[interlink.scala 131:59]
    node qei_do = mux(qei_speed_sel, qei_speed_do, _T_156) @[interlink.scala 131:26]
    wire pid_kp_do : SInt<16> @[interlink.scala 134:27]
    node _T_159 = and(bus_valid, io.motor_select) @[interlink.scala 135:50]
    node _T_160 = eq(reg_offset, UInt<12>("h0200")) @[interlink.scala 135:81]
    node _T_161 = and(_T_159, _T_160) @[interlink.scala 135:66]
    wire pid_kp_sel : UInt<1>
    pid_kp_sel <= _T_161
    node _T_163 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 136:71]
    node _T_164 = and(_T_163, io.bus_we_i) @[interlink.scala 136:75]
    node _T_166 = mux(pid_kp_sel, _T_164, UInt<1>("h00")) @[interlink.scala 136:43]
    wire pid_kp_we : UInt<1>
    pid_kp_we <= _T_166
    wire pid_ki_do : SInt<16> @[interlink.scala 138:27]
    node _T_169 = and(bus_valid, io.motor_select) @[interlink.scala 139:50]
    node _T_170 = eq(reg_offset, UInt<12>("h0204")) @[interlink.scala 139:81]
    node _T_171 = and(_T_169, _T_170) @[interlink.scala 139:66]
    wire pid_ki_sel : UInt<1>
    pid_ki_sel <= _T_171
    node _T_173 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 140:71]
    node _T_174 = and(_T_173, io.bus_we_i) @[interlink.scala 140:75]
    node _T_176 = mux(pid_ki_sel, _T_174, UInt<1>("h00")) @[interlink.scala 140:43]
    wire pid_ki_we : UInt<1>
    pid_ki_we <= _T_176
    wire pid_kd_do : SInt<16> @[interlink.scala 142:27]
    node _T_179 = and(bus_valid, io.motor_select) @[interlink.scala 143:50]
    node _T_180 = eq(reg_offset, UInt<12>("h0208")) @[interlink.scala 143:81]
    node _T_181 = and(_T_179, _T_180) @[interlink.scala 143:66]
    wire pid_kd_sel : UInt<1>
    pid_kd_sel <= _T_181
    node _T_183 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 144:71]
    node _T_184 = and(_T_183, io.bus_we_i) @[interlink.scala 144:75]
    node _T_186 = mux(pid_kd_sel, _T_184, UInt<1>("h00")) @[interlink.scala 144:43]
    wire pid_kd_we : UInt<1>
    pid_kd_we <= _T_186
    wire pid_ref_do : SInt<16> @[interlink.scala 146:27]
    node _T_189 = and(bus_valid, io.motor_select) @[interlink.scala 147:50]
    node _T_190 = eq(reg_offset, UInt<12>("h020c")) @[interlink.scala 147:81]
    node _T_191 = and(_T_189, _T_190) @[interlink.scala 147:66]
    wire pid_ref_sel : UInt<1>
    pid_ref_sel <= _T_191
    node _T_193 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 148:72]
    node _T_194 = and(_T_193, io.bus_we_i) @[interlink.scala 148:76]
    node _T_196 = mux(pid_ref_sel, _T_194, UInt<1>("h00")) @[interlink.scala 148:43]
    wire pid_ref_we : UInt<1>
    pid_ref_we <= _T_196
    wire pid_fb_do : SInt<16> @[interlink.scala 150:27]
    node _T_199 = and(bus_valid, io.motor_select) @[interlink.scala 151:50]
    node _T_200 = eq(reg_offset, UInt<12>("h0210")) @[interlink.scala 151:81]
    node _T_201 = and(_T_199, _T_200) @[interlink.scala 151:66]
    wire pid_fb_sel : UInt<1>
    pid_fb_sel <= _T_201
    node _T_203 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 152:71]
    node _T_204 = and(_T_203, io.bus_we_i) @[interlink.scala 152:75]
    node _T_206 = mux(pid_fb_sel, _T_204, UInt<1>("h00")) @[interlink.scala 152:43]
    wire pid_fb_we : UInt<1>
    pid_fb_we <= _T_206
    wire pid_cfg_do : SInt<16> @[interlink.scala 154:27]
    node _T_209 = and(bus_valid, io.motor_select) @[interlink.scala 155:50]
    node _T_210 = eq(reg_offset, UInt<12>("h0214")) @[interlink.scala 155:81]
    node _T_211 = and(_T_209, _T_210) @[interlink.scala 155:66]
    wire pid_cfg_sel : UInt<1>
    pid_cfg_sel <= _T_211
    node _T_213 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 156:72]
    node _T_214 = and(_T_213, io.bus_we_i) @[interlink.scala 156:76]
    node _T_216 = mux(pid_cfg_sel, _T_214, UInt<1>("h00")) @[interlink.scala 156:43]
    wire pid_cfg_we : UInt<1>
    pid_cfg_we <= _T_216
    node _T_217 = or(pid_kp_sel, pid_ki_sel) @[interlink.scala 158:34]
    node _T_218 = or(_T_217, pid_kd_sel) @[interlink.scala 158:48]
    node _T_219 = or(_T_218, pid_ref_sel) @[interlink.scala 158:62]
    node _T_220 = or(_T_219, pid_fb_sel) @[interlink.scala 158:77]
    node pid_sel = or(_T_220, pid_cfg_sel) @[interlink.scala 158:91]
    node _T_221 = mux(pid_fb_sel, pid_fb_do, pid_cfg_do) @[interlink.scala 162:46]
    node _T_222 = mux(pid_ref_sel, pid_ref_do, _T_221) @[interlink.scala 161:46]
    node _T_223 = mux(pid_kd_sel, pid_kd_do, _T_222) @[interlink.scala 160:46]
    node _T_224 = mux(pid_ki_sel, pid_ki_do, _T_223) @[interlink.scala 159:53]
    node pid_do = mux(pid_kp_sel, pid_kp_do, _T_224) @[interlink.scala 159:26]
    reg wb_ack_o : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[interlink.scala 165:30]
    reg wb_data_o : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[interlink.scala 166:30]
    node _T_229 = asUInt(pid_do) @[interlink.scala 167:92]
    node _T_231 = mux(pid_sel, _T_229, UInt<1>("h00")) @[interlink.scala 167:69]
    node _T_232 = mux(qei_sel, qei_do, _T_231) @[interlink.scala 167:48]
    node _T_233 = mux(tmr_sel, tmr_do, _T_232) @[interlink.scala 167:27]
    wb_data_o <= _T_233 @[interlink.scala 167:21]
    node _T_234 = or(tmr_sel, qei_sel) @[interlink.scala 168:32]
    node _T_235 = or(_T_234, pid_sel) @[interlink.scala 168:43]
    wb_ack_o <= _T_235 @[interlink.scala 168:21]
    io.bus_dat_o <= wb_data_o @[interlink.scala 170:21]
    io.bus_ack_o <= wb_ack_o @[interlink.scala 171:21]
    io.tmr_val_we <= tmr_val_we @[interlink.scala 174:21]
    tmr_val_do <= io.tmr_val_do @[interlink.scala 175:21]
    io.tmr_dat_we <= tmr_dat_we @[interlink.scala 176:21]
    tmr_dat_do <= io.tmr_dat_do @[interlink.scala 177:21]
    io.tmr_duty_we <= tmr_duty_we @[interlink.scala 178:21]
    tmr_duty_do <= io.tmr_duty_do @[interlink.scala 179:21]
    io.tmr_cfg_we <= tmr_cfg_we @[interlink.scala 180:21]
    tmr_cfg_do <= io.tmr_cfg_do @[interlink.scala 181:21]
    io.qei_count_we <= qei_count_we @[interlink.scala 183:21]
    qei_count_do <= io.qei_count_do @[interlink.scala 184:21]
    io.qei_cfg_we <= qei_cfg_we @[interlink.scala 185:21]
    qei_cfg_do <= io.qei_cfg_do @[interlink.scala 186:21]
    node _T_236 = asUInt(io.qei_speed_do) @[interlink.scala 187:46]
    qei_speed_do <= _T_236 @[interlink.scala 187:21]
    io.pid_kp_we <= pid_kp_we @[interlink.scala 189:21]
    pid_kp_do <= io.pid_kp_do @[interlink.scala 190:21]
    io.pid_ki_we <= pid_ki_we @[interlink.scala 191:21]
    pid_ki_do <= io.pid_ki_do @[interlink.scala 192:21]
    io.pid_kd_we <= pid_kd_we @[interlink.scala 193:21]
    pid_kd_do <= io.pid_kd_do @[interlink.scala 194:21]
    io.pid_ref_we <= pid_ref_we @[interlink.scala 195:21]
    pid_ref_do <= io.pid_ref_do @[interlink.scala 196:21]
    io.pid_fb_we <= pid_fb_we @[interlink.scala 197:21]
    pid_fb_do <= io.pid_fb_do @[interlink.scala 198:21]
    io.pid_cfg_we <= pid_cfg_we @[interlink.scala 199:21]
    pid_cfg_do <= io.pid_cfg_do @[interlink.scala 200:21]
    
  module PWM_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reg_val_we : UInt<1>, flip reg_val_di : UInt<32>, reg_val_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, flip reg_dat_we : UInt<1>, flip reg_dat_di : UInt<32>, reg_dat_do : UInt<32>, flip reg_duty_we : UInt<1>, flip reg_duty_di : UInt<32>, reg_duty_do : UInt<32>, flip reg_pid_out : SInt<16>, pwm_h : UInt<1>, pwm_l : UInt<1>, irq_out : UInt<1>, rawirq_out : UInt<1>}
    
    reg value_cur : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 44:32]
    reg value_reload : UInt<32>, clock with : (reset => (reset, UInt<8>("h0ff"))) @[pwm.scala 45:32]
    reg pwm_duty : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 46:32]
    reg reg_duty : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 47:32]
    wire value_cur_plus : UInt<32> @[pwm.scala 50:29]
    wire value_cur_minus : UInt<32> @[pwm.scala 51:29]
    wire loc_enable : UInt<1> @[pwm.scala 53:29]
    reg enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 54:32]
    reg stop_out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 56:32]
    reg irq_out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 57:32]
    reg lastenable : UInt<1>, clock @[pwm.scala 60:28]
    reg updown : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 63:32]
    reg irq_ena : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 66:32]
    reg pid_out_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 69:32]
    reg pwm_db : UInt<4>, clock with : (reset => (reset, UInt<2>("h02"))) @[pwm.scala 72:32]
    io.reg_duty_do <= pwm_duty @[pwm.scala 75:23]
    when io.reg_duty_we : @[pwm.scala 76:24]
      reg_duty <= io.reg_duty_di @[pwm.scala 77:14]
      skip @[pwm.scala 76:24]
    when stop_out : @[pwm.scala 80:18]
      when pid_out_sel : @[pwm.scala 81:22]
        node _T_65 = asUInt(io.reg_pid_out) @[pwm.scala 82:40]
        pwm_duty <= _T_65 @[pwm.scala 82:16]
        skip @[pwm.scala 81:22]
      else : @[pwm.scala 83:16]
        pwm_duty <= reg_duty @[pwm.scala 84:16]
        skip @[pwm.scala 83:16]
      skip @[pwm.scala 80:18]
    reg proc_offset : UInt<32>, clock @[pwm.scala 88:24]
    reg pwm_ld : UInt<1>, clock @[pwm.scala 89:24]
    reg pwm_hd : UInt<1>, clock @[pwm.scala 90:24]
    node pwm_db_twice = dshl(pwm_db, UInt<1>("h01")) @[pwm.scala 93:30]
    node _T_70 = geq(pwm_duty, pwm_db_twice) @[pwm.scala 95:37]
    node _T_71 = sub(value_reload, pwm_db_twice) @[pwm.scala 95:84]
    node _T_72 = asUInt(_T_71) @[pwm.scala 95:84]
    node _T_73 = tail(_T_72, 1) @[pwm.scala 95:84]
    node _T_74 = leq(pwm_duty, _T_73) @[pwm.scala 95:67]
    node _T_75 = and(_T_70, _T_74) @[pwm.scala 95:54]
    node _T_76 = lt(pwm_duty, pwm_db_twice) @[pwm.scala 96:36]
    node _T_77 = sub(value_reload, pwm_db_twice) @[pwm.scala 96:80]
    node _T_78 = asUInt(_T_77) @[pwm.scala 96:80]
    node _T_79 = tail(_T_78, 1) @[pwm.scala 96:80]
    node _T_80 = mux(_T_76, pwm_db_twice, _T_79) @[pwm.scala 96:26]
    node _T_81 = mux(_T_75, pwm_duty, _T_80) @[pwm.scala 95:26]
    proc_offset <= _T_81 @[pwm.scala 95:20]
    node _T_82 = sub(proc_offset, pwm_db) @[pwm.scala 97:48]
    node _T_83 = asUInt(_T_82) @[pwm.scala 97:48]
    node _T_84 = tail(_T_83, 1) @[pwm.scala 97:48]
    node _T_85 = lt(value_cur, _T_84) @[pwm.scala 97:33]
    pwm_hd <= _T_85 @[pwm.scala 97:20]
    node _T_86 = gt(value_cur, proc_offset) @[pwm.scala 98:34]
    node _T_87 = sub(value_reload, pwm_db) @[pwm.scala 98:79]
    node _T_88 = asUInt(_T_87) @[pwm.scala 98:79]
    node _T_89 = tail(_T_88, 1) @[pwm.scala 98:79]
    node _T_90 = lt(value_cur, _T_89) @[pwm.scala 98:63]
    node _T_91 = and(_T_86, _T_90) @[pwm.scala 98:49]
    pwm_ld <= _T_91 @[pwm.scala 98:20]
    node _T_92 = and(pwm_hd, enable) @[pwm.scala 99:30]
    io.pwm_h <= _T_92 @[pwm.scala 99:20]
    node _T_93 = and(pwm_ld, enable) @[pwm.scala 100:30]
    io.pwm_l <= _T_93 @[pwm.scala 100:20]
    io.irq_out <= irq_out @[pwm.scala 103:20]
    node _T_94 = not(irq_out) @[pwm.scala 104:34]
    node _T_95 = and(stop_out, _T_94) @[pwm.scala 104:32]
    io.rawirq_out <= _T_95 @[pwm.scala 104:20]
    node _T_97 = bits(pwm_db, 3, 0) @[pwm.scala 107:44]
    node _T_98 = cat(irq_ena, updown) @[Cat.scala 30:58]
    node _T_99 = cat(_T_98, enable) @[Cat.scala 30:58]
    node _T_100 = cat(UInt<24>("h00"), _T_97) @[Cat.scala 30:58]
    node _T_101 = cat(_T_100, pid_out_sel) @[Cat.scala 30:58]
    node _T_102 = cat(_T_101, _T_99) @[Cat.scala 30:58]
    io.reg_cfg_do <= _T_102 @[pwm.scala 107:20]
    when io.reg_cfg_we : @[pwm.scala 108:23]
      node _T_103 = bits(io.reg_cfg_di, 0, 0) @[pwm.scala 109:35]
      enable <= _T_103 @[pwm.scala 109:19]
      node _T_104 = bits(io.reg_cfg_di, 1, 1) @[pwm.scala 110:35]
      updown <= _T_104 @[pwm.scala 110:19]
      node _T_105 = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 111:35]
      irq_ena <= _T_105 @[pwm.scala 111:19]
      node _T_106 = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 112:35]
      pid_out_sel <= _T_106 @[pwm.scala 112:19]
      node _T_107 = bits(io.reg_cfg_di, 7, 4) @[pwm.scala 113:36]
      node _T_109 = add(_T_107, UInt<2>("h02")) @[pwm.scala 113:42]
      node _T_110 = tail(_T_109, 1) @[pwm.scala 113:42]
      pwm_db <= _T_110 @[pwm.scala 113:19]
      skip @[pwm.scala 108:23]
    io.reg_val_do <= value_reload @[pwm.scala 117:19]
    node _T_112 = neq(io.reg_val_we, UInt<1>("h00")) @[pwm.scala 118:25]
    when _T_112 : @[pwm.scala 118:29]
      value_reload <= io.reg_val_di @[pwm.scala 119:19]
      skip @[pwm.scala 118:29]
    io.reg_dat_do <= value_cur @[pwm.scala 123:19]
    node _T_114 = add(value_cur, UInt<1>("h01")) @[pwm.scala 124:39]
    node _T_115 = tail(_T_114, 1) @[pwm.scala 124:39]
    value_cur_plus <= _T_115 @[pwm.scala 124:19]
    node _T_117 = sub(value_cur, UInt<1>("h01")) @[pwm.scala 125:39]
    node _T_118 = asUInt(_T_117) @[pwm.scala 125:39]
    node _T_119 = tail(_T_118, 1) @[pwm.scala 125:39]
    value_cur_minus <= _T_119 @[pwm.scala 125:19]
    loc_enable <= enable @[pwm.scala 126:19]
    lastenable <= loc_enable @[pwm.scala 129:19]
    node _T_121 = neq(io.reg_dat_we, UInt<1>("h00")) @[pwm.scala 130:25]
    when _T_121 : @[pwm.scala 130:29]
      value_cur <= io.reg_dat_di @[pwm.scala 131:19]
      skip @[pwm.scala 130:29]
    else : @[pwm.scala 132:39]
      node _T_123 = eq(loc_enable, UInt<1>("h01")) @[pwm.scala 132:27]
      when _T_123 : @[pwm.scala 132:39]
        node _T_124 = not(irq_out) @[pwm.scala 135:47]
        node _T_125 = and(stop_out, _T_124) @[pwm.scala 135:45]
        node _T_127 = mux(irq_ena, _T_125, UInt<1>("h00")) @[pwm.scala 135:23]
        irq_out <= _T_127 @[pwm.scala 135:17]
        node _T_129 = eq(updown, UInt<1>("h01")) @[pwm.scala 137:19]
        when _T_129 : @[pwm.scala 137:31]
          node _T_131 = eq(lastenable, UInt<1>("h00")) @[pwm.scala 138:25]
          when _T_131 : @[pwm.scala 138:38]
            value_cur <= UInt<32>("h00") @[pwm.scala 139:21]
            stop_out <= UInt<1>("h00") @[pwm.scala 140:21]
            skip @[pwm.scala 138:38]
          else : @[pwm.scala 141:22]
            node _T_134 = eq(value_cur, value_reload) @[pwm.scala 143:33]
            when _T_134 : @[pwm.scala 143:58]
              value_cur <= UInt<32>("h00") @[pwm.scala 144:23]
              stop_out <= UInt<1>("h01") @[pwm.scala 145:23]
              skip @[pwm.scala 143:58]
            else : @[pwm.scala 146:24]
              value_cur <= value_cur_plus @[pwm.scala 147:23]
              stop_out <= UInt<1>("h00") @[pwm.scala 148:23]
              skip @[pwm.scala 146:24]
            skip @[pwm.scala 141:22]
          skip @[pwm.scala 137:31]
        else : @[pwm.scala 151:20]
          node _T_139 = eq(lastenable, UInt<1>("h00")) @[pwm.scala 153:25]
          when _T_139 : @[pwm.scala 153:38]
            value_cur <= value_reload @[pwm.scala 154:23]
            stop_out <= UInt<1>("h00") @[pwm.scala 155:23]
            skip @[pwm.scala 153:38]
          else : @[pwm.scala 156:22]
            node _T_142 = eq(value_cur, UInt<32>("h00")) @[pwm.scala 158:35]
            when _T_142 : @[pwm.scala 158:50]
              value_cur <= value_reload @[pwm.scala 159:25]
              stop_out <= UInt<1>("h01") @[pwm.scala 160:25]
              skip @[pwm.scala 158:50]
            else : @[pwm.scala 161:25]
              value_cur <= value_cur_minus @[pwm.scala 162:25]
              stop_out <= UInt<1>("h00") @[pwm.scala 163:25]
              skip @[pwm.scala 161:25]
            skip @[pwm.scala 156:22]
          skip @[pwm.scala 151:20]
        skip @[pwm.scala 132:39]
    
  module Quad_Encoder_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip quad_a : UInt<1>, flip quad_b : UInt<1>, flip raw_irq : UInt<1>, flip reg_count_we : UInt<1>, flip reg_count_di : UInt<32>, reg_count_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, reg_speed_do : SInt<16>, fb_period : UInt<1>}
    
    reg quad_a_delayed : UInt<3>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 35:33]
    reg quad_b_delayed : UInt<3>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 36:33]
    reg count_reg : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 37:33]
    reg count_reg_2 : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 38:33]
    reg period_count : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 39:33]
    reg speed_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[qei.scala 41:33]
    reg count_sel_2x : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[qei.scala 42:33]
    reg count_old : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 43:33]
    reg qei_output : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 44:33]
    reg qei_speed_count : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 45:33]
    reg qei_period_count : UInt<16>, clock with : (reset => (reset, UInt<13>("h01fff"))) @[qei.scala 46:33]
    reg period_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 47:33]
    io.reg_count_do <= count_reg @[qei.scala 49:23]
    node _T_51 = bits(quad_a_delayed, 1, 1) @[qei.scala 51:44]
    node _T_52 = bits(quad_a_delayed, 0, 0) @[qei.scala 51:63]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 30:58]
    node _T_54 = cat(_T_53, io.quad_a) @[Cat.scala 30:58]
    quad_a_delayed <= _T_54 @[qei.scala 51:23]
    node _T_55 = bits(quad_b_delayed, 1, 1) @[qei.scala 52:44]
    node _T_56 = bits(quad_b_delayed, 0, 0) @[qei.scala 52:63]
    node _T_57 = cat(_T_55, _T_56) @[Cat.scala 30:58]
    node _T_58 = cat(_T_57, io.quad_b) @[Cat.scala 30:58]
    quad_b_delayed <= _T_58 @[qei.scala 52:23]
    node _T_60 = bits(quad_a_delayed, 1, 1) @[qei.scala 54:57]
    node _T_61 = bits(quad_a_delayed, 2, 2) @[qei.scala 54:75]
    node _T_62 = xor(_T_60, _T_61) @[qei.scala 54:60]
    wire count_2x : UInt<1>
    count_2x <= _T_62
    node _T_64 = bits(quad_a_delayed, 1, 1) @[qei.scala 55:57]
    node _T_65 = bits(quad_a_delayed, 2, 2) @[qei.scala 55:75]
    node _T_66 = xor(_T_64, _T_65) @[qei.scala 55:60]
    node _T_67 = bits(quad_b_delayed, 1, 1) @[qei.scala 55:93]
    node _T_68 = xor(_T_66, _T_67) @[qei.scala 55:78]
    node _T_69 = bits(quad_b_delayed, 2, 2) @[qei.scala 55:111]
    node _T_70 = xor(_T_68, _T_69) @[qei.scala 55:96]
    wire count_4x : UInt<1>
    count_4x <= _T_70
    node _T_72 = bits(quad_a_delayed, 1, 1) @[qei.scala 56:57]
    node _T_73 = bits(quad_b_delayed, 2, 2) @[qei.scala 56:75]
    node _T_74 = xor(_T_72, _T_73) @[qei.scala 56:60]
    wire count_direction : UInt<1>
    count_direction <= _T_74
    node count_pulses = mux(count_sel_2x, count_2x, count_4x) @[qei.scala 57:29]
    when count_pulses : @[qei.scala 62:22]
      when count_direction : @[qei.scala 63:27]
        node _T_76 = add(count_reg, UInt<1>("h01")) @[qei.scala 64:36]
        node _T_77 = tail(_T_76, 1) @[qei.scala 64:36]
        count_reg <= _T_77 @[qei.scala 64:23]
        skip @[qei.scala 63:27]
      else : @[qei.scala 65:18]
        node _T_79 = sub(count_reg, UInt<1>("h01")) @[qei.scala 66:36]
        node _T_80 = asUInt(_T_79) @[qei.scala 66:36]
        node _T_81 = tail(_T_80, 1) @[qei.scala 66:36]
        count_reg <= _T_81 @[qei.scala 66:23]
        skip @[qei.scala 65:18]
      skip @[qei.scala 62:22]
    node _T_82 = or(io.raw_irq, count_pulses) @[qei.scala 71:20]
    when _T_82 : @[qei.scala 71:37]
      when io.raw_irq : @[qei.scala 72:23]
        qei_speed_count <= count_reg_2 @[qei.scala 73:23]
        count_reg_2 <= UInt<1>("h00") @[qei.scala 74:23]
        skip @[qei.scala 72:23]
      else : @[qei.scala 75:17]
        node _T_85 = add(count_reg_2, UInt<1>("h01")) @[qei.scala 76:38]
        node _T_86 = tail(_T_85, 1) @[qei.scala 76:38]
        count_reg_2 <= _T_86 @[qei.scala 76:23]
        skip @[qei.scala 75:17]
      skip @[qei.scala 71:37]
    when period_sel : @[qei.scala 81:20]
      when count_pulses : @[qei.scala 82:24]
        qei_period_count <= period_count @[qei.scala 83:24]
        period_count <= UInt<1>("h00") @[qei.scala 84:24]
        skip @[qei.scala 82:24]
      else : @[qei.scala 85:40]
        node _T_89 = eq(period_count, UInt<8>("h0ff")) @[qei.scala 85:29]
        when _T_89 : @[qei.scala 85:40]
          qei_period_count <= period_count @[qei.scala 86:24]
          period_count <= UInt<1>("h00") @[qei.scala 87:24]
          skip @[qei.scala 85:40]
        else : @[qei.scala 88:17]
          node _T_92 = add(period_count, UInt<1>("h01")) @[qei.scala 89:40]
          node _T_93 = tail(_T_92, 1) @[qei.scala 89:40]
          period_count <= _T_93 @[qei.scala 89:24]
          skip @[qei.scala 88:17]
      skip @[qei.scala 81:20]
    node _T_94 = mux(period_sel, qei_period_count, qei_speed_count) @[qei.scala 94:30]
    qei_output <= _T_94 @[qei.scala 94:24]
    node _T_96 = cat(speed_enable, count_sel_2x) @[Cat.scala 30:58]
    node _T_97 = cat(UInt<29>("h00"), period_sel) @[Cat.scala 30:58]
    node _T_98 = cat(_T_97, _T_96) @[Cat.scala 30:58]
    io.reg_cfg_do <= _T_98 @[qei.scala 97:24]
    node _T_99 = bits(qei_output, 15, 0) @[qei.scala 100:37]
    node _T_100 = asSInt(_T_99) @[qei.scala 100:50]
    io.reg_speed_do <= _T_100 @[qei.scala 100:24]
    io.fb_period <= period_sel @[qei.scala 101:24]
    when io.reg_count_we : @[qei.scala 103:25]
      count_reg <= io.reg_count_di @[qei.scala 104:24]
      skip @[qei.scala 103:25]
    else : @[qei.scala 105:28]
      when io.reg_cfg_we : @[qei.scala 105:28]
        node _T_101 = bits(io.reg_cfg_di, 0, 0) @[qei.scala 106:40]
        count_sel_2x <= _T_101 @[qei.scala 106:24]
        node _T_102 = bits(io.reg_cfg_di, 1, 1) @[qei.scala 107:40]
        speed_enable <= _T_102 @[qei.scala 107:24]
        node _T_103 = bits(io.reg_cfg_di, 2, 2) @[qei.scala 108:40]
        period_sel <= _T_103 @[qei.scala 108:24]
        skip @[qei.scala 105:28]
    
  module vedic_2x2_156 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_157 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_158 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_159 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_39 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_156 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_157 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_158 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_159 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_160 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_161 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_162 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_163 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_40 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_160 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_161 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_162 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_163 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_164 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_165 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_166 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_167 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_41 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_164 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_165 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_166 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_167 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_168 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_169 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_170 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_171 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_42 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_168 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_169 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_170 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_171 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_9 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_39 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_40 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_41 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_42 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_172 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_173 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_174 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_175 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_43 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_172 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_173 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_174 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_175 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_176 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_177 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_178 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_179 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_44 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_176 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_177 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_178 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_179 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_180 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_181 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_182 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_183 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_45 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_180 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_181 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_182 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_183 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_184 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_185 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_186 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_187 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_46 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_184 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_185 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_186 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_187 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_10 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_43 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_44 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_45 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_46 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_188 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_189 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_190 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_191 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_47 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_188 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_189 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_190 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_191 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_192 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_193 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_194 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_195 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_48 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_192 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_193 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_194 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_195 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_196 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_197 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_198 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_199 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_49 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_196 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_197 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_198 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_199 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_200 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_201 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_202 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_203 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_50 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_200 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_201 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_202 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_203 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_11 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_47 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_48 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_49 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_50 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_204 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_205 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_206 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_207 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_51 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_204 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_205 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_206 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_207 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_9 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_10 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_11 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_51 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module vedic_2x2_208 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_209 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_210 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_211 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_52 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_208 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_209 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_210 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_211 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_212 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_213 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_214 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_215 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_53 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_212 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_213 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_214 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_215 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_216 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_217 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_218 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_219 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_54 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_216 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_217 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_218 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_219 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_220 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_221 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_222 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_223 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_55 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_220 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_221 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_222 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_223 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_12 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_52 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_53 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_54 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_55 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_224 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_225 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_226 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_227 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_56 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_224 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_225 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_226 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_227 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_228 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_229 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_230 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_231 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_57 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_228 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_229 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_230 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_231 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_232 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_233 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_234 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_235 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_58 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_232 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_233 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_234 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_235 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_236 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_237 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_238 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_239 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_59 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_236 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_237 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_238 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_239 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_13 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_56 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_57 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_58 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_59 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_240 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_241 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_242 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_243 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_60 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_240 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_241 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_242 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_243 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_244 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_245 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_246 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_247 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_61 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_244 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_245 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_246 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_247 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_248 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_249 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_250 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_251 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_62 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_248 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_249 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_250 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_251 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_252 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_253 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_254 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_255 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_63 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_252 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_253 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_254 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_255 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_14 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_60 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_61 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_62 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_63 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_256 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_257 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_258 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_259 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_64 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_256 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_257 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_258 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_259 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_12 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_13 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_14 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_64 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module vedic_2x2_260 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_261 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_262 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_263 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_65 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_260 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_261 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_262 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_263 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_264 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_265 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_266 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_267 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_66 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_264 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_265 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_266 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_267 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_268 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_269 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_270 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_271 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_67 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_268 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_269 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_270 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_271 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_272 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_273 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_274 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_275 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_68 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_272 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_273 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_274 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_275 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_15 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_65 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_66 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_67 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_68 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_276 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_277 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_278 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_279 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_69 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_276 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_277 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_278 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_279 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_280 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_281 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_282 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_283 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_70 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_280 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_281 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_282 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_283 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_284 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_285 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_286 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_287 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_71 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_284 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_285 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_286 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_287 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_288 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_289 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_290 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_291 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_72 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_288 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_289 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_290 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_291 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_16 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_69 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_70 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_71 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_72 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_292 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_293 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_294 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_295 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_73 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_292 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_293 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_294 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_295 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_296 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_297 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_298 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_299 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_74 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_296 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_297 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_298 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_299 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_300 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_301 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_302 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_303 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_75 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_300 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_301 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_302 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_303 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_304 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_305 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_306 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_307 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_76 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_304 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_305 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_306 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_307 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_17 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_73 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_74 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_75 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_76 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_308 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_309 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_310 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_311 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_77 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_308 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_309 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_310 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_311 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_15 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_16 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_17 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_77 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module PID_Controller_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip fb_period : UInt<1>, flip raw_irq : UInt<1>, flip reg_kp_we : UInt<1>, flip reg_kp_di : SInt<16>, reg_kp_do : SInt<16>, flip reg_ki_we : UInt<1>, flip reg_ki_di : SInt<16>, reg_ki_do : SInt<16>, flip reg_kd_we : UInt<1>, flip reg_kd_di : SInt<16>, reg_kd_do : SInt<16>, flip reg_ref_we : UInt<1>, flip reg_ref_di : SInt<16>, reg_ref_do : SInt<16>, flip reg_fb_we : UInt<1>, flip reg_fb_di : SInt<16>, reg_fb_do : SInt<16>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : SInt<16>, reg_cfg_do : SInt<16>, flip speed_fb_in : SInt<16>, pid_out : SInt<16>}
    
    reg kp : SInt<16>, clock with : (reset => (reset, asSInt(UInt<2>("h01")))) @[pid.scala 56:26]
    reg ki : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 57:26]
    reg kd : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 58:26]
    reg ref : SInt<16>, clock with : (reset => (reset, asSInt(UInt<6>("h014")))) @[pid.scala 59:26]
    reg feedback : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 60:26]
    reg sigma_old : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 61:26]
    reg fb_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pid.scala 62:26]
    reg e_prev1 : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 64:26]
    reg e_prev2 : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 65:26]
    reg reg_pid_out : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 66:28]
    io.reg_kp_do <= kp @[pid.scala 69:17]
    when io.reg_kp_we : @[pid.scala 70:22]
      kp <= io.reg_kp_di @[pid.scala 71:8]
      skip @[pid.scala 70:22]
    io.reg_ki_do <= ki @[pid.scala 74:17]
    when io.reg_ki_we : @[pid.scala 75:22]
      ki <= io.reg_ki_di @[pid.scala 76:8]
      skip @[pid.scala 75:22]
    io.reg_kd_do <= kd @[pid.scala 79:17]
    when io.reg_kd_we : @[pid.scala 80:22]
      kd <= io.reg_kd_di @[pid.scala 81:8]
      skip @[pid.scala 80:22]
    io.reg_ref_do <= ref @[pid.scala 85:17]
    when io.reg_ref_we : @[pid.scala 86:23]
      ref <= io.reg_ref_di @[pid.scala 87:9]
      skip @[pid.scala 86:23]
    io.reg_fb_do <= feedback @[pid.scala 90:17]
    when fb_sel : @[pid.scala 92:16]
      when io.reg_fb_we : @[pid.scala 93:24]
        feedback <= io.reg_fb_di @[pid.scala 94:15]
        skip @[pid.scala 93:24]
      skip @[pid.scala 92:16]
    else : @[pid.scala 96:14]
      feedback <= io.speed_fb_in @[pid.scala 97:15]
      skip @[pid.scala 96:14]
    node _T_70 = cat(UInt<31>("h00"), fb_sel) @[Cat.scala 30:58]
    node _T_71 = asSInt(_T_70) @[pid.scala 100:49]
    io.reg_cfg_do <= _T_71 @[pid.scala 100:17]
    when io.reg_cfg_we : @[pid.scala 101:23]
      node _T_72 = bits(io.reg_cfg_di, 0, 0) @[pid.scala 102:28]
      fb_sel <= _T_72 @[pid.scala 102:12]
      skip @[pid.scala 101:23]
    node _T_73 = sub(e_prev1, e_prev2) @[pid.scala 106:27]
    node _T_74 = tail(_T_73, 1) @[pid.scala 106:27]
    node delta_err = asSInt(_T_74) @[pid.scala 106:27]
    node _T_75 = add(e_prev1, sigma_old) @[pid.scala 107:27]
    node _T_76 = tail(_T_75, 1) @[pid.scala 107:27]
    node sigma_new = asSInt(_T_76) @[pid.scala 107:27]
    inst mul_kp of vedic_16x16_3 @[pid.scala 110:25]
    mul_kp.clock <= clock
    mul_kp.reset <= reset
    mul_kp.io.a <= e_prev1 @[pid.scala 111:17]
    node _T_77 = asUInt(kp) @[pid.scala 112:29]
    mul_kp.io.b <= _T_77 @[pid.scala 112:17]
    node _T_78 = bits(mul_kp.io.c, 15, 0) @[pid.scala 113:30]
    node prop_out = asSInt(_T_78) @[pid.scala 113:43]
    inst mul_ki of vedic_16x16_4 @[pid.scala 116:25]
    mul_ki.clock <= clock
    mul_ki.reset <= reset
    mul_ki.io.a <= sigma_new @[pid.scala 117:17]
    node _T_79 = asUInt(ki) @[pid.scala 118:29]
    mul_ki.io.b <= _T_79 @[pid.scala 118:17]
    node _T_80 = bits(mul_ki.io.c, 15, 0) @[pid.scala 119:33]
    node integral_out = asSInt(_T_80) @[pid.scala 119:46]
    inst mul_kd of vedic_16x16_5 @[pid.scala 122:25]
    mul_kd.clock <= clock
    mul_kd.reset <= reset
    mul_kd.io.a <= delta_err @[pid.scala 123:17]
    node _T_81 = asUInt(kd) @[pid.scala 124:29]
    mul_kd.io.b <= _T_81 @[pid.scala 124:17]
    node _T_82 = bits(mul_kd.io.c, 15, 0) @[pid.scala 125:35]
    node derivative_out = asSInt(_T_82) @[pid.scala 125:48]
    node _T_83 = add(prop_out, integral_out) @[pid.scala 128:28]
    node _T_84 = tail(_T_83, 1) @[pid.scala 128:28]
    node pi_sum = asSInt(_T_84) @[pid.scala 128:28]
    node _T_85 = bits(prop_out, 15, 15) @[pid.scala 129:34]
    node _T_86 = bits(integral_out, 15, 15) @[pid.scala 129:54]
    node _T_87 = and(_T_85, _T_86) @[pid.scala 129:39]
    node _T_88 = bits(pi_sum, 15, 15) @[pid.scala 129:69]
    node _T_90 = eq(_T_88, UInt<1>("h00")) @[pid.scala 129:62]
    node _T_91 = and(_T_87, _T_90) @[pid.scala 129:59]
    node _T_92 = bits(prop_out, 15, 15) @[pid.scala 130:35]
    node _T_94 = eq(_T_92, UInt<1>("h00")) @[pid.scala 130:26]
    node _T_95 = bits(integral_out, 15, 15) @[pid.scala 130:56]
    node _T_97 = eq(_T_95, UInt<1>("h00")) @[pid.scala 130:43]
    node _T_98 = and(_T_94, _T_97) @[pid.scala 130:40]
    node _T_99 = bits(pi_sum, 15, 15) @[pid.scala 130:70]
    node _T_100 = and(_T_98, _T_99) @[pid.scala 130:61]
    node pi_sum_overflow = or(_T_91, _T_100) @[pid.scala 129:75]
    when io.raw_irq : @[pid.scala 132:20]
      when io.fb_period : @[pid.scala 134:23]
        node _T_101 = sub(feedback, ref) @[pid.scala 135:29]
        node _T_102 = tail(_T_101, 1) @[pid.scala 135:29]
        node _T_103 = asSInt(_T_102) @[pid.scala 135:29]
        e_prev1 <= _T_103 @[pid.scala 135:17]
        skip @[pid.scala 134:23]
      else : @[pid.scala 136:16]
        node _T_104 = sub(ref, feedback) @[pid.scala 137:24]
        node _T_105 = tail(_T_104, 1) @[pid.scala 137:24]
        node _T_106 = asSInt(_T_105) @[pid.scala 137:24]
        e_prev1 <= _T_106 @[pid.scala 137:17]
        skip @[pid.scala 136:16]
      e_prev2 <= e_prev1 @[pid.scala 139:17]
      sigma_old <= sigma_new @[pid.scala 140:17]
      node _T_107 = add(pi_sum, derivative_out) @[pid.scala 141:27]
      node _T_108 = tail(_T_107, 1) @[pid.scala 141:27]
      node _T_109 = asSInt(_T_108) @[pid.scala 141:27]
      reg_pid_out <= _T_109 @[pid.scala 141:17]
      skip @[pid.scala 132:20]
    node _T_110 = bits(reg_pid_out, 15, 15) @[pid.scala 144:54]
    node _T_111 = or(pi_sum_overflow, _T_110) @[pid.scala 144:40]
    node _T_113 = mux(_T_111, asSInt(UInt<1>("h00")), reg_pid_out) @[pid.scala 144:23]
    io.pid_out <= _T_113 @[pid.scala 144:17]
    
  module Motor_Top_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {wbs : {flip m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}, motor_gpio : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, flip motor_select : UInt<1>, motor_irq : UInt<1>}
    
    inst interlink of Interlink_Module_1 @[motor_top.scala 41:26]
    interlink.clock <= clock
    interlink.reset <= reset
    interlink.io.motor_select <= io.motor_select @[motor_top.scala 45:29]
    interlink.io.bus_stb_i <= io.wbs.m2s.stb @[motor_top.scala 48:29]
    interlink.io.bus_cyc_i <= io.wbs.m2s.cyc @[motor_top.scala 49:29]
    interlink.io.bus_adr_i <= io.wbs.m2s.addr @[motor_top.scala 50:29]
    interlink.io.bus_sel_i <= io.wbs.m2s.sel @[motor_top.scala 51:29]
    interlink.io.bus_we_i <= io.wbs.m2s.we @[motor_top.scala 52:29]
    io.wbs.data_o <= interlink.io.bus_dat_o @[motor_top.scala 53:29]
    io.wbs.ack_o <= interlink.io.bus_ack_o @[motor_top.scala 54:29]
    inst pwm of PWM_1 @[motor_top.scala 57:37]
    pwm.clock <= clock
    pwm.reset <= reset
    pwm.io.reg_val_we <= interlink.io.tmr_val_we @[motor_top.scala 59:29]
    pwm.io.reg_val_di <= io.wbs.m2s.data @[motor_top.scala 60:29]
    interlink.io.tmr_val_do <= pwm.io.reg_val_do @[motor_top.scala 61:29]
    pwm.io.reg_cfg_we <= interlink.io.tmr_cfg_we @[motor_top.scala 63:29]
    pwm.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 64:29]
    interlink.io.tmr_cfg_do <= pwm.io.reg_cfg_do @[motor_top.scala 65:29]
    pwm.io.reg_dat_we <= interlink.io.tmr_dat_we @[motor_top.scala 67:29]
    pwm.io.reg_dat_di <= io.wbs.m2s.data @[motor_top.scala 68:29]
    interlink.io.tmr_dat_do <= pwm.io.reg_dat_do @[motor_top.scala 69:29]
    pwm.io.reg_duty_we <= interlink.io.tmr_duty_we @[motor_top.scala 70:29]
    pwm.io.reg_duty_di <= io.wbs.m2s.data @[motor_top.scala 71:29]
    interlink.io.tmr_duty_do <= pwm.io.reg_duty_do @[motor_top.scala 72:29]
    wire pid_out : SInt<16> @[motor_top.scala 75:35]
    pwm.io.reg_pid_out <= pid_out @[motor_top.scala 77:29]
    io.motor_irq <= pwm.io.irq_out @[motor_top.scala 78:29]
    io.motor_gpio.pwm_high <= pwm.io.pwm_h @[motor_top.scala 81:29]
    io.motor_gpio.pwm_low <= pwm.io.pwm_l @[motor_top.scala 82:29]
    inst qei of Quad_Encoder_1 @[motor_top.scala 86:37]
    qei.clock <= clock
    qei.reset <= reset
    qei.io.quad_a <= io.motor_gpio.qei_ch_a @[motor_top.scala 87:29]
    qei.io.quad_b <= io.motor_gpio.qei_ch_b @[motor_top.scala 88:29]
    qei.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 89:29]
    qei.io.reg_count_we <= interlink.io.qei_count_we @[motor_top.scala 91:29]
    qei.io.reg_count_di <= io.wbs.m2s.data @[motor_top.scala 92:29]
    interlink.io.qei_count_do <= qei.io.reg_count_do @[motor_top.scala 93:29]
    qei.io.reg_cfg_we <= interlink.io.qei_cfg_we @[motor_top.scala 95:29]
    qei.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 96:29]
    interlink.io.qei_cfg_do <= qei.io.reg_cfg_do @[motor_top.scala 97:29]
    interlink.io.qei_speed_do <= qei.io.reg_speed_do @[motor_top.scala 99:29]
    inst pid of PID_Controller_1 @[motor_top.scala 102:37]
    pid.clock <= clock
    pid.reset <= reset
    pid.io.fb_period <= qei.io.fb_period @[motor_top.scala 103:29]
    pid.io.speed_fb_in <= qei.io.reg_speed_do @[motor_top.scala 104:29]
    pid.io.reg_kp_we <= interlink.io.pid_kp_we @[motor_top.scala 106:29]
    node _T_48 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 107:41]
    node _T_49 = asSInt(_T_48) @[motor_top.scala 107:53]
    pid.io.reg_kp_di <= _T_49 @[motor_top.scala 107:29]
    interlink.io.pid_kp_do <= pid.io.reg_kp_do @[motor_top.scala 108:29]
    pid.io.reg_ki_we <= interlink.io.pid_ki_we @[motor_top.scala 110:29]
    node _T_50 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 111:41]
    node _T_51 = asSInt(_T_50) @[motor_top.scala 111:53]
    pid.io.reg_ki_di <= _T_51 @[motor_top.scala 111:29]
    interlink.io.pid_ki_do <= pid.io.reg_ki_do @[motor_top.scala 112:29]
    pid.io.reg_kd_we <= interlink.io.pid_kd_we @[motor_top.scala 114:29]
    node _T_52 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 115:41]
    node _T_53 = asSInt(_T_52) @[motor_top.scala 115:53]
    pid.io.reg_kd_di <= _T_53 @[motor_top.scala 115:29]
    interlink.io.pid_kd_do <= pid.io.reg_kd_do @[motor_top.scala 116:29]
    pid.io.reg_ref_we <= interlink.io.pid_ref_we @[motor_top.scala 118:29]
    node _T_54 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 119:41]
    node _T_55 = asSInt(_T_54) @[motor_top.scala 119:54]
    pid.io.reg_ref_di <= _T_55 @[motor_top.scala 119:29]
    interlink.io.pid_ref_do <= pid.io.reg_ref_do @[motor_top.scala 120:29]
    pid.io.reg_fb_we <= interlink.io.pid_fb_we @[motor_top.scala 122:29]
    node _T_56 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 123:41]
    node _T_57 = asSInt(_T_56) @[motor_top.scala 123:54]
    pid.io.reg_fb_di <= _T_57 @[motor_top.scala 123:29]
    interlink.io.pid_fb_do <= pid.io.reg_fb_do @[motor_top.scala 124:29]
    pid.io.reg_cfg_we <= interlink.io.pid_cfg_we @[motor_top.scala 126:29]
    node _T_58 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 127:41]
    node _T_59 = asSInt(_T_58) @[motor_top.scala 127:54]
    pid.io.reg_cfg_di <= _T_59 @[motor_top.scala 127:29]
    interlink.io.pid_cfg_do <= pid.io.reg_cfg_do @[motor_top.scala 128:29]
    pid_out <= pid.io.pid_out @[motor_top.scala 130:29]
    pid.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 131:29]
    
  module Interlink_Module_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip bus_adr_i : UInt<32>, flip bus_sel_i : UInt<4>, flip bus_we_i : UInt<1>, flip bus_cyc_i : UInt<1>, flip bus_stb_i : UInt<1>, bus_ack_o : UInt<1>, bus_dat_o : UInt<32>, tmr_val_we : UInt<1>, flip tmr_val_do : UInt<32>, tmr_dat_we : UInt<1>, flip tmr_dat_do : UInt<32>, tmr_duty_we : UInt<1>, flip tmr_duty_do : UInt<32>, tmr_cfg_we : UInt<1>, flip tmr_cfg_do : UInt<32>, qei_count_we : UInt<1>, flip qei_count_do : UInt<32>, qei_cfg_we : UInt<1>, flip qei_cfg_do : UInt<32>, flip qei_speed_do : SInt<16>, pid_kp_we : UInt<1>, flip pid_kp_do : SInt<16>, pid_ki_we : UInt<1>, flip pid_ki_do : SInt<16>, pid_kd_we : UInt<1>, flip pid_kd_do : SInt<16>, pid_ref_we : UInt<1>, flip pid_ref_do : SInt<16>, pid_fb_we : UInt<1>, flip pid_fb_do : SInt<16>, pid_cfg_we : UInt<1>, flip pid_cfg_do : SInt<16>, flip motor_select : UInt<1>}
    
    node _T_72 = and(io.bus_stb_i, io.bus_cyc_i) @[interlink.scala 89:53]
    wire bus_valid : UInt<1>
    bus_valid <= _T_72
    wire tmr_cfg_do : UInt<32> @[interlink.scala 92:27]
    wire tmr_val_do : UInt<32> @[interlink.scala 93:27]
    wire tmr_dat_do : UInt<32> @[interlink.scala 94:27]
    wire tmr_duty_do : UInt<32> @[interlink.scala 95:27]
    node reg_offset = bits(io.bus_adr_i, 11, 0) @[interlink.scala 98:35]
    node _T_78 = and(bus_valid, io.motor_select) @[interlink.scala 100:50]
    node _T_79 = eq(reg_offset, UInt<12>("h00")) @[interlink.scala 100:81]
    node _T_80 = and(_T_78, _T_79) @[interlink.scala 100:66]
    wire tmr_cfg_sel : UInt<1>
    tmr_cfg_sel <= _T_80
    node _T_82 = and(bus_valid, io.motor_select) @[interlink.scala 101:50]
    node _T_83 = eq(reg_offset, UInt<12>("h04")) @[interlink.scala 101:81]
    node _T_84 = and(_T_82, _T_83) @[interlink.scala 101:66]
    wire tmr_val_sel : UInt<1>
    tmr_val_sel <= _T_84
    node _T_86 = and(bus_valid, io.motor_select) @[interlink.scala 102:50]
    node _T_87 = eq(reg_offset, UInt<12>("h08")) @[interlink.scala 102:81]
    node _T_88 = and(_T_86, _T_87) @[interlink.scala 102:66]
    wire tmr_dat_sel : UInt<1>
    tmr_dat_sel <= _T_88
    node _T_90 = and(bus_valid, io.motor_select) @[interlink.scala 103:50]
    node _T_91 = eq(reg_offset, UInt<12>("h0c")) @[interlink.scala 103:81]
    node _T_92 = and(_T_90, _T_91) @[interlink.scala 103:66]
    wire tmr_duty_sel : UInt<1>
    tmr_duty_sel <= _T_92
    node _T_94 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 105:72]
    node _T_95 = and(_T_94, io.bus_we_i) @[interlink.scala 105:76]
    node _T_97 = mux(tmr_cfg_sel, _T_95, UInt<1>("h00")) @[interlink.scala 105:43]
    wire tmr_cfg_we : UInt<1>
    tmr_cfg_we <= _T_97
    node _T_99 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 106:72]
    node _T_100 = and(_T_99, io.bus_we_i) @[interlink.scala 106:76]
    node _T_102 = mux(tmr_val_sel, _T_100, UInt<1>("h00")) @[interlink.scala 106:43]
    wire tmr_val_we : UInt<1>
    tmr_val_we <= _T_102
    node _T_104 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 107:72]
    node _T_105 = and(_T_104, io.bus_we_i) @[interlink.scala 107:76]
    node _T_107 = mux(tmr_dat_sel, _T_105, UInt<1>("h00")) @[interlink.scala 107:43]
    wire tmr_dat_we : UInt<1>
    tmr_dat_we <= _T_107
    node _T_109 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 108:73]
    node _T_110 = and(_T_109, io.bus_we_i) @[interlink.scala 108:77]
    node _T_112 = mux(tmr_duty_sel, _T_110, UInt<1>("h00")) @[interlink.scala 108:43]
    wire tmr_duty_we : UInt<1>
    tmr_duty_we <= _T_112
    node _T_115 = neq(io.bus_sel_i, UInt<1>("h00")) @[interlink.scala 110:71]
    node _T_117 = eq(_T_115, UInt<1>("h00")) @[interlink.scala 110:56]
    node _T_118 = and(tmr_dat_sel, _T_117) @[interlink.scala 110:52]
    node _T_119 = not(io.bus_we_i) @[interlink.scala 110:84]
    node _T_120 = and(_T_118, _T_119) @[interlink.scala 110:80]
    wire reg_dat_re : UInt<1>
    reg_dat_re <= _T_120
    node _T_121 = or(tmr_cfg_sel, tmr_val_sel) @[interlink.scala 112:35]
    node _T_122 = or(_T_121, tmr_dat_sel) @[interlink.scala 112:50]
    node tmr_sel = or(_T_122, tmr_duty_sel) @[interlink.scala 112:65]
    node _T_123 = mux(tmr_duty_sel, tmr_duty_do, tmr_dat_do) @[interlink.scala 114:26]
    node _T_124 = mux(tmr_val_sel, tmr_val_do, _T_123) @[interlink.scala 113:57]
    node tmr_do = mux(tmr_cfg_sel, tmr_cfg_do, _T_124) @[interlink.scala 113:26]
    wire qei_count_do : UInt<32> @[interlink.scala 117:27]
    node _T_127 = and(bus_valid, io.motor_select) @[interlink.scala 118:50]
    node _T_128 = eq(reg_offset, UInt<12>("h0100")) @[interlink.scala 118:81]
    node _T_129 = and(_T_127, _T_128) @[interlink.scala 118:66]
    wire qei_count_sel : UInt<1>
    qei_count_sel <= _T_129
    node _T_131 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 119:74]
    node _T_132 = and(_T_131, io.bus_we_i) @[interlink.scala 119:78]
    node _T_134 = mux(qei_count_sel, _T_132, UInt<1>("h00")) @[interlink.scala 119:43]
    wire qei_count_we : UInt<1>
    qei_count_we <= _T_134
    wire qei_cfg_do : UInt<32> @[interlink.scala 121:27]
    node _T_137 = and(bus_valid, io.motor_select) @[interlink.scala 122:50]
    node _T_138 = eq(reg_offset, UInt<12>("h0108")) @[interlink.scala 122:81]
    node _T_139 = and(_T_137, _T_138) @[interlink.scala 122:66]
    wire qei_cfg_sel : UInt<1>
    qei_cfg_sel <= _T_139
    node _T_141 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 123:72]
    node _T_142 = and(_T_141, io.bus_we_i) @[interlink.scala 123:76]
    node _T_144 = mux(qei_cfg_sel, _T_142, UInt<1>("h00")) @[interlink.scala 123:43]
    wire qei_cfg_we : UInt<1>
    qei_cfg_we <= _T_144
    wire qei_speed_do : UInt<32> @[interlink.scala 125:27]
    node _T_147 = and(bus_valid, io.motor_select) @[interlink.scala 126:50]
    node _T_148 = eq(reg_offset, UInt<12>("h0104")) @[interlink.scala 126:81]
    node _T_149 = and(_T_147, _T_148) @[interlink.scala 126:66]
    wire qei_speed_sel : UInt<1>
    qei_speed_sel <= _T_149
    node _T_151 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 127:74]
    node _T_152 = and(_T_151, io.bus_we_i) @[interlink.scala 127:78]
    node _T_154 = mux(qei_speed_sel, _T_152, UInt<1>("h00")) @[interlink.scala 127:43]
    wire qei_speed_we : UInt<1>
    qei_speed_we <= _T_154
    node _T_155 = or(qei_count_sel, qei_cfg_sel) @[interlink.scala 130:37]
    node qei_sel = or(_T_155, qei_speed_sel) @[interlink.scala 130:52]
    node _T_156 = mux(qei_cfg_sel, qei_cfg_do, qei_count_do) @[interlink.scala 131:59]
    node qei_do = mux(qei_speed_sel, qei_speed_do, _T_156) @[interlink.scala 131:26]
    wire pid_kp_do : SInt<16> @[interlink.scala 134:27]
    node _T_159 = and(bus_valid, io.motor_select) @[interlink.scala 135:50]
    node _T_160 = eq(reg_offset, UInt<12>("h0200")) @[interlink.scala 135:81]
    node _T_161 = and(_T_159, _T_160) @[interlink.scala 135:66]
    wire pid_kp_sel : UInt<1>
    pid_kp_sel <= _T_161
    node _T_163 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 136:71]
    node _T_164 = and(_T_163, io.bus_we_i) @[interlink.scala 136:75]
    node _T_166 = mux(pid_kp_sel, _T_164, UInt<1>("h00")) @[interlink.scala 136:43]
    wire pid_kp_we : UInt<1>
    pid_kp_we <= _T_166
    wire pid_ki_do : SInt<16> @[interlink.scala 138:27]
    node _T_169 = and(bus_valid, io.motor_select) @[interlink.scala 139:50]
    node _T_170 = eq(reg_offset, UInt<12>("h0204")) @[interlink.scala 139:81]
    node _T_171 = and(_T_169, _T_170) @[interlink.scala 139:66]
    wire pid_ki_sel : UInt<1>
    pid_ki_sel <= _T_171
    node _T_173 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 140:71]
    node _T_174 = and(_T_173, io.bus_we_i) @[interlink.scala 140:75]
    node _T_176 = mux(pid_ki_sel, _T_174, UInt<1>("h00")) @[interlink.scala 140:43]
    wire pid_ki_we : UInt<1>
    pid_ki_we <= _T_176
    wire pid_kd_do : SInt<16> @[interlink.scala 142:27]
    node _T_179 = and(bus_valid, io.motor_select) @[interlink.scala 143:50]
    node _T_180 = eq(reg_offset, UInt<12>("h0208")) @[interlink.scala 143:81]
    node _T_181 = and(_T_179, _T_180) @[interlink.scala 143:66]
    wire pid_kd_sel : UInt<1>
    pid_kd_sel <= _T_181
    node _T_183 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 144:71]
    node _T_184 = and(_T_183, io.bus_we_i) @[interlink.scala 144:75]
    node _T_186 = mux(pid_kd_sel, _T_184, UInt<1>("h00")) @[interlink.scala 144:43]
    wire pid_kd_we : UInt<1>
    pid_kd_we <= _T_186
    wire pid_ref_do : SInt<16> @[interlink.scala 146:27]
    node _T_189 = and(bus_valid, io.motor_select) @[interlink.scala 147:50]
    node _T_190 = eq(reg_offset, UInt<12>("h020c")) @[interlink.scala 147:81]
    node _T_191 = and(_T_189, _T_190) @[interlink.scala 147:66]
    wire pid_ref_sel : UInt<1>
    pid_ref_sel <= _T_191
    node _T_193 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 148:72]
    node _T_194 = and(_T_193, io.bus_we_i) @[interlink.scala 148:76]
    node _T_196 = mux(pid_ref_sel, _T_194, UInt<1>("h00")) @[interlink.scala 148:43]
    wire pid_ref_we : UInt<1>
    pid_ref_we <= _T_196
    wire pid_fb_do : SInt<16> @[interlink.scala 150:27]
    node _T_199 = and(bus_valid, io.motor_select) @[interlink.scala 151:50]
    node _T_200 = eq(reg_offset, UInt<12>("h0210")) @[interlink.scala 151:81]
    node _T_201 = and(_T_199, _T_200) @[interlink.scala 151:66]
    wire pid_fb_sel : UInt<1>
    pid_fb_sel <= _T_201
    node _T_203 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 152:71]
    node _T_204 = and(_T_203, io.bus_we_i) @[interlink.scala 152:75]
    node _T_206 = mux(pid_fb_sel, _T_204, UInt<1>("h00")) @[interlink.scala 152:43]
    wire pid_fb_we : UInt<1>
    pid_fb_we <= _T_206
    wire pid_cfg_do : SInt<16> @[interlink.scala 154:27]
    node _T_209 = and(bus_valid, io.motor_select) @[interlink.scala 155:50]
    node _T_210 = eq(reg_offset, UInt<12>("h0214")) @[interlink.scala 155:81]
    node _T_211 = and(_T_209, _T_210) @[interlink.scala 155:66]
    wire pid_cfg_sel : UInt<1>
    pid_cfg_sel <= _T_211
    node _T_213 = bits(io.bus_sel_i, 0, 0) @[interlink.scala 156:72]
    node _T_214 = and(_T_213, io.bus_we_i) @[interlink.scala 156:76]
    node _T_216 = mux(pid_cfg_sel, _T_214, UInt<1>("h00")) @[interlink.scala 156:43]
    wire pid_cfg_we : UInt<1>
    pid_cfg_we <= _T_216
    node _T_217 = or(pid_kp_sel, pid_ki_sel) @[interlink.scala 158:34]
    node _T_218 = or(_T_217, pid_kd_sel) @[interlink.scala 158:48]
    node _T_219 = or(_T_218, pid_ref_sel) @[interlink.scala 158:62]
    node _T_220 = or(_T_219, pid_fb_sel) @[interlink.scala 158:77]
    node pid_sel = or(_T_220, pid_cfg_sel) @[interlink.scala 158:91]
    node _T_221 = mux(pid_fb_sel, pid_fb_do, pid_cfg_do) @[interlink.scala 162:46]
    node _T_222 = mux(pid_ref_sel, pid_ref_do, _T_221) @[interlink.scala 161:46]
    node _T_223 = mux(pid_kd_sel, pid_kd_do, _T_222) @[interlink.scala 160:46]
    node _T_224 = mux(pid_ki_sel, pid_ki_do, _T_223) @[interlink.scala 159:53]
    node pid_do = mux(pid_kp_sel, pid_kp_do, _T_224) @[interlink.scala 159:26]
    reg wb_ack_o : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[interlink.scala 165:30]
    reg wb_data_o : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[interlink.scala 166:30]
    node _T_229 = asUInt(pid_do) @[interlink.scala 167:92]
    node _T_231 = mux(pid_sel, _T_229, UInt<1>("h00")) @[interlink.scala 167:69]
    node _T_232 = mux(qei_sel, qei_do, _T_231) @[interlink.scala 167:48]
    node _T_233 = mux(tmr_sel, tmr_do, _T_232) @[interlink.scala 167:27]
    wb_data_o <= _T_233 @[interlink.scala 167:21]
    node _T_234 = or(tmr_sel, qei_sel) @[interlink.scala 168:32]
    node _T_235 = or(_T_234, pid_sel) @[interlink.scala 168:43]
    wb_ack_o <= _T_235 @[interlink.scala 168:21]
    io.bus_dat_o <= wb_data_o @[interlink.scala 170:21]
    io.bus_ack_o <= wb_ack_o @[interlink.scala 171:21]
    io.tmr_val_we <= tmr_val_we @[interlink.scala 174:21]
    tmr_val_do <= io.tmr_val_do @[interlink.scala 175:21]
    io.tmr_dat_we <= tmr_dat_we @[interlink.scala 176:21]
    tmr_dat_do <= io.tmr_dat_do @[interlink.scala 177:21]
    io.tmr_duty_we <= tmr_duty_we @[interlink.scala 178:21]
    tmr_duty_do <= io.tmr_duty_do @[interlink.scala 179:21]
    io.tmr_cfg_we <= tmr_cfg_we @[interlink.scala 180:21]
    tmr_cfg_do <= io.tmr_cfg_do @[interlink.scala 181:21]
    io.qei_count_we <= qei_count_we @[interlink.scala 183:21]
    qei_count_do <= io.qei_count_do @[interlink.scala 184:21]
    io.qei_cfg_we <= qei_cfg_we @[interlink.scala 185:21]
    qei_cfg_do <= io.qei_cfg_do @[interlink.scala 186:21]
    node _T_236 = asUInt(io.qei_speed_do) @[interlink.scala 187:46]
    qei_speed_do <= _T_236 @[interlink.scala 187:21]
    io.pid_kp_we <= pid_kp_we @[interlink.scala 189:21]
    pid_kp_do <= io.pid_kp_do @[interlink.scala 190:21]
    io.pid_ki_we <= pid_ki_we @[interlink.scala 191:21]
    pid_ki_do <= io.pid_ki_do @[interlink.scala 192:21]
    io.pid_kd_we <= pid_kd_we @[interlink.scala 193:21]
    pid_kd_do <= io.pid_kd_do @[interlink.scala 194:21]
    io.pid_ref_we <= pid_ref_we @[interlink.scala 195:21]
    pid_ref_do <= io.pid_ref_do @[interlink.scala 196:21]
    io.pid_fb_we <= pid_fb_we @[interlink.scala 197:21]
    pid_fb_do <= io.pid_fb_do @[interlink.scala 198:21]
    io.pid_cfg_we <= pid_cfg_we @[interlink.scala 199:21]
    pid_cfg_do <= io.pid_cfg_do @[interlink.scala 200:21]
    
  module PWM_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reg_val_we : UInt<1>, flip reg_val_di : UInt<32>, reg_val_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, flip reg_dat_we : UInt<1>, flip reg_dat_di : UInt<32>, reg_dat_do : UInt<32>, flip reg_duty_we : UInt<1>, flip reg_duty_di : UInt<32>, reg_duty_do : UInt<32>, flip reg_pid_out : SInt<16>, pwm_h : UInt<1>, pwm_l : UInt<1>, irq_out : UInt<1>, rawirq_out : UInt<1>}
    
    reg value_cur : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 44:32]
    reg value_reload : UInt<32>, clock with : (reset => (reset, UInt<8>("h0ff"))) @[pwm.scala 45:32]
    reg pwm_duty : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 46:32]
    reg reg_duty : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 47:32]
    wire value_cur_plus : UInt<32> @[pwm.scala 50:29]
    wire value_cur_minus : UInt<32> @[pwm.scala 51:29]
    wire loc_enable : UInt<1> @[pwm.scala 53:29]
    reg enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 54:32]
    reg stop_out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 56:32]
    reg irq_out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 57:32]
    reg lastenable : UInt<1>, clock @[pwm.scala 60:28]
    reg updown : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 63:32]
    reg irq_ena : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 66:32]
    reg pid_out_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pwm.scala 69:32]
    reg pwm_db : UInt<4>, clock with : (reset => (reset, UInt<2>("h02"))) @[pwm.scala 72:32]
    io.reg_duty_do <= pwm_duty @[pwm.scala 75:23]
    when io.reg_duty_we : @[pwm.scala 76:24]
      reg_duty <= io.reg_duty_di @[pwm.scala 77:14]
      skip @[pwm.scala 76:24]
    when stop_out : @[pwm.scala 80:18]
      when pid_out_sel : @[pwm.scala 81:22]
        node _T_65 = asUInt(io.reg_pid_out) @[pwm.scala 82:40]
        pwm_duty <= _T_65 @[pwm.scala 82:16]
        skip @[pwm.scala 81:22]
      else : @[pwm.scala 83:16]
        pwm_duty <= reg_duty @[pwm.scala 84:16]
        skip @[pwm.scala 83:16]
      skip @[pwm.scala 80:18]
    reg proc_offset : UInt<32>, clock @[pwm.scala 88:24]
    reg pwm_ld : UInt<1>, clock @[pwm.scala 89:24]
    reg pwm_hd : UInt<1>, clock @[pwm.scala 90:24]
    node pwm_db_twice = dshl(pwm_db, UInt<1>("h01")) @[pwm.scala 93:30]
    node _T_70 = geq(pwm_duty, pwm_db_twice) @[pwm.scala 95:37]
    node _T_71 = sub(value_reload, pwm_db_twice) @[pwm.scala 95:84]
    node _T_72 = asUInt(_T_71) @[pwm.scala 95:84]
    node _T_73 = tail(_T_72, 1) @[pwm.scala 95:84]
    node _T_74 = leq(pwm_duty, _T_73) @[pwm.scala 95:67]
    node _T_75 = and(_T_70, _T_74) @[pwm.scala 95:54]
    node _T_76 = lt(pwm_duty, pwm_db_twice) @[pwm.scala 96:36]
    node _T_77 = sub(value_reload, pwm_db_twice) @[pwm.scala 96:80]
    node _T_78 = asUInt(_T_77) @[pwm.scala 96:80]
    node _T_79 = tail(_T_78, 1) @[pwm.scala 96:80]
    node _T_80 = mux(_T_76, pwm_db_twice, _T_79) @[pwm.scala 96:26]
    node _T_81 = mux(_T_75, pwm_duty, _T_80) @[pwm.scala 95:26]
    proc_offset <= _T_81 @[pwm.scala 95:20]
    node _T_82 = sub(proc_offset, pwm_db) @[pwm.scala 97:48]
    node _T_83 = asUInt(_T_82) @[pwm.scala 97:48]
    node _T_84 = tail(_T_83, 1) @[pwm.scala 97:48]
    node _T_85 = lt(value_cur, _T_84) @[pwm.scala 97:33]
    pwm_hd <= _T_85 @[pwm.scala 97:20]
    node _T_86 = gt(value_cur, proc_offset) @[pwm.scala 98:34]
    node _T_87 = sub(value_reload, pwm_db) @[pwm.scala 98:79]
    node _T_88 = asUInt(_T_87) @[pwm.scala 98:79]
    node _T_89 = tail(_T_88, 1) @[pwm.scala 98:79]
    node _T_90 = lt(value_cur, _T_89) @[pwm.scala 98:63]
    node _T_91 = and(_T_86, _T_90) @[pwm.scala 98:49]
    pwm_ld <= _T_91 @[pwm.scala 98:20]
    node _T_92 = and(pwm_hd, enable) @[pwm.scala 99:30]
    io.pwm_h <= _T_92 @[pwm.scala 99:20]
    node _T_93 = and(pwm_ld, enable) @[pwm.scala 100:30]
    io.pwm_l <= _T_93 @[pwm.scala 100:20]
    io.irq_out <= irq_out @[pwm.scala 103:20]
    node _T_94 = not(irq_out) @[pwm.scala 104:34]
    node _T_95 = and(stop_out, _T_94) @[pwm.scala 104:32]
    io.rawirq_out <= _T_95 @[pwm.scala 104:20]
    node _T_97 = bits(pwm_db, 3, 0) @[pwm.scala 107:44]
    node _T_98 = cat(irq_ena, updown) @[Cat.scala 30:58]
    node _T_99 = cat(_T_98, enable) @[Cat.scala 30:58]
    node _T_100 = cat(UInt<24>("h00"), _T_97) @[Cat.scala 30:58]
    node _T_101 = cat(_T_100, pid_out_sel) @[Cat.scala 30:58]
    node _T_102 = cat(_T_101, _T_99) @[Cat.scala 30:58]
    io.reg_cfg_do <= _T_102 @[pwm.scala 107:20]
    when io.reg_cfg_we : @[pwm.scala 108:23]
      node _T_103 = bits(io.reg_cfg_di, 0, 0) @[pwm.scala 109:35]
      enable <= _T_103 @[pwm.scala 109:19]
      node _T_104 = bits(io.reg_cfg_di, 1, 1) @[pwm.scala 110:35]
      updown <= _T_104 @[pwm.scala 110:19]
      node _T_105 = bits(io.reg_cfg_di, 2, 2) @[pwm.scala 111:35]
      irq_ena <= _T_105 @[pwm.scala 111:19]
      node _T_106 = bits(io.reg_cfg_di, 3, 3) @[pwm.scala 112:35]
      pid_out_sel <= _T_106 @[pwm.scala 112:19]
      node _T_107 = bits(io.reg_cfg_di, 7, 4) @[pwm.scala 113:36]
      node _T_109 = add(_T_107, UInt<2>("h02")) @[pwm.scala 113:42]
      node _T_110 = tail(_T_109, 1) @[pwm.scala 113:42]
      pwm_db <= _T_110 @[pwm.scala 113:19]
      skip @[pwm.scala 108:23]
    io.reg_val_do <= value_reload @[pwm.scala 117:19]
    node _T_112 = neq(io.reg_val_we, UInt<1>("h00")) @[pwm.scala 118:25]
    when _T_112 : @[pwm.scala 118:29]
      value_reload <= io.reg_val_di @[pwm.scala 119:19]
      skip @[pwm.scala 118:29]
    io.reg_dat_do <= value_cur @[pwm.scala 123:19]
    node _T_114 = add(value_cur, UInt<1>("h01")) @[pwm.scala 124:39]
    node _T_115 = tail(_T_114, 1) @[pwm.scala 124:39]
    value_cur_plus <= _T_115 @[pwm.scala 124:19]
    node _T_117 = sub(value_cur, UInt<1>("h01")) @[pwm.scala 125:39]
    node _T_118 = asUInt(_T_117) @[pwm.scala 125:39]
    node _T_119 = tail(_T_118, 1) @[pwm.scala 125:39]
    value_cur_minus <= _T_119 @[pwm.scala 125:19]
    loc_enable <= enable @[pwm.scala 126:19]
    lastenable <= loc_enable @[pwm.scala 129:19]
    node _T_121 = neq(io.reg_dat_we, UInt<1>("h00")) @[pwm.scala 130:25]
    when _T_121 : @[pwm.scala 130:29]
      value_cur <= io.reg_dat_di @[pwm.scala 131:19]
      skip @[pwm.scala 130:29]
    else : @[pwm.scala 132:39]
      node _T_123 = eq(loc_enable, UInt<1>("h01")) @[pwm.scala 132:27]
      when _T_123 : @[pwm.scala 132:39]
        node _T_124 = not(irq_out) @[pwm.scala 135:47]
        node _T_125 = and(stop_out, _T_124) @[pwm.scala 135:45]
        node _T_127 = mux(irq_ena, _T_125, UInt<1>("h00")) @[pwm.scala 135:23]
        irq_out <= _T_127 @[pwm.scala 135:17]
        node _T_129 = eq(updown, UInt<1>("h01")) @[pwm.scala 137:19]
        when _T_129 : @[pwm.scala 137:31]
          node _T_131 = eq(lastenable, UInt<1>("h00")) @[pwm.scala 138:25]
          when _T_131 : @[pwm.scala 138:38]
            value_cur <= UInt<32>("h00") @[pwm.scala 139:21]
            stop_out <= UInt<1>("h00") @[pwm.scala 140:21]
            skip @[pwm.scala 138:38]
          else : @[pwm.scala 141:22]
            node _T_134 = eq(value_cur, value_reload) @[pwm.scala 143:33]
            when _T_134 : @[pwm.scala 143:58]
              value_cur <= UInt<32>("h00") @[pwm.scala 144:23]
              stop_out <= UInt<1>("h01") @[pwm.scala 145:23]
              skip @[pwm.scala 143:58]
            else : @[pwm.scala 146:24]
              value_cur <= value_cur_plus @[pwm.scala 147:23]
              stop_out <= UInt<1>("h00") @[pwm.scala 148:23]
              skip @[pwm.scala 146:24]
            skip @[pwm.scala 141:22]
          skip @[pwm.scala 137:31]
        else : @[pwm.scala 151:20]
          node _T_139 = eq(lastenable, UInt<1>("h00")) @[pwm.scala 153:25]
          when _T_139 : @[pwm.scala 153:38]
            value_cur <= value_reload @[pwm.scala 154:23]
            stop_out <= UInt<1>("h00") @[pwm.scala 155:23]
            skip @[pwm.scala 153:38]
          else : @[pwm.scala 156:22]
            node _T_142 = eq(value_cur, UInt<32>("h00")) @[pwm.scala 158:35]
            when _T_142 : @[pwm.scala 158:50]
              value_cur <= value_reload @[pwm.scala 159:25]
              stop_out <= UInt<1>("h01") @[pwm.scala 160:25]
              skip @[pwm.scala 158:50]
            else : @[pwm.scala 161:25]
              value_cur <= value_cur_minus @[pwm.scala 162:25]
              stop_out <= UInt<1>("h00") @[pwm.scala 163:25]
              skip @[pwm.scala 161:25]
            skip @[pwm.scala 156:22]
          skip @[pwm.scala 151:20]
        skip @[pwm.scala 132:39]
    
  module Quad_Encoder_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip quad_a : UInt<1>, flip quad_b : UInt<1>, flip raw_irq : UInt<1>, flip reg_count_we : UInt<1>, flip reg_count_di : UInt<32>, reg_count_do : UInt<32>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : UInt<32>, reg_cfg_do : UInt<32>, reg_speed_do : SInt<16>, fb_period : UInt<1>}
    
    reg quad_a_delayed : UInt<3>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 35:33]
    reg quad_b_delayed : UInt<3>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 36:33]
    reg count_reg : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 37:33]
    reg count_reg_2 : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 38:33]
    reg period_count : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 39:33]
    reg speed_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[qei.scala 41:33]
    reg count_sel_2x : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[qei.scala 42:33]
    reg count_old : UInt<32>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 43:33]
    reg qei_output : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 44:33]
    reg qei_speed_count : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 45:33]
    reg qei_period_count : UInt<16>, clock with : (reset => (reset, UInt<13>("h01fff"))) @[qei.scala 46:33]
    reg period_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[qei.scala 47:33]
    io.reg_count_do <= count_reg @[qei.scala 49:23]
    node _T_51 = bits(quad_a_delayed, 1, 1) @[qei.scala 51:44]
    node _T_52 = bits(quad_a_delayed, 0, 0) @[qei.scala 51:63]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 30:58]
    node _T_54 = cat(_T_53, io.quad_a) @[Cat.scala 30:58]
    quad_a_delayed <= _T_54 @[qei.scala 51:23]
    node _T_55 = bits(quad_b_delayed, 1, 1) @[qei.scala 52:44]
    node _T_56 = bits(quad_b_delayed, 0, 0) @[qei.scala 52:63]
    node _T_57 = cat(_T_55, _T_56) @[Cat.scala 30:58]
    node _T_58 = cat(_T_57, io.quad_b) @[Cat.scala 30:58]
    quad_b_delayed <= _T_58 @[qei.scala 52:23]
    node _T_60 = bits(quad_a_delayed, 1, 1) @[qei.scala 54:57]
    node _T_61 = bits(quad_a_delayed, 2, 2) @[qei.scala 54:75]
    node _T_62 = xor(_T_60, _T_61) @[qei.scala 54:60]
    wire count_2x : UInt<1>
    count_2x <= _T_62
    node _T_64 = bits(quad_a_delayed, 1, 1) @[qei.scala 55:57]
    node _T_65 = bits(quad_a_delayed, 2, 2) @[qei.scala 55:75]
    node _T_66 = xor(_T_64, _T_65) @[qei.scala 55:60]
    node _T_67 = bits(quad_b_delayed, 1, 1) @[qei.scala 55:93]
    node _T_68 = xor(_T_66, _T_67) @[qei.scala 55:78]
    node _T_69 = bits(quad_b_delayed, 2, 2) @[qei.scala 55:111]
    node _T_70 = xor(_T_68, _T_69) @[qei.scala 55:96]
    wire count_4x : UInt<1>
    count_4x <= _T_70
    node _T_72 = bits(quad_a_delayed, 1, 1) @[qei.scala 56:57]
    node _T_73 = bits(quad_b_delayed, 2, 2) @[qei.scala 56:75]
    node _T_74 = xor(_T_72, _T_73) @[qei.scala 56:60]
    wire count_direction : UInt<1>
    count_direction <= _T_74
    node count_pulses = mux(count_sel_2x, count_2x, count_4x) @[qei.scala 57:29]
    when count_pulses : @[qei.scala 62:22]
      when count_direction : @[qei.scala 63:27]
        node _T_76 = add(count_reg, UInt<1>("h01")) @[qei.scala 64:36]
        node _T_77 = tail(_T_76, 1) @[qei.scala 64:36]
        count_reg <= _T_77 @[qei.scala 64:23]
        skip @[qei.scala 63:27]
      else : @[qei.scala 65:18]
        node _T_79 = sub(count_reg, UInt<1>("h01")) @[qei.scala 66:36]
        node _T_80 = asUInt(_T_79) @[qei.scala 66:36]
        node _T_81 = tail(_T_80, 1) @[qei.scala 66:36]
        count_reg <= _T_81 @[qei.scala 66:23]
        skip @[qei.scala 65:18]
      skip @[qei.scala 62:22]
    node _T_82 = or(io.raw_irq, count_pulses) @[qei.scala 71:20]
    when _T_82 : @[qei.scala 71:37]
      when io.raw_irq : @[qei.scala 72:23]
        qei_speed_count <= count_reg_2 @[qei.scala 73:23]
        count_reg_2 <= UInt<1>("h00") @[qei.scala 74:23]
        skip @[qei.scala 72:23]
      else : @[qei.scala 75:17]
        node _T_85 = add(count_reg_2, UInt<1>("h01")) @[qei.scala 76:38]
        node _T_86 = tail(_T_85, 1) @[qei.scala 76:38]
        count_reg_2 <= _T_86 @[qei.scala 76:23]
        skip @[qei.scala 75:17]
      skip @[qei.scala 71:37]
    when period_sel : @[qei.scala 81:20]
      when count_pulses : @[qei.scala 82:24]
        qei_period_count <= period_count @[qei.scala 83:24]
        period_count <= UInt<1>("h00") @[qei.scala 84:24]
        skip @[qei.scala 82:24]
      else : @[qei.scala 85:40]
        node _T_89 = eq(period_count, UInt<8>("h0ff")) @[qei.scala 85:29]
        when _T_89 : @[qei.scala 85:40]
          qei_period_count <= period_count @[qei.scala 86:24]
          period_count <= UInt<1>("h00") @[qei.scala 87:24]
          skip @[qei.scala 85:40]
        else : @[qei.scala 88:17]
          node _T_92 = add(period_count, UInt<1>("h01")) @[qei.scala 89:40]
          node _T_93 = tail(_T_92, 1) @[qei.scala 89:40]
          period_count <= _T_93 @[qei.scala 89:24]
          skip @[qei.scala 88:17]
      skip @[qei.scala 81:20]
    node _T_94 = mux(period_sel, qei_period_count, qei_speed_count) @[qei.scala 94:30]
    qei_output <= _T_94 @[qei.scala 94:24]
    node _T_96 = cat(speed_enable, count_sel_2x) @[Cat.scala 30:58]
    node _T_97 = cat(UInt<29>("h00"), period_sel) @[Cat.scala 30:58]
    node _T_98 = cat(_T_97, _T_96) @[Cat.scala 30:58]
    io.reg_cfg_do <= _T_98 @[qei.scala 97:24]
    node _T_99 = bits(qei_output, 15, 0) @[qei.scala 100:37]
    node _T_100 = asSInt(_T_99) @[qei.scala 100:50]
    io.reg_speed_do <= _T_100 @[qei.scala 100:24]
    io.fb_period <= period_sel @[qei.scala 101:24]
    when io.reg_count_we : @[qei.scala 103:25]
      count_reg <= io.reg_count_di @[qei.scala 104:24]
      skip @[qei.scala 103:25]
    else : @[qei.scala 105:28]
      when io.reg_cfg_we : @[qei.scala 105:28]
        node _T_101 = bits(io.reg_cfg_di, 0, 0) @[qei.scala 106:40]
        count_sel_2x <= _T_101 @[qei.scala 106:24]
        node _T_102 = bits(io.reg_cfg_di, 1, 1) @[qei.scala 107:40]
        speed_enable <= _T_102 @[qei.scala 107:24]
        node _T_103 = bits(io.reg_cfg_di, 2, 2) @[qei.scala 108:40]
        period_sel <= _T_103 @[qei.scala 108:24]
        skip @[qei.scala 105:28]
    
  module vedic_2x2_312 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_313 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_314 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_315 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_78 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_312 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_313 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_314 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_315 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_316 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_317 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_318 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_319 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_79 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_316 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_317 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_318 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_319 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_320 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_321 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_322 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_323 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_80 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_320 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_321 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_322 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_323 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_324 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_325 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_326 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_327 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_81 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_324 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_325 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_326 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_327 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_18 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_78 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_79 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_80 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_81 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_328 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_329 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_330 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_331 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_82 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_328 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_329 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_330 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_331 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_332 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_333 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_334 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_335 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_83 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_332 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_333 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_334 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_335 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_336 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_337 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_338 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_339 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_84 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_336 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_337 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_338 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_339 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_340 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_341 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_342 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_343 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_85 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_340 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_341 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_342 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_343 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_19 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_82 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_83 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_84 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_85 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_344 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_345 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_346 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_347 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_86 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_344 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_345 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_346 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_347 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_348 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_349 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_350 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_351 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_87 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_348 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_349 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_350 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_351 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_352 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_353 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_354 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_355 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_88 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_352 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_353 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_354 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_355 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_356 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_357 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_358 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_359 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_89 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_356 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_357 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_358 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_359 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_20 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_86 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_87 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_88 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_89 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_360 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_361 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_362 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_363 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_90 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_360 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_361 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_362 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_363 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_18 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_19 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_20 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_90 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module vedic_2x2_364 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_365 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_366 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_367 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_91 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_364 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_365 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_366 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_367 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_368 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_369 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_370 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_371 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_92 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_368 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_369 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_370 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_371 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_372 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_373 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_374 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_375 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_93 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_372 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_373 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_374 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_375 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_376 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_377 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_378 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_379 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_94 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_376 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_377 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_378 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_379 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_21 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_91 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_92 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_93 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_94 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_380 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_381 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_382 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_383 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_95 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_380 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_381 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_382 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_383 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_384 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_385 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_386 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_387 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_96 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_384 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_385 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_386 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_387 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_388 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_389 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_390 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_391 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_97 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_388 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_389 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_390 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_391 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_392 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_393 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_394 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_395 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_98 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_392 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_393 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_394 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_395 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_22 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_95 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_96 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_97 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_98 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_396 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_397 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_398 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_399 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_99 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_396 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_397 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_398 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_399 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_400 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_401 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_402 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_403 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_100 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_400 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_401 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_402 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_403 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_404 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_405 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_406 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_407 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_101 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_404 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_405 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_406 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_407 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_408 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_409 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_410 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_411 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_102 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_408 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_409 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_410 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_411 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_23 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_99 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_100 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_101 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_102 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_412 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_413 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_414 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_415 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_103 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_412 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_413 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_414 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_415 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_21 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_22 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_23 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_103 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module vedic_2x2_416 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_417 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_418 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_419 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_104 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_416 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_417 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_418 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_419 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_420 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_421 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_422 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_423 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_105 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_420 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_421 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_422 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_423 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_424 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_425 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_426 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_427 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_106 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_424 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_425 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_426 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_427 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_428 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_429 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_430 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_431 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_107 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_428 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_429 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_430 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_431 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_24 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_104 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_105 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_106 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_107 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_432 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_433 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_434 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_435 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_108 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_432 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_433 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_434 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_435 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_436 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_437 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_438 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_439 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_109 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_436 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_437 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_438 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_439 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_440 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_441 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_442 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_443 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_110 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_440 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_441 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_442 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_443 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_444 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_445 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_446 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_447 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_111 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_444 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_445 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_446 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_447 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_25 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_108 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_109 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_110 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_111 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_448 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_449 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_450 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_451 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_112 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_448 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_449 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_450 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_451 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_452 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_453 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_454 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_455 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_113 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_452 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_453 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_454 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_455 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_456 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_457 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_458 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_459 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_114 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_456 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_457 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_458 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_459 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_2x2_460 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_461 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_462 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_463 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_115 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_460 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_461 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_462 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_463 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_8x8_26 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, c : UInt<16>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 154:23]
    wire pp_hl : UInt<16> @[multiplier.scala 155:23]
    wire pp_lh : UInt<16> @[multiplier.scala 156:23]
    wire pp_hh : UInt<16> @[multiplier.scala 157:23]
    wire psum_1 : UInt<8> @[multiplier.scala 159:24]
    wire psum_2 : UInt<12> @[multiplier.scala 160:24]
    wire psum_3 : UInt<12> @[multiplier.scala 161:24]
    node input1 = bits(io.a, 7, 0) @[multiplier.scala 163:20]
    inst pp_1 of vedic_4x4_112 @[multiplier.scala 166:24]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(input1, 3, 0) @[multiplier.scala 167:25]
    pp_1.io.a <= _T_18 @[multiplier.scala 167:16]
    node _T_19 = bits(io.b, 3, 0) @[multiplier.scala 168:23]
    pp_1.io.b <= _T_19 @[multiplier.scala 168:16]
    pp_ll <= pp_1.io.c @[multiplier.scala 169:17]
    inst pp_2 of vedic_4x4_113 @[multiplier.scala 171:24]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(input1, 7, 4) @[multiplier.scala 172:25]
    pp_2.io.a <= _T_20 @[multiplier.scala 172:16]
    node _T_21 = bits(io.b, 3, 0) @[multiplier.scala 173:23]
    pp_2.io.b <= _T_21 @[multiplier.scala 173:16]
    pp_hl <= pp_2.io.c @[multiplier.scala 174:17]
    inst pp_3 of vedic_4x4_114 @[multiplier.scala 176:24]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(input1, 3, 0) @[multiplier.scala 177:25]
    pp_3.io.a <= _T_22 @[multiplier.scala 177:16]
    node _T_23 = bits(io.b, 7, 4) @[multiplier.scala 178:23]
    pp_3.io.b <= _T_23 @[multiplier.scala 178:16]
    pp_lh <= pp_3.io.c @[multiplier.scala 179:17]
    inst pp_4 of vedic_4x4_115 @[multiplier.scala 181:24]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(input1, 7, 4) @[multiplier.scala 182:25]
    pp_4.io.a <= _T_24 @[multiplier.scala 182:16]
    node _T_25 = bits(io.b, 7, 4) @[multiplier.scala 183:23]
    pp_4.io.b <= _T_25 @[multiplier.scala 183:16]
    pp_hh <= pp_4.io.c @[multiplier.scala 184:17]
    node _T_26 = bits(pp_hl, 7, 0) @[multiplier.scala 188:26]
    node _T_28 = bits(pp_ll, 7, 4) @[multiplier.scala 188:56]
    node _T_29 = cat(UInt<4>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 188:32]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 188:32]
    psum_1 <= _T_31 @[multiplier.scala 188:18]
    node _T_32 = bits(pp_hh, 7, 0) @[multiplier.scala 189:30]
    node _T_34 = cat(_T_32, UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 7, 0) @[multiplier.scala 189:81]
    node _T_37 = cat(UInt<4>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 189:57]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 189:57]
    psum_2 <= _T_39 @[multiplier.scala 189:18]
    node _T_41 = bits(psum_1, 7, 0) @[multiplier.scala 190:44]
    node _T_42 = cat(UInt<4>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 190:58]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 190:58]
    psum_3 <= _T_44 @[multiplier.scala 190:18]
    node result1 = bits(pp_ll, 3, 0) @[multiplier.scala 192:22]
    node result2 = bits(psum_3, 11, 0) @[multiplier.scala 193:23]
    node op_final = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= op_final @[multiplier.scala 196:15]
    
  module vedic_2x2_464 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_465 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_466 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_2x2_467 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<2>, flip b : UInt<2>, c : UInt<4>}
    
    node _T_11 = bits(io.a, 0, 0) @[multiplier.scala 25:21]
    node _T_12 = bits(io.b, 0, 0) @[multiplier.scala 25:31]
    node result0 = and(_T_11, _T_12) @[multiplier.scala 25:25]
    node _T_13 = bits(io.a, 1, 1) @[multiplier.scala 26:20]
    node _T_14 = bits(io.b, 0, 0) @[multiplier.scala 26:30]
    node a1b0 = and(_T_13, _T_14) @[multiplier.scala 26:24]
    node _T_15 = bits(io.a, 0, 0) @[multiplier.scala 27:20]
    node _T_16 = bits(io.b, 1, 1) @[multiplier.scala 27:30]
    node a0b1 = and(_T_15, _T_16) @[multiplier.scala 27:24]
    node _T_17 = bits(io.a, 1, 1) @[multiplier.scala 28:20]
    node _T_18 = bits(io.b, 1, 1) @[multiplier.scala 28:30]
    node a1b1 = and(_T_17, _T_18) @[multiplier.scala 28:24]
    node result1 = xor(a1b0, a0b1) @[multiplier.scala 31:22]
    node carry1 = and(a1b0, a0b1) @[multiplier.scala 32:23]
    node result2 = xor(a1b1, carry1) @[multiplier.scala 34:22]
    node result3 = and(a1b1, carry1) @[multiplier.scala 35:22]
    node _T_19 = cat(result1, result0) @[Cat.scala 30:58]
    node _T_20 = cat(result3, result2) @[Cat.scala 30:58]
    node _T_21 = cat(_T_20, _T_19) @[Cat.scala 30:58]
    io.c <= _T_21 @[multiplier.scala 37:15]
    
  module vedic_4x4_116 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<4>, flip b : UInt<4>, c : UInt<8>}
    
    wire pp_ll : UInt<4> @[multiplier.scala 49:24]
    wire pp_hl : UInt<4> @[multiplier.scala 50:24]
    wire pp_lh : UInt<4> @[multiplier.scala 51:24]
    wire pp_hh : UInt<4> @[multiplier.scala 52:24]
    wire psum_1 : UInt<4> @[multiplier.scala 54:25]
    wire psum_2 : UInt<6> @[multiplier.scala 55:25]
    wire psum_3 : UInt<6> @[multiplier.scala 56:25]
    inst pp_1 of vedic_2x2_464 @[multiplier.scala 59:25]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_18 = bits(io.a, 1, 0) @[multiplier.scala 60:24]
    pp_1.io.a <= _T_18 @[multiplier.scala 60:17]
    node _T_19 = bits(io.b, 1, 0) @[multiplier.scala 61:24]
    pp_1.io.b <= _T_19 @[multiplier.scala 61:17]
    pp_ll <= pp_1.io.c @[multiplier.scala 62:18]
    inst pp_2 of vedic_2x2_465 @[multiplier.scala 64:25]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_20 = bits(io.a, 3, 2) @[multiplier.scala 65:24]
    pp_2.io.a <= _T_20 @[multiplier.scala 65:17]
    node _T_21 = bits(io.b, 1, 0) @[multiplier.scala 66:24]
    pp_2.io.b <= _T_21 @[multiplier.scala 66:17]
    pp_hl <= pp_2.io.c @[multiplier.scala 67:18]
    inst pp_3 of vedic_2x2_466 @[multiplier.scala 68:25]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_22 = bits(io.a, 1, 0) @[multiplier.scala 69:24]
    pp_3.io.a <= _T_22 @[multiplier.scala 69:17]
    node _T_23 = bits(io.b, 3, 2) @[multiplier.scala 70:24]
    pp_3.io.b <= _T_23 @[multiplier.scala 70:17]
    pp_lh <= pp_3.io.c @[multiplier.scala 71:18]
    inst pp_4 of vedic_2x2_467 @[multiplier.scala 73:25]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_24 = bits(io.a, 3, 2) @[multiplier.scala 74:24]
    pp_4.io.a <= _T_24 @[multiplier.scala 74:17]
    node _T_25 = bits(io.b, 3, 2) @[multiplier.scala 75:24]
    pp_4.io.b <= _T_25 @[multiplier.scala 75:17]
    pp_hh <= pp_4.io.c @[multiplier.scala 76:17]
    node _T_26 = bits(pp_hl, 3, 0) @[multiplier.scala 79:25]
    node _T_28 = bits(pp_ll, 3, 2) @[multiplier.scala 79:55]
    node _T_29 = cat(UInt<2>("h00"), _T_28) @[Cat.scala 30:58]
    node _T_30 = add(_T_26, _T_29) @[multiplier.scala 79:31]
    node _T_31 = tail(_T_30, 1) @[multiplier.scala 79:31]
    psum_1 <= _T_31 @[multiplier.scala 79:17]
    node _T_32 = bits(pp_hh, 3, 0) @[multiplier.scala 80:29]
    node _T_34 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_36 = bits(pp_lh, 3, 0) @[multiplier.scala 80:80]
    node _T_37 = cat(UInt<2>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 80:56]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 80:56]
    psum_2 <= _T_39 @[multiplier.scala 80:17]
    node _T_41 = bits(psum_1, 3, 0) @[multiplier.scala 81:43]
    node _T_42 = cat(UInt<2>("h00"), _T_41) @[Cat.scala 30:58]
    node _T_43 = add(_T_42, psum_2) @[multiplier.scala 81:57]
    node _T_44 = tail(_T_43, 1) @[multiplier.scala 81:57]
    psum_3 <= _T_44 @[multiplier.scala 81:17]
    node result1 = bits(pp_ll, 1, 0) @[multiplier.scala 83:22]
    node result2 = bits(psum_3, 5, 0) @[multiplier.scala 84:23]
    node _T_45 = cat(result2, result1) @[Cat.scala 30:58]
    io.c <= _T_45 @[multiplier.scala 86:15]
    
  module vedic_16x16_8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : UInt<16>, c : SInt<32>}
    
    wire pp_ll : UInt<16> @[multiplier.scala 208:31]
    wire pp_hl : UInt<16> @[multiplier.scala 209:31]
    wire pp_lh : UInt<16> @[multiplier.scala 210:31]
    wire pp_hh : UInt<16> @[multiplier.scala 211:31]
    wire psum_1 : UInt<16> @[multiplier.scala 213:32]
    wire psum_2 : UInt<24> @[multiplier.scala 214:32]
    wire psum_3 : UInt<24> @[multiplier.scala 215:32]
    node _T_18 = not(io.a) @[multiplier.scala 217:25]
    node _T_19 = asSInt(_T_18) @[multiplier.scala 217:25]
    node _T_20 = asUInt(_T_19) @[multiplier.scala 217:38]
    node _T_22 = add(_T_20, UInt<1>("h01")) @[multiplier.scala 217:41]
    node in1_complement = tail(_T_22, 1) @[multiplier.scala 217:41]
    node _T_23 = bits(io.a, 15, 15) @[multiplier.scala 218:32]
    node _T_24 = bits(in1_complement, 15, 0) @[multiplier.scala 218:52]
    node _T_25 = bits(io.a, 15, 0) @[multiplier.scala 218:64]
    node input1 = mux(_T_23, _T_24, _T_25) @[multiplier.scala 218:27]
    inst pp_1 of vedic_8x8_24 @[multiplier.scala 221:32]
    pp_1.clock <= clock
    pp_1.reset <= reset
    node _T_26 = bits(input1, 7, 0) @[multiplier.scala 222:33]
    pp_1.io.a <= _T_26 @[multiplier.scala 222:24]
    node _T_27 = bits(io.b, 7, 0) @[multiplier.scala 223:31]
    pp_1.io.b <= _T_27 @[multiplier.scala 223:24]
    pp_ll <= pp_1.io.c @[multiplier.scala 224:25]
    inst pp_2 of vedic_8x8_25 @[multiplier.scala 226:32]
    pp_2.clock <= clock
    pp_2.reset <= reset
    node _T_28 = bits(input1, 15, 8) @[multiplier.scala 227:33]
    pp_2.io.a <= _T_28 @[multiplier.scala 227:24]
    node _T_29 = bits(io.b, 7, 0) @[multiplier.scala 228:31]
    pp_2.io.b <= _T_29 @[multiplier.scala 228:24]
    pp_hl <= pp_2.io.c @[multiplier.scala 229:25]
    inst pp_3 of vedic_8x8_26 @[multiplier.scala 231:32]
    pp_3.clock <= clock
    pp_3.reset <= reset
    node _T_30 = bits(input1, 7, 0) @[multiplier.scala 232:33]
    pp_3.io.a <= _T_30 @[multiplier.scala 232:24]
    node _T_31 = bits(io.b, 15, 8) @[multiplier.scala 233:31]
    pp_3.io.b <= _T_31 @[multiplier.scala 233:24]
    pp_lh <= pp_3.io.c @[multiplier.scala 234:25]
    inst pp_4 of vedic_4x4_116 @[multiplier.scala 236:32]
    pp_4.clock <= clock
    pp_4.reset <= reset
    node _T_32 = bits(input1, 15, 8) @[multiplier.scala 237:33]
    pp_4.io.a <= _T_32 @[multiplier.scala 237:24]
    node _T_33 = bits(io.b, 15, 8) @[multiplier.scala 238:31]
    pp_4.io.b <= _T_33 @[multiplier.scala 238:24]
    pp_hh <= pp_4.io.c @[multiplier.scala 239:25]
    node _T_34 = bits(pp_hl, 15, 0) @[multiplier.scala 242:22]
    node _T_36 = bits(pp_ll, 15, 8) @[multiplier.scala 242:53]
    node _T_37 = cat(UInt<8>("h00"), _T_36) @[Cat.scala 30:58]
    node _T_38 = add(_T_34, _T_37) @[multiplier.scala 242:29]
    node _T_39 = tail(_T_38, 1) @[multiplier.scala 242:29]
    psum_1 <= _T_39 @[multiplier.scala 242:14]
    node _T_40 = bits(pp_hh, 15, 0) @[multiplier.scala 243:26]
    node _T_42 = cat(_T_40, UInt<8>("h00")) @[Cat.scala 30:58]
    node _T_44 = bits(pp_lh, 15, 0) @[multiplier.scala 243:78]
    node _T_45 = cat(UInt<8>("h00"), _T_44) @[Cat.scala 30:58]
    node _T_46 = add(_T_42, _T_45) @[multiplier.scala 243:54]
    node _T_47 = tail(_T_46, 1) @[multiplier.scala 243:54]
    psum_2 <= _T_47 @[multiplier.scala 243:14]
    node _T_49 = bits(psum_1, 15, 0) @[multiplier.scala 244:40]
    node _T_50 = cat(UInt<8>("h00"), _T_49) @[Cat.scala 30:58]
    node _T_51 = add(_T_50, psum_2) @[multiplier.scala 244:56]
    node _T_52 = tail(_T_51, 1) @[multiplier.scala 244:56]
    psum_3 <= _T_52 @[multiplier.scala 244:14]
    node result1 = bits(pp_ll, 7, 0) @[multiplier.scala 246:29]
    node result2 = bits(psum_3, 23, 0) @[multiplier.scala 247:30]
    node result = cat(result2, result1) @[Cat.scala 30:58]
    node _T_53 = not(result) @[multiplier.scala 249:28]
    node _T_54 = asSInt(_T_53) @[multiplier.scala 249:43]
    node _T_56 = add(_T_54, asSInt(UInt<2>("h01"))) @[multiplier.scala 249:46]
    node _T_57 = tail(_T_56, 1) @[multiplier.scala 249:46]
    node result_complement = asSInt(_T_57) @[multiplier.scala 249:46]
    node _T_58 = bits(io.a, 15, 15) @[multiplier.scala 251:32]
    node _T_59 = asSInt(result) @[multiplier.scala 251:70]
    node result_final = mux(_T_58, result_complement, _T_59) @[multiplier.scala 251:27]
    io.c <= result_final @[multiplier.scala 252:22]
    
  module PID_Controller_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip fb_period : UInt<1>, flip raw_irq : UInt<1>, flip reg_kp_we : UInt<1>, flip reg_kp_di : SInt<16>, reg_kp_do : SInt<16>, flip reg_ki_we : UInt<1>, flip reg_ki_di : SInt<16>, reg_ki_do : SInt<16>, flip reg_kd_we : UInt<1>, flip reg_kd_di : SInt<16>, reg_kd_do : SInt<16>, flip reg_ref_we : UInt<1>, flip reg_ref_di : SInt<16>, reg_ref_do : SInt<16>, flip reg_fb_we : UInt<1>, flip reg_fb_di : SInt<16>, reg_fb_do : SInt<16>, flip reg_cfg_we : UInt<1>, flip reg_cfg_di : SInt<16>, reg_cfg_do : SInt<16>, flip speed_fb_in : SInt<16>, pid_out : SInt<16>}
    
    reg kp : SInt<16>, clock with : (reset => (reset, asSInt(UInt<2>("h01")))) @[pid.scala 56:26]
    reg ki : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 57:26]
    reg kd : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 58:26]
    reg ref : SInt<16>, clock with : (reset => (reset, asSInt(UInt<6>("h014")))) @[pid.scala 59:26]
    reg feedback : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 60:26]
    reg sigma_old : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 61:26]
    reg fb_sel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pid.scala 62:26]
    reg e_prev1 : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 64:26]
    reg e_prev2 : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 65:26]
    reg reg_pid_out : SInt<16>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[pid.scala 66:28]
    io.reg_kp_do <= kp @[pid.scala 69:17]
    when io.reg_kp_we : @[pid.scala 70:22]
      kp <= io.reg_kp_di @[pid.scala 71:8]
      skip @[pid.scala 70:22]
    io.reg_ki_do <= ki @[pid.scala 74:17]
    when io.reg_ki_we : @[pid.scala 75:22]
      ki <= io.reg_ki_di @[pid.scala 76:8]
      skip @[pid.scala 75:22]
    io.reg_kd_do <= kd @[pid.scala 79:17]
    when io.reg_kd_we : @[pid.scala 80:22]
      kd <= io.reg_kd_di @[pid.scala 81:8]
      skip @[pid.scala 80:22]
    io.reg_ref_do <= ref @[pid.scala 85:17]
    when io.reg_ref_we : @[pid.scala 86:23]
      ref <= io.reg_ref_di @[pid.scala 87:9]
      skip @[pid.scala 86:23]
    io.reg_fb_do <= feedback @[pid.scala 90:17]
    when fb_sel : @[pid.scala 92:16]
      when io.reg_fb_we : @[pid.scala 93:24]
        feedback <= io.reg_fb_di @[pid.scala 94:15]
        skip @[pid.scala 93:24]
      skip @[pid.scala 92:16]
    else : @[pid.scala 96:14]
      feedback <= io.speed_fb_in @[pid.scala 97:15]
      skip @[pid.scala 96:14]
    node _T_70 = cat(UInt<31>("h00"), fb_sel) @[Cat.scala 30:58]
    node _T_71 = asSInt(_T_70) @[pid.scala 100:49]
    io.reg_cfg_do <= _T_71 @[pid.scala 100:17]
    when io.reg_cfg_we : @[pid.scala 101:23]
      node _T_72 = bits(io.reg_cfg_di, 0, 0) @[pid.scala 102:28]
      fb_sel <= _T_72 @[pid.scala 102:12]
      skip @[pid.scala 101:23]
    node _T_73 = sub(e_prev1, e_prev2) @[pid.scala 106:27]
    node _T_74 = tail(_T_73, 1) @[pid.scala 106:27]
    node delta_err = asSInt(_T_74) @[pid.scala 106:27]
    node _T_75 = add(e_prev1, sigma_old) @[pid.scala 107:27]
    node _T_76 = tail(_T_75, 1) @[pid.scala 107:27]
    node sigma_new = asSInt(_T_76) @[pid.scala 107:27]
    inst mul_kp of vedic_16x16_6 @[pid.scala 110:25]
    mul_kp.clock <= clock
    mul_kp.reset <= reset
    mul_kp.io.a <= e_prev1 @[pid.scala 111:17]
    node _T_77 = asUInt(kp) @[pid.scala 112:29]
    mul_kp.io.b <= _T_77 @[pid.scala 112:17]
    node _T_78 = bits(mul_kp.io.c, 15, 0) @[pid.scala 113:30]
    node prop_out = asSInt(_T_78) @[pid.scala 113:43]
    inst mul_ki of vedic_16x16_7 @[pid.scala 116:25]
    mul_ki.clock <= clock
    mul_ki.reset <= reset
    mul_ki.io.a <= sigma_new @[pid.scala 117:17]
    node _T_79 = asUInt(ki) @[pid.scala 118:29]
    mul_ki.io.b <= _T_79 @[pid.scala 118:17]
    node _T_80 = bits(mul_ki.io.c, 15, 0) @[pid.scala 119:33]
    node integral_out = asSInt(_T_80) @[pid.scala 119:46]
    inst mul_kd of vedic_16x16_8 @[pid.scala 122:25]
    mul_kd.clock <= clock
    mul_kd.reset <= reset
    mul_kd.io.a <= delta_err @[pid.scala 123:17]
    node _T_81 = asUInt(kd) @[pid.scala 124:29]
    mul_kd.io.b <= _T_81 @[pid.scala 124:17]
    node _T_82 = bits(mul_kd.io.c, 15, 0) @[pid.scala 125:35]
    node derivative_out = asSInt(_T_82) @[pid.scala 125:48]
    node _T_83 = add(prop_out, integral_out) @[pid.scala 128:28]
    node _T_84 = tail(_T_83, 1) @[pid.scala 128:28]
    node pi_sum = asSInt(_T_84) @[pid.scala 128:28]
    node _T_85 = bits(prop_out, 15, 15) @[pid.scala 129:34]
    node _T_86 = bits(integral_out, 15, 15) @[pid.scala 129:54]
    node _T_87 = and(_T_85, _T_86) @[pid.scala 129:39]
    node _T_88 = bits(pi_sum, 15, 15) @[pid.scala 129:69]
    node _T_90 = eq(_T_88, UInt<1>("h00")) @[pid.scala 129:62]
    node _T_91 = and(_T_87, _T_90) @[pid.scala 129:59]
    node _T_92 = bits(prop_out, 15, 15) @[pid.scala 130:35]
    node _T_94 = eq(_T_92, UInt<1>("h00")) @[pid.scala 130:26]
    node _T_95 = bits(integral_out, 15, 15) @[pid.scala 130:56]
    node _T_97 = eq(_T_95, UInt<1>("h00")) @[pid.scala 130:43]
    node _T_98 = and(_T_94, _T_97) @[pid.scala 130:40]
    node _T_99 = bits(pi_sum, 15, 15) @[pid.scala 130:70]
    node _T_100 = and(_T_98, _T_99) @[pid.scala 130:61]
    node pi_sum_overflow = or(_T_91, _T_100) @[pid.scala 129:75]
    when io.raw_irq : @[pid.scala 132:20]
      when io.fb_period : @[pid.scala 134:23]
        node _T_101 = sub(feedback, ref) @[pid.scala 135:29]
        node _T_102 = tail(_T_101, 1) @[pid.scala 135:29]
        node _T_103 = asSInt(_T_102) @[pid.scala 135:29]
        e_prev1 <= _T_103 @[pid.scala 135:17]
        skip @[pid.scala 134:23]
      else : @[pid.scala 136:16]
        node _T_104 = sub(ref, feedback) @[pid.scala 137:24]
        node _T_105 = tail(_T_104, 1) @[pid.scala 137:24]
        node _T_106 = asSInt(_T_105) @[pid.scala 137:24]
        e_prev1 <= _T_106 @[pid.scala 137:17]
        skip @[pid.scala 136:16]
      e_prev2 <= e_prev1 @[pid.scala 139:17]
      sigma_old <= sigma_new @[pid.scala 140:17]
      node _T_107 = add(pi_sum, derivative_out) @[pid.scala 141:27]
      node _T_108 = tail(_T_107, 1) @[pid.scala 141:27]
      node _T_109 = asSInt(_T_108) @[pid.scala 141:27]
      reg_pid_out <= _T_109 @[pid.scala 141:17]
      skip @[pid.scala 132:20]
    node _T_110 = bits(reg_pid_out, 15, 15) @[pid.scala 144:54]
    node _T_111 = or(pi_sum_overflow, _T_110) @[pid.scala 144:40]
    node _T_113 = mux(_T_111, asSInt(UInt<1>("h00")), reg_pid_out) @[pid.scala 144:23]
    io.pid_out <= _T_113 @[pid.scala 144:17]
    
  module Motor_Top_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {wbs : {flip m2s : {addr : UInt<16>, data : UInt<32>, we : UInt<1>, sel : UInt<4>, stb : UInt<1>, cyc : UInt<1>}, ack_o : UInt<1>, data_o : UInt<32>}, motor_gpio : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, flip motor_select : UInt<1>, motor_irq : UInt<1>}
    
    inst interlink of Interlink_Module_2 @[motor_top.scala 41:26]
    interlink.clock <= clock
    interlink.reset <= reset
    interlink.io.motor_select <= io.motor_select @[motor_top.scala 45:29]
    interlink.io.bus_stb_i <= io.wbs.m2s.stb @[motor_top.scala 48:29]
    interlink.io.bus_cyc_i <= io.wbs.m2s.cyc @[motor_top.scala 49:29]
    interlink.io.bus_adr_i <= io.wbs.m2s.addr @[motor_top.scala 50:29]
    interlink.io.bus_sel_i <= io.wbs.m2s.sel @[motor_top.scala 51:29]
    interlink.io.bus_we_i <= io.wbs.m2s.we @[motor_top.scala 52:29]
    io.wbs.data_o <= interlink.io.bus_dat_o @[motor_top.scala 53:29]
    io.wbs.ack_o <= interlink.io.bus_ack_o @[motor_top.scala 54:29]
    inst pwm of PWM_2 @[motor_top.scala 57:37]
    pwm.clock <= clock
    pwm.reset <= reset
    pwm.io.reg_val_we <= interlink.io.tmr_val_we @[motor_top.scala 59:29]
    pwm.io.reg_val_di <= io.wbs.m2s.data @[motor_top.scala 60:29]
    interlink.io.tmr_val_do <= pwm.io.reg_val_do @[motor_top.scala 61:29]
    pwm.io.reg_cfg_we <= interlink.io.tmr_cfg_we @[motor_top.scala 63:29]
    pwm.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 64:29]
    interlink.io.tmr_cfg_do <= pwm.io.reg_cfg_do @[motor_top.scala 65:29]
    pwm.io.reg_dat_we <= interlink.io.tmr_dat_we @[motor_top.scala 67:29]
    pwm.io.reg_dat_di <= io.wbs.m2s.data @[motor_top.scala 68:29]
    interlink.io.tmr_dat_do <= pwm.io.reg_dat_do @[motor_top.scala 69:29]
    pwm.io.reg_duty_we <= interlink.io.tmr_duty_we @[motor_top.scala 70:29]
    pwm.io.reg_duty_di <= io.wbs.m2s.data @[motor_top.scala 71:29]
    interlink.io.tmr_duty_do <= pwm.io.reg_duty_do @[motor_top.scala 72:29]
    wire pid_out : SInt<16> @[motor_top.scala 75:35]
    pwm.io.reg_pid_out <= pid_out @[motor_top.scala 77:29]
    io.motor_irq <= pwm.io.irq_out @[motor_top.scala 78:29]
    io.motor_gpio.pwm_high <= pwm.io.pwm_h @[motor_top.scala 81:29]
    io.motor_gpio.pwm_low <= pwm.io.pwm_l @[motor_top.scala 82:29]
    inst qei of Quad_Encoder_2 @[motor_top.scala 86:37]
    qei.clock <= clock
    qei.reset <= reset
    qei.io.quad_a <= io.motor_gpio.qei_ch_a @[motor_top.scala 87:29]
    qei.io.quad_b <= io.motor_gpio.qei_ch_b @[motor_top.scala 88:29]
    qei.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 89:29]
    qei.io.reg_count_we <= interlink.io.qei_count_we @[motor_top.scala 91:29]
    qei.io.reg_count_di <= io.wbs.m2s.data @[motor_top.scala 92:29]
    interlink.io.qei_count_do <= qei.io.reg_count_do @[motor_top.scala 93:29]
    qei.io.reg_cfg_we <= interlink.io.qei_cfg_we @[motor_top.scala 95:29]
    qei.io.reg_cfg_di <= io.wbs.m2s.data @[motor_top.scala 96:29]
    interlink.io.qei_cfg_do <= qei.io.reg_cfg_do @[motor_top.scala 97:29]
    interlink.io.qei_speed_do <= qei.io.reg_speed_do @[motor_top.scala 99:29]
    inst pid of PID_Controller_2 @[motor_top.scala 102:37]
    pid.clock <= clock
    pid.reset <= reset
    pid.io.fb_period <= qei.io.fb_period @[motor_top.scala 103:29]
    pid.io.speed_fb_in <= qei.io.reg_speed_do @[motor_top.scala 104:29]
    pid.io.reg_kp_we <= interlink.io.pid_kp_we @[motor_top.scala 106:29]
    node _T_48 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 107:41]
    node _T_49 = asSInt(_T_48) @[motor_top.scala 107:53]
    pid.io.reg_kp_di <= _T_49 @[motor_top.scala 107:29]
    interlink.io.pid_kp_do <= pid.io.reg_kp_do @[motor_top.scala 108:29]
    pid.io.reg_ki_we <= interlink.io.pid_ki_we @[motor_top.scala 110:29]
    node _T_50 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 111:41]
    node _T_51 = asSInt(_T_50) @[motor_top.scala 111:53]
    pid.io.reg_ki_di <= _T_51 @[motor_top.scala 111:29]
    interlink.io.pid_ki_do <= pid.io.reg_ki_do @[motor_top.scala 112:29]
    pid.io.reg_kd_we <= interlink.io.pid_kd_we @[motor_top.scala 114:29]
    node _T_52 = bits(io.wbs.m2s.data, 7, 0) @[motor_top.scala 115:41]
    node _T_53 = asSInt(_T_52) @[motor_top.scala 115:53]
    pid.io.reg_kd_di <= _T_53 @[motor_top.scala 115:29]
    interlink.io.pid_kd_do <= pid.io.reg_kd_do @[motor_top.scala 116:29]
    pid.io.reg_ref_we <= interlink.io.pid_ref_we @[motor_top.scala 118:29]
    node _T_54 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 119:41]
    node _T_55 = asSInt(_T_54) @[motor_top.scala 119:54]
    pid.io.reg_ref_di <= _T_55 @[motor_top.scala 119:29]
    interlink.io.pid_ref_do <= pid.io.reg_ref_do @[motor_top.scala 120:29]
    pid.io.reg_fb_we <= interlink.io.pid_fb_we @[motor_top.scala 122:29]
    node _T_56 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 123:41]
    node _T_57 = asSInt(_T_56) @[motor_top.scala 123:54]
    pid.io.reg_fb_di <= _T_57 @[motor_top.scala 123:29]
    interlink.io.pid_fb_do <= pid.io.reg_fb_do @[motor_top.scala 124:29]
    pid.io.reg_cfg_we <= interlink.io.pid_cfg_we @[motor_top.scala 126:29]
    node _T_58 = bits(io.wbs.m2s.data, 15, 0) @[motor_top.scala 127:41]
    node _T_59 = asSInt(_T_58) @[motor_top.scala 127:54]
    pid.io.reg_cfg_di <= _T_59 @[motor_top.scala 127:29]
    interlink.io.pid_cfg_do <= pid.io.reg_cfg_do @[motor_top.scala 128:29]
    pid_out <= pid.io.pid_out @[motor_top.scala 130:29]
    pid.io.raw_irq <= pwm.io.rawirq_out @[motor_top.scala 131:29]
    
  module WB_InterConnect : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dbus : {flip addr : UInt<32>, flip wdata : UInt<32>, rdata : UInt<32>, flip rd_en : UInt<1>, flip wr_en : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, valid : UInt<1>}, ibus : {flip addr : UInt<32>, inst : UInt<32>, valid : UInt<1>}, uart_tx : UInt<1>, flip uart_rx : UInt<1>, uart_irq : UInt<1>, spi_cs : UInt<1>, spi_clk : UInt<1>, spi_mosi : UInt<1>, flip spi_miso : UInt<1>, spi_irq : UInt<1>, m1_io : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, m2_io : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, m3_io : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, m1_irq : UInt<1>, m2_irq : UInt<1>, m3_irq : UInt<1>}
    
    inst dmem of DMem_Interface @[wb_interconnect.scala 65:24]
    dmem.clock <= clock
    dmem.reset <= reset
    inst imem of IMem_Interface @[wb_interconnect.scala 66:24]
    imem.clock <= clock
    imem.reset <= reset
    inst wbm_dbus of WBM_DBus @[wb_interconnect.scala 67:24]
    wbm_dbus.clock <= clock
    wbm_dbus.reset <= reset
    inst uart of UART @[wb_interconnect.scala 68:24]
    uart.clock <= clock
    uart.reset <= reset
    inst spi of SPI @[wb_interconnect.scala 69:24]
    spi.clock <= clock
    spi.reset <= reset
    inst m1 of Motor_Top @[wb_interconnect.scala 70:24]
    m1.clock <= clock
    m1.reset <= reset
    inst m2 of Motor_Top_1 @[wb_interconnect.scala 71:24]
    m2.clock <= clock
    m2.reset <= reset
    inst m3 of Motor_Top_2 @[wb_interconnect.scala 72:24]
    m3.clock <= clock
    m3.reset <= reset
    io.dbus.valid <= wbm_dbus.io.dbus.valid @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.ld_type <= io.dbus.ld_type @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.st_type <= io.dbus.st_type @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.wr_en <= io.dbus.wr_en @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.rd_en <= io.dbus.rd_en @[wb_interconnect.scala 75:20]
    io.dbus.rdata <= wbm_dbus.io.dbus.rdata @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.wdata <= io.dbus.wdata @[wb_interconnect.scala 75:20]
    wbm_dbus.io.dbus.addr <= io.dbus.addr @[wb_interconnect.scala 75:20]
    io.ibus.valid <= imem.io.ibus.valid @[wb_interconnect.scala 76:20]
    io.ibus.inst <= imem.io.ibus.inst @[wb_interconnect.scala 76:20]
    imem.io.ibus.addr <= io.ibus.addr @[wb_interconnect.scala 76:20]
    node address = bits(wbm_dbus.io.wbm.m2s.addr, 15, 12) @[wb_interconnect.scala 79:50]
    node imem_addr_match = eq(address, UInt<4>("h00")) @[wb_interconnect.scala 80:35]
    node dmem_addr_match = eq(address, UInt<4>("h01")) @[wb_interconnect.scala 81:35]
    node uart_addr_match = eq(address, UInt<4>("h02")) @[wb_interconnect.scala 82:35]
    node spi_addr_match = eq(address, UInt<4>("h03")) @[wb_interconnect.scala 83:35]
    node m1_addr_match = eq(address, UInt<4>("h04")) @[wb_interconnect.scala 84:35]
    node m2_addr_match = eq(address, UInt<4>("h04")) @[wb_interconnect.scala 85:35]
    node m3_addr_match = eq(address, UInt<4>("h04")) @[wb_interconnect.scala 86:35]
    dmem.io.wbs.m2s.cyc <= wbm_dbus.io.wbm.m2s.cyc @[wb_interconnect.scala 89:20]
    dmem.io.wbs.m2s.stb <= wbm_dbus.io.wbm.m2s.stb @[wb_interconnect.scala 89:20]
    dmem.io.wbs.m2s.sel <= wbm_dbus.io.wbm.m2s.sel @[wb_interconnect.scala 89:20]
    dmem.io.wbs.m2s.we <= wbm_dbus.io.wbm.m2s.we @[wb_interconnect.scala 89:20]
    dmem.io.wbs.m2s.data <= wbm_dbus.io.wbm.m2s.data @[wb_interconnect.scala 89:20]
    dmem.io.wbs.m2s.addr <= wbm_dbus.io.wbm.m2s.addr @[wb_interconnect.scala 89:20]
    imem.io.wbs.m2s.cyc <= wbm_dbus.io.wbm.m2s.cyc @[wb_interconnect.scala 93:20]
    imem.io.wbs.m2s.stb <= wbm_dbus.io.wbm.m2s.stb @[wb_interconnect.scala 93:20]
    imem.io.wbs.m2s.sel <= wbm_dbus.io.wbm.m2s.sel @[wb_interconnect.scala 93:20]
    imem.io.wbs.m2s.we <= wbm_dbus.io.wbm.m2s.we @[wb_interconnect.scala 93:20]
    imem.io.wbs.m2s.data <= wbm_dbus.io.wbm.m2s.data @[wb_interconnect.scala 93:20]
    imem.io.wbs.m2s.addr <= wbm_dbus.io.wbm.m2s.addr @[wb_interconnect.scala 93:20]
    uart.io.wbs.m2s.cyc <= wbm_dbus.io.wbm.m2s.cyc @[wb_interconnect.scala 96:20]
    uart.io.wbs.m2s.stb <= wbm_dbus.io.wbm.m2s.stb @[wb_interconnect.scala 96:20]
    uart.io.wbs.m2s.sel <= wbm_dbus.io.wbm.m2s.sel @[wb_interconnect.scala 96:20]
    uart.io.wbs.m2s.we <= wbm_dbus.io.wbm.m2s.we @[wb_interconnect.scala 96:20]
    uart.io.wbs.m2s.data <= wbm_dbus.io.wbm.m2s.data @[wb_interconnect.scala 96:20]
    uart.io.wbs.m2s.addr <= wbm_dbus.io.wbm.m2s.addr @[wb_interconnect.scala 96:20]
    spi.io.wbs.m2s.cyc <= wbm_dbus.io.wbm.m2s.cyc @[wb_interconnect.scala 99:19]
    spi.io.wbs.m2s.stb <= wbm_dbus.io.wbm.m2s.stb @[wb_interconnect.scala 99:19]
    spi.io.wbs.m2s.sel <= wbm_dbus.io.wbm.m2s.sel @[wb_interconnect.scala 99:19]
    spi.io.wbs.m2s.we <= wbm_dbus.io.wbm.m2s.we @[wb_interconnect.scala 99:19]
    spi.io.wbs.m2s.data <= wbm_dbus.io.wbm.m2s.data @[wb_interconnect.scala 99:19]
    spi.io.wbs.m2s.addr <= wbm_dbus.io.wbm.m2s.addr @[wb_interconnect.scala 99:19]
    m1.io.wbs.m2s.cyc <= wbm_dbus.io.wbm.m2s.cyc @[wb_interconnect.scala 102:17]
    m1.io.wbs.m2s.stb <= wbm_dbus.io.wbm.m2s.stb @[wb_interconnect.scala 102:17]
    m1.io.wbs.m2s.sel <= wbm_dbus.io.wbm.m2s.sel @[wb_interconnect.scala 102:17]
    m1.io.wbs.m2s.we <= wbm_dbus.io.wbm.m2s.we @[wb_interconnect.scala 102:17]
    m1.io.wbs.m2s.data <= wbm_dbus.io.wbm.m2s.data @[wb_interconnect.scala 102:17]
    m1.io.wbs.m2s.addr <= wbm_dbus.io.wbm.m2s.addr @[wb_interconnect.scala 102:17]
    m2.io.wbs.m2s.cyc <= wbm_dbus.io.wbm.m2s.cyc @[wb_interconnect.scala 103:17]
    m2.io.wbs.m2s.stb <= wbm_dbus.io.wbm.m2s.stb @[wb_interconnect.scala 103:17]
    m2.io.wbs.m2s.sel <= wbm_dbus.io.wbm.m2s.sel @[wb_interconnect.scala 103:17]
    m2.io.wbs.m2s.we <= wbm_dbus.io.wbm.m2s.we @[wb_interconnect.scala 103:17]
    m2.io.wbs.m2s.data <= wbm_dbus.io.wbm.m2s.data @[wb_interconnect.scala 103:17]
    m2.io.wbs.m2s.addr <= wbm_dbus.io.wbm.m2s.addr @[wb_interconnect.scala 103:17]
    m3.io.wbs.m2s.cyc <= wbm_dbus.io.wbm.m2s.cyc @[wb_interconnect.scala 104:17]
    m3.io.wbs.m2s.stb <= wbm_dbus.io.wbm.m2s.stb @[wb_interconnect.scala 104:17]
    m3.io.wbs.m2s.sel <= wbm_dbus.io.wbm.m2s.sel @[wb_interconnect.scala 104:17]
    m3.io.wbs.m2s.we <= wbm_dbus.io.wbm.m2s.we @[wb_interconnect.scala 104:17]
    m3.io.wbs.m2s.data <= wbm_dbus.io.wbm.m2s.data @[wb_interconnect.scala 104:17]
    m3.io.wbs.m2s.addr <= wbm_dbus.io.wbm.m2s.addr @[wb_interconnect.scala 104:17]
    reg imem_sel : UInt<1>, clock @[wb_interconnect.scala 107:22]
    reg dmem_sel : UInt<1>, clock @[wb_interconnect.scala 108:22]
    reg uart_sel : UInt<1>, clock @[wb_interconnect.scala 109:22]
    reg spi_sel : UInt<1>, clock @[wb_interconnect.scala 110:22]
    reg m1_sel : UInt<1>, clock @[wb_interconnect.scala 111:22]
    reg m2_sel : UInt<1>, clock @[wb_interconnect.scala 112:22]
    reg m3_sel : UInt<1>, clock @[wb_interconnect.scala 113:22]
    node _T_80 = and(imem_addr_match, imem.io.wbs.m2s.stb) @[wb_interconnect.scala 115:32]
    imem_sel <= _T_80 @[wb_interconnect.scala 115:13]
    node _T_81 = and(dmem_addr_match, dmem.io.wbs.m2s.stb) @[wb_interconnect.scala 116:32]
    dmem_sel <= _T_81 @[wb_interconnect.scala 116:13]
    node _T_82 = and(uart_addr_match, uart.io.wbs.m2s.stb) @[wb_interconnect.scala 117:32]
    uart_sel <= _T_82 @[wb_interconnect.scala 117:13]
    node _T_83 = and(spi_addr_match, spi.io.wbs.m2s.stb) @[wb_interconnect.scala 118:33]
    spi_sel <= _T_83 @[wb_interconnect.scala 118:13]
    node _T_84 = and(m1_addr_match, m1.io.wbs.m2s.stb) @[wb_interconnect.scala 119:30]
    m1_sel <= _T_84 @[wb_interconnect.scala 119:13]
    node _T_85 = and(m2_addr_match, m2.io.wbs.m2s.stb) @[wb_interconnect.scala 120:30]
    m2_sel <= _T_85 @[wb_interconnect.scala 120:13]
    node _T_86 = and(m3_addr_match, m3.io.wbs.m2s.stb) @[wb_interconnect.scala 121:30]
    m3_sel <= _T_86 @[wb_interconnect.scala 121:13]
    node _T_88 = mux(m3_sel, m3.io.wbs.data_o, UInt<1>("h00")) @[wb_interconnect.scala 129:45]
    node _T_89 = mux(m2_sel, m2.io.wbs.data_o, _T_88) @[wb_interconnect.scala 128:43]
    node _T_90 = mux(m1_sel, m1.io.wbs.data_o, _T_89) @[wb_interconnect.scala 127:41]
    node _T_91 = mux(spi_sel, spi.io.wbs.data_o, _T_90) @[wb_interconnect.scala 126:39]
    node _T_92 = mux(uart_sel, uart.io.wbs.data_o, _T_91) @[wb_interconnect.scala 125:37]
    node _T_93 = mux(imem_sel, imem.io.wbs.data_o, _T_92) @[wb_interconnect.scala 124:35]
    node _T_94 = mux(dmem_sel, dmem.io.wbs.data_o, _T_93) @[wb_interconnect.scala 123:32]
    wbm_dbus.io.wbm.data_i <= _T_94 @[wb_interconnect.scala 123:26]
    node _T_96 = mux(m3_sel, m3.io.wbs.ack_o, UInt<1>("h00")) @[wb_interconnect.scala 136:45]
    node _T_97 = mux(m2_sel, m2.io.wbs.ack_o, _T_96) @[wb_interconnect.scala 135:43]
    node _T_98 = mux(m1_sel, m1.io.wbs.ack_o, _T_97) @[wb_interconnect.scala 134:41]
    node _T_99 = mux(spi_sel, spi.io.wbs.ack_o, _T_98) @[wb_interconnect.scala 133:39]
    node _T_100 = mux(uart_sel, uart.io.wbs.ack_o, _T_99) @[wb_interconnect.scala 132:37]
    node _T_101 = mux(imem_sel, imem.io.wbs.ack_o, _T_100) @[wb_interconnect.scala 131:35]
    node _T_102 = mux(dmem_sel, dmem.io.wbs.ack_o, _T_101) @[wb_interconnect.scala 130:32]
    wbm_dbus.io.wbm.ack_i <= _T_102 @[wb_interconnect.scala 130:26]
    uart.io.uart_select <= uart_addr_match @[wb_interconnect.scala 140:24]
    uart.io.rxd <= io.uart_rx @[wb_interconnect.scala 141:24]
    io.uart_tx <= uart.io.txd @[wb_interconnect.scala 142:24]
    io.uart_irq <= uart.io.uartInt @[wb_interconnect.scala 143:24]
    spi.io.spi_select <= spi_addr_match @[wb_interconnect.scala 146:24]
    spi.io.spi_miso <= io.spi_miso @[wb_interconnect.scala 147:24]
    io.spi_cs <= spi.io.spi_cs @[wb_interconnect.scala 148:24]
    io.spi_clk <= spi.io.spi_clk @[wb_interconnect.scala 149:24]
    io.spi_mosi <= spi.io.spi_mosi @[wb_interconnect.scala 150:24]
    io.spi_irq <= spi.io.spi_intr @[wb_interconnect.scala 151:24]
    io.m1_io.pwm_low <= m1.io.motor_gpio.pwm_low @[wb_interconnect.scala 154:24]
    io.m1_io.pwm_high <= m1.io.motor_gpio.pwm_high @[wb_interconnect.scala 154:24]
    m1.io.motor_gpio.qei_ch_b <= io.m1_io.qei_ch_b @[wb_interconnect.scala 154:24]
    m1.io.motor_gpio.qei_ch_a <= io.m1_io.qei_ch_a @[wb_interconnect.scala 154:24]
    m1.io.motor_select <= m1_addr_match @[wb_interconnect.scala 155:24]
    io.m1_irq <= m1.io.motor_irq @[wb_interconnect.scala 156:24]
    io.m2_io.pwm_low <= m2.io.motor_gpio.pwm_low @[wb_interconnect.scala 158:24]
    io.m2_io.pwm_high <= m2.io.motor_gpio.pwm_high @[wb_interconnect.scala 158:24]
    m2.io.motor_gpio.qei_ch_b <= io.m2_io.qei_ch_b @[wb_interconnect.scala 158:24]
    m2.io.motor_gpio.qei_ch_a <= io.m2_io.qei_ch_a @[wb_interconnect.scala 158:24]
    m2.io.motor_select <= m2_addr_match @[wb_interconnect.scala 159:24]
    io.m2_irq <= m2.io.motor_irq @[wb_interconnect.scala 160:24]
    io.m3_io.pwm_low <= m3.io.motor_gpio.pwm_low @[wb_interconnect.scala 162:24]
    io.m3_io.pwm_high <= m3.io.motor_gpio.pwm_high @[wb_interconnect.scala 162:24]
    m3.io.motor_gpio.qei_ch_b <= io.m3_io.qei_ch_b @[wb_interconnect.scala 162:24]
    m3.io.motor_gpio.qei_ch_a <= io.m3_io.qei_ch_a @[wb_interconnect.scala 162:24]
    m3.io.motor_select <= m3_addr_match @[wb_interconnect.scala 163:24]
    io.m3_irq <= m3.io.motor_irq @[wb_interconnect.scala 164:24]
    
  module SoC_Tile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {uart_tx : UInt<1>, flip uart_rx : UInt<1>, spi_cs : UInt<1>, spi_clk : UInt<1>, spi_mosi : UInt<1>, flip spi_miso : UInt<1>, m1_io : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, m2_io : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}, m3_io : {flip qei_ch_a : UInt<1>, flip qei_ch_b : UInt<1>, pwm_high : UInt<1>, pwm_low : UInt<1>}}
    
    inst core of Core @[SoC_Tile.scala 48:32]
    core.clock <= clock
    core.reset <= reset
    inst wb_inter_connect of WB_InterConnect @[SoC_Tile.scala 49:32]
    wb_inter_connect.clock <= clock
    wb_inter_connect.reset <= reset
    core.io.ibus.valid <= wb_inter_connect.io.ibus.valid @[SoC_Tile.scala 52:24]
    core.io.ibus.inst <= wb_inter_connect.io.ibus.inst @[SoC_Tile.scala 52:24]
    wb_inter_connect.io.ibus.addr <= core.io.ibus.addr @[SoC_Tile.scala 52:24]
    core.io.dbus.valid <= wb_inter_connect.io.dbus.valid @[SoC_Tile.scala 53:24]
    wb_inter_connect.io.dbus.ld_type <= core.io.dbus.ld_type @[SoC_Tile.scala 53:24]
    wb_inter_connect.io.dbus.st_type <= core.io.dbus.st_type @[SoC_Tile.scala 53:24]
    wb_inter_connect.io.dbus.wr_en <= core.io.dbus.wr_en @[SoC_Tile.scala 53:24]
    wb_inter_connect.io.dbus.rd_en <= core.io.dbus.rd_en @[SoC_Tile.scala 53:24]
    core.io.dbus.rdata <= wb_inter_connect.io.dbus.rdata @[SoC_Tile.scala 53:24]
    wb_inter_connect.io.dbus.wdata <= core.io.dbus.wdata @[SoC_Tile.scala 53:24]
    wb_inter_connect.io.dbus.addr <= core.io.dbus.addr @[SoC_Tile.scala 53:24]
    io.uart_tx <= wb_inter_connect.io.uart_tx @[SoC_Tile.scala 56:32]
    wb_inter_connect.io.uart_rx <= io.uart_rx @[SoC_Tile.scala 57:32]
    core.io.irq.uart_irq <= wb_inter_connect.io.uart_irq @[SoC_Tile.scala 58:32]
    io.spi_cs <= wb_inter_connect.io.spi_cs @[SoC_Tile.scala 61:32]
    io.spi_clk <= wb_inter_connect.io.spi_clk @[SoC_Tile.scala 62:32]
    io.spi_mosi <= wb_inter_connect.io.spi_mosi @[SoC_Tile.scala 63:32]
    wb_inter_connect.io.spi_miso <= io.spi_miso @[SoC_Tile.scala 64:32]
    core.io.irq.spi_irq <= wb_inter_connect.io.spi_irq @[SoC_Tile.scala 65:32]
    io.m1_io.pwm_low <= wb_inter_connect.io.m1_io.pwm_low @[SoC_Tile.scala 68:12]
    io.m1_io.pwm_high <= wb_inter_connect.io.m1_io.pwm_high @[SoC_Tile.scala 68:12]
    wb_inter_connect.io.m1_io.qei_ch_b <= io.m1_io.qei_ch_b @[SoC_Tile.scala 68:12]
    wb_inter_connect.io.m1_io.qei_ch_a <= io.m1_io.qei_ch_a @[SoC_Tile.scala 68:12]
    io.m2_io.pwm_low <= wb_inter_connect.io.m2_io.pwm_low @[SoC_Tile.scala 69:12]
    io.m2_io.pwm_high <= wb_inter_connect.io.m2_io.pwm_high @[SoC_Tile.scala 69:12]
    wb_inter_connect.io.m2_io.qei_ch_b <= io.m2_io.qei_ch_b @[SoC_Tile.scala 69:12]
    wb_inter_connect.io.m2_io.qei_ch_a <= io.m2_io.qei_ch_a @[SoC_Tile.scala 69:12]
    io.m3_io.pwm_low <= wb_inter_connect.io.m3_io.pwm_low @[SoC_Tile.scala 70:12]
    io.m3_io.pwm_high <= wb_inter_connect.io.m3_io.pwm_high @[SoC_Tile.scala 70:12]
    wb_inter_connect.io.m3_io.qei_ch_b <= io.m3_io.qei_ch_b @[SoC_Tile.scala 70:12]
    wb_inter_connect.io.m3_io.qei_ch_a <= io.m3_io.qei_ch_a @[SoC_Tile.scala 70:12]
    core.io.irq.m1_irq <= wb_inter_connect.io.m1_irq @[SoC_Tile.scala 73:22]
    core.io.irq.m2_irq <= wb_inter_connect.io.m2_irq @[SoC_Tile.scala 74:22]
    core.io.irq.m3_irq <= wb_inter_connect.io.m3_irq @[SoC_Tile.scala 75:22]
    
