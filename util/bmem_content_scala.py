#  * Filename :    Boot_Mem_script.py
#  * Date     :    1-1-2022
#  *
#  * Description:  Loading the machine code from .txt file into Boot Memory
#  *********************************************************************/


# Place this script and bootloader.txt file in the same directory. Otherwise, specify the path of bootloader.txt file

import sys
binfile = sys.argv[-2]
cfile   = sys.argv[-1]

src_file = open(binfile , "r")
des_file = open(cfile , "w")

des_file.write("/********************************************************* \n")
des_file.write(" * Filename :    bmem.scala                                \n")
des_file.write(" * Date     :    28-12-2021                                \n")
des_file.write(" * Author   :    Muhammad Tahir                            \n")
des_file.write(" *                                                         \n")
des_file.write(" * Description:  Boot memory for storing boot loader. This \n")
des_file.write(" *               is an autogenerated file.                 \n")
des_file.write(" ********************************************************/ \n")

des_file.write("\n package memories                                        \n")

des_file.write("import chisel3._                                           \n")
des_file.write("import chisel3.util._                                      \n")
des_file.write("import riscv_uet.{CONSTANTS, Config, IBusIO}               \n")
des_file.write("import chisel3.util.experimental.loadMemoryFromFile        \n")

des_file.write("/*******   Boot memory implementation    ******/           \n")
des_file.write("class BMem_IO extends Bundle with Config {                 \n")
des_file.write("  val bmem_addr   = Input(UInt(WLEN.W))                    \n")
des_file.write("  val bmem_rdata  = Output(UInt(WLEN.W))                   \n")
des_file.write("}                                                        \n\n")

des_file.write("class BMem extends Module with Config {                    \n")
des_file.write("  val io = IO(new BMem_IO)                                 \n")

des_file.write("\n"+" "*2+"val addr = io.bmem_addr(9, 0) / 4.U"+"\n")
des_file.write(" "*2+"val bmem_data = RegInit(0.U(32.W))"+"\n"*2)
des_file.write(" "*2+"switch (addr) {"+"\n")

index = 0

for src_line in src_file:

    i = str(index)

    des_file.write(" "*4+"is("+i+".U) {bmem_data := 0x"+src_line[0:8]+"L.U}" + "\n")

    index+=1

des_file.write(" "*2+"}"+"\n"*2+" "*2+"io.bmem_rdata := bmem_data" + "\n }")

des_file.close()

src_file.close()