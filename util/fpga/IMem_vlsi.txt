module IMem(
  input         clock,
  input  [31:0] io_imem_addr,
  output [31:0] io_imem_rdata,
  input  [31:0] io_imem_wdata,
  input         io_wr_en
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_REG_INIT
  reg [31:0] imem [0:511]; // @[memory.scala 32:25]
  wire  imem_io_imem_rdata_MPORT_en; // @[memory.scala 32:25]
  wire [8:0] imem_io_imem_rdata_MPORT_addr; // @[memory.scala 32:25]
  wire [31:0] imem_io_imem_rdata_MPORT_data; // @[memory.scala 32:25]
  wire [31:0] imem_MPORT_data; // @[memory.scala 32:25]
  wire [8:0] imem_MPORT_addr; // @[memory.scala 32:25]
  wire  imem_MPORT_mask; // @[memory.scala 32:25]
  wire  imem_MPORT_en; // @[memory.scala 32:25]
  reg  imem_io_imem_rdata_MPORT_en_pipe_0;
  reg [8:0] imem_io_imem_rdata_MPORT_addr_pipe_0;
  wire [29:0] inst_address = io_imem_addr[31:2]; // @[memory.scala 34:35]
  assign imem_io_imem_rdata_MPORT_en = imem_io_imem_rdata_MPORT_en_pipe_0;
  assign imem_io_imem_rdata_MPORT_addr = imem_io_imem_rdata_MPORT_addr_pipe_0;
  assign imem_io_imem_rdata_MPORT_data = imem[imem_io_imem_rdata_MPORT_addr]; // @[memory.scala 32:25]
  assign imem_MPORT_data = io_imem_wdata;
  assign imem_MPORT_addr = inst_address[8:0];
  assign imem_MPORT_mask = 1'h1;
  assign imem_MPORT_en = io_wr_en;
  assign io_imem_rdata = imem_io_imem_rdata_MPORT_data; // @[memory.scala 41:17]
  always @(posedge clock) begin
    if (imem_MPORT_en & imem_MPORT_mask) begin
      imem[imem_MPORT_addr] <= imem_MPORT_data; // @[memory.scala 32:25]
    end
    imem_io_imem_rdata_MPORT_en_pipe_0 <= 1'h1;
    if (1'h1) begin
      imem_io_imem_rdata_MPORT_addr_pipe_0 <= inst_address[8:0];
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 512; initvar = initvar+1)
    imem[initvar] = _RAND_0[31:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_1 = {1{`RANDOM}};
  imem_io_imem_rdata_MPORT_en_pipe_0 = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  imem_io_imem_rdata_MPORT_addr_pipe_0 = _RAND_2[8:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule